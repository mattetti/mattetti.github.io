<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: railsontherun.com | Matt Aimonetti]]></title>
  <link href="https://matt.aimonetti.net/articles/categories/railsontherun-com/atom.xml" rel="self"/>
  <link href="https://matt.aimonetti.net/"/>
  <updated>2016-07-27T11:50:22-07:00</updated>
  <id>https://matt.aimonetti.net/</id>
  <author>
    <name><![CDATA[Matt Aimonetti]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Speed up your Rails XML responses]]></title>
    <link href="https://matt.aimonetti.net/posts/2010/02/22/speed-up-your-rails-xml-responses/"/>
    <updated>2010-02-22T23:25:09-08:00</updated>
    <id>https://matt.aimonetti.net/posts/2010/02/22/speed-up-your-rails-xml-responses</id>
    <content type="html"><![CDATA[<p>At <a href="http://www.us.playstation.com/">work</a>, we have an XML API that gets quite a lot of traffic. Last week I looked into improving its performance since we are expecting more traffic soon and want to make sure our response time is optimized.</p>

<p>My first thought was to make sure we hadÂ  an optimized <a href="http://api.rubyonrails.org/classes/ActiveSupport/XmlMini.html">ActiveSupport's xmlmini backend</a>. Rails 2.3.5 fixed some issues when using <a href="http://nokogiri.org/">Nokogiri</a> as a xmlmini so I switched to my favorite Ruby XML lib:</p>

<pre><code>ActiveSupport::XmlMini.backend = 'Nokogiri'
</code></pre>

<p>I run some benchmarks using ab, httperf and jmeter but the results were not that great. I was so sure that switching from <a href="http://ruby-doc.org/stdlib/libdoc/rexml/rdoc/index.html">rexml</a> to <a href="http://nokogiri.org/">nokogiri</a> would give me awesome results that I was very disappointed.</p>

<p>I was about to call <a href="http://tenderlovemaking.com/">Aaron Patterson</a> (Nokogiri's author) to insult him, blame him for _why's disappearance and tell him that all his pro bono efforts were useless since my own app was not running much faster when switched to his library. As I was about to dial his number on my iPhone I had a crazy thought... maybe it was not Aaron's fault, maybe it was mine.</p>

<p>So I took a break went to play some fuzzball and as I was being ridiculed by Italian coworker, Emanuele, I realized that most of our API calls were just simple HTTP requests with no XML payload, just some query params. However, we were generating a lot of XML to send back to the client and AS::XmlMini only takes care of the XML parsing, not the rendering.</p>

<p>The XML rendering is done by <a href="http://onestepback.org/">Jim Weirich</a>'s pure Ruby <a href="http://builder.rubyforge.org/">builder library</a> which is vendored in Rails. Builder does a good job, but I thought that maybe a C based library might improve the speed. A coworker of mine (James Bunch) recommended to look into <a href="http://github.com/codahale/faster-builder">faster-builder</a>, a drop-in Builder replacement based on libxml. Unfortunately, the project doesn't seem to be maintained and I decided to look into using <a href="http://nokogiri.org/">Nokogiri</a> XML builder instead. (Also, faster-builder's author doesn't like me very much while Aaron knows he's one of my Ruby heroes so asking for help could be easier)</p>

<p>Some people reported having tried using <a href="http://nokogiri.org/">Nokogiri</a> as a XML builder but didn't see much speed improvement. Because of the amount of magic required to render a rxml template, I was not really surprised but I decided to contact Aaron and ask him if he tried using his lib instead of builder in a Rails app. <a href="http://www.flickr.com/photos/aaronp/57241193/">Aaron</a> told me he gave it a try a while back and he helped me get my Rails app setup to render xml templates using <a href="http://nokogiri.org/">Nokogiri</a>.</p>

<p>The next step was simple, create a <a href="http://github.com/mattetti/noko-vs-builder-benchmark">benchmark app</a> and benchmark Builder vs Nokogiri using various templates. Here are the results I got using Ruby 1.9.1 (the Ruby version we use in production) and two sets of templates:</p>

<p><strong>Builder</strong> small template, <strong>time per request: 15.507 [ms]</strong> (mean)</p>

<pre><code>$ ab -c 1 -n 200 http://127.0.0.1:3000/benchmarks/builder_small
This is ApacheBench, Version 2.3 &lt;$Revision: 655654 $&gt;
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking 127.0.0.1 (be patient)
Completed 100 requests
Completed 200 requests
Finished 200 requests

Server Software:        nginx/0.7.65
Server Hostname:        127.0.0.1
Server Port:            3000

Document Path:          /benchmarks/builder_small
Document Length:        216 bytes

Concurrency Level:      1
Time taken for tests:   3.101 seconds
Complete requests:      200
Failed requests:        0
Write errors:           0
Total transferred:      114326 bytes
HTML transferred:       43200 bytes
Requests per second:    64.49 [#/sec] (mean)
Time per request:       15.507 [ms] (mean)
Time per request:       15.507 [ms] (mean, across all concurrent requests)
Transfer rate:          36.00 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    0   0.0      0       0
Processing:    11   15   8.8     12      47
Waiting:        3   15   8.9     12      47
Total:         11   15   8.8     12      47

Percentage of the requests served within a certain time (ms)
  50%     12
  66%     12
  75%     13
  80%     13
  90%     35
  95%     36
  98%     38
  99%     41
 100%     47 (longest request)
</code></pre>

<p><strong>Nokogiri</strong> small template, <strong>time per request: 15.354 [ms] (mean)</strong></p>

<pre><code>$ ab -c 1 -n 200 http://127.0.0.1:3000/benchmarks/noko_small
This is ApacheBench, Version 2.3 &lt;$Revision: 655654 $&gt;
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking 127.0.0.1 (be patient)
Completed 100 requests
Completed 200 requests
Finished 200 requests

Server Software:        nginx/0.7.65
Server Hostname:        127.0.0.1
Server Port:            3000

Document Path:          /benchmarks/noko_small
Document Length:        238 bytes

Concurrency Level:      1
Time taken for tests:   3.071 seconds
Complete requests:      200
Failed requests:        0
Write errors:           0
Total transferred:      118717 bytes
HTML transferred:       47600 bytes
Requests per second:    65.13 [#/sec] (mean)
Time per request:       15.354 [ms] (mean)
Time per request:       15.354 [ms] (mean, across all concurrent requests)
Transfer rate:          37.75 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    0   0.0      0       0
Processing:    11   15   8.6     12      39
Waiting:       11   15   8.6     12      39
Total:         11   15   8.6     12      39

Percentage of the requests served within a certain time (ms)
  50%     12
  66%     12
  75%     12
  80%     13
  90%     35
  95%     36
  98%     37
  99%     38
 100%     39 (longest request)
</code></pre>

<p>Running the benchmarks many times showed that Nokogiri and Builder were taking more or less the same amount of time to builder a small template.</p>

<p>I then decided to try a bigger template, closer to what we have in production, here are the results:</p>

<p><strong>Nokogiri</strong> longer template, <strong>time per request: 31.252 [ms] (mean)</strong></p>

<pre><code>$ ab -c 1 -n 200 http://127.0.0.1:3000/benchmarks/noko
This is ApacheBench, Version 2.3 &lt;$Revision: 655654 $&gt;
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking 127.0.0.1 (be patient)
Completed 100 requests
Completed 200 requests
Finished 200 requests

Server Software:        nginx/0.7.65
Server Hostname:        127.0.0.1
Server Port:            3000

Document Path:          /benchmarks/noko
Document Length:        54398 bytes

Concurrency Level:      1
Time taken for tests:   6.250 seconds
Complete requests:      200
Failed requests:        0
Write errors:           0
Total transferred:      10951200 bytes
HTML transferred:       10879600 bytes
Requests per second:    32.00 [#/sec] (mean)
Time per request:       31.252 [ms] (mean)
Time per request:       31.252 [ms] (mean, across all concurrent requests)
Transfer rate:          1711.00 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    0   0.0      0       0
Processing:    24   31  11.3     26      62
Waiting:       23   30  11.3     24      61
Total:         24   31  11.3     26      62

Percentage of the requests served within a certain time (ms)
  50%     26
  66%     27
  75%     27
  80%     29
  90%     54
  95%     55
  98%     58
  99%     59
 100%     62 (longest request)
</code></pre>

<p><strong>Builder</strong>, longer template, <strong>Time per request: 140.725 [ms] (mean)</strong></p>

<pre><code>$ ab -c 1 -n 200 http://127.0.0.1:3000/benchmarks/builder
This is ApacheBench, Version 2.3 &lt;$Revision: 655654 $&gt;
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking 127.0.0.1 (be patient)
Completed 100 requests
Completed 200 requests
Finished 200 requests

Server Software:        nginx/0.7.65
Server Hostname:        127.0.0.1
Server Port:            3000

Document Path:          /benchmarks/builder
Document Length:        54376 bytes

Concurrency Level:      1
Time taken for tests:   28.145 seconds
Complete requests:      200
Failed requests:        0
Write errors:           0
Total transferred:      10947000 bytes
HTML transferred:       10875200 bytes
Requests per second:    7.11 [#/sec] (mean)
Time per request:       140.725 [ms] (mean)
Time per request:       140.725 [ms] (mean, across all concurrent requests)
Transfer rate:          379.83 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    0   0.1      0       1
Processing:   127  141  24.6    132     331
Waiting:      126  139  23.6    130     328
Total:        127  141  24.6    132     331

Percentage of the requests served within a certain time (ms)
  50%    132
  66%    138
  75%    147
  80%    149
  90%    156
  95%    169
  98%    193
  99%    311
 100%    331 (longest request)
</code></pre>

<p>Wow, <a href="http://twitter.com/tenderlove">@tenderlove</a>'s Nokogori just brought us a<strong> 4.5X speed improvement for this specific template</strong>.Â  100ms per request is probably not a big deal for most people and I have to say that Jim did a great job with Builder. However in my specific case, 100ms on a request being called thousands of times per hour is quite important.</p>

<p>(The <a href="http://github.com/mattetti/noko-vs-builder-benchmark">benchmark app is available on github</a>, feel free to fork it and benchmark your own templates)</p>

<p>Who would have thought that a man like this could save the day?!</p>

<p>[caption id="attachment_1737" align="alignleft" width="150" caption="Aaron 'Tenderlove' Patterson"]<a href="http://railsontherun.com/wp-content/uploads/2010/02/aaron.jpg"><img src="http://railsontherun.com/wp-content/uploads/2010/02/aaron-150x150.jpg" alt="" /></a>[/caption]</p>

<p><a href="http://www.flickr.com/photos/aaronp/3824959062/"><img src="http://farm3.static.flickr.com/2470/3824959062_fb0755e665_m_d.jpg" alt="" /></a></p>

<p><a href="http://www.flickr.com/photos/aaronp/57241193/"><img src="http://farm1.static.flickr.com/29/57241193_8137f2a4af_m_d.jpg" alt="" /></a></p>

<p><a href="http://www.flickr.com/photos/aaronp/3132124227/"><img src="http://farm4.static.flickr.com/3289/3132124227_3ace4ec7ae_m_d.jpg" alt="" /></a></p>

<p><strong><em>The moral of the story is that adding a bit of tenderlove to your Ruby code can make it perform much much better!</em></strong></p>

<p><strong>Thank you Aaron 'Tenderlove' Patterson!</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Googlecharts 1.5.1]]></title>
    <link href="https://matt.aimonetti.net/posts/2010/02/03/googlecharts-1-5-1/"/>
    <updated>2010-02-03T21:18:23-08:00</updated>
    <id>https://matt.aimonetti.net/posts/2010/02/03/googlecharts-1-5-1</id>
    <content type="html"><![CDATA[<p>To celebrate the relaunch of this site and since we are waiting for Rails 3.0 beta to be released, I figured I should share with you what I worked on the other night.</p>

<p>I merged patches, refactored and released a new version of googlecharts, my Gem to create graphs using Google Chart API.</p>

<p><code>sudo gem install googlecharts</code></p>

<p>Here is a quick example of how the API works when dealing with a complex graph:</p>

<pre><code>require 'gchart' # or require 'googlecharts' if you prefer to use the Googlecharts constant.
title = "Player Count"
size = "575x300"
data = [85,107,123,131,155,172,173,189,203,222,217,233,250,239,256,267,247,261,275,295,288,305,322,307,325,347,331,346,363,382,343,359,383,352,374,393,358,379,396,416,377,398,419,380,409,426,453,432,452,465,436,460,480,440,457,474,501,457,489,507,347,373,413,402,424,448,475,488,513,475,507,530,440,476,500,518,481,512,531,367,396,423,387,415,446,478,442,469,492,463,489,508,463,491,518,549,503,526,547,493,530,549,493,520,541,564,510,535,564,492,512,537,502,530,548,491,514,538,568,524,548,568,512,533,552,577,520,545,570,516,536,555,514,536,566,521,553,579,604,541,569,595,551,581,602,549,576,606,631,589,615,650,597,624,646,672,605,626,654,584,608,631,574,597,622,559,591,614,644,580,603,629,584,615,631,558,591,618,641,314,356,395,397,429,450,421,454,477,507,458,490,560,593]
Gchart.line(:title =&gt; title, :size =&gt; size, :data =&gt; data, :axis_with_labels =&gt; 'x,y', :line_color =&gt; '1e60cc', :axis_labels =&gt; [(1.upto(24).to_a &lt;&lt; 1)], :max_value =&gt; 700, :custom =&gt; 'chg=10,15,1,0')
</code></pre>

<p>Which provides you with the url or image tag (or downloaded file) that produces the following graph:</p>

<p><img src="http://chart.apis.google.com/chart?chxl=0:|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|1&amp;chxt=x,y&amp;chco=1e60cc&amp;chg=10,15,1,0&amp;chd=s:HJKLNPPQRTTUWVWXVXYaZbcbcedeghefhfhifhjkhjlhklomopmoqmopsorsehkjlnqrtqsumqstqtvgjliknqnprprsprtwsuwruwruvxtvxrtvsuwrtvyuwytvwzuwytvxtvyuwz1vy0wz1wz130250357135z13y03x025z13z23x024bfijlnloqsorx0&amp;chtt=Player+Count&amp;cht=lc&amp;chs=575x300&amp;chxr=1,85,700" alt="Google Chart" /></p>

<p>This release works great with Ruby 1.9 and <a href="http://macruby.org">MacRuby</a>, lots of bugs got fixed and some new features were added. Something a lot of people complained was that the gem was called googlecharts but that the main class was called Gchart. The problem was that I wrote my gem and called it Gchart and when I went to register the rubyforge project page, the name was already taken. In this release, I fixed this problem by allowing users to require and use the constant name they want, Gchart or Googlecharts. I also spent quite a lot of time cleaning up the old code which I was a bit ashamed of. Class variables are now removed and overall, the code should be a bit more sane.</p>

<p>The source code can be found in my <a href="http://github.com/mattetti/googlecharts/">GitHub accout</a> and the documentation <a href="http://mattetti.github.com/googlecharts/">there</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails and Merb core team working together]]></title>
    <link href="https://matt.aimonetti.net/posts/2008/12/24/rails-and-merb-core-team-working-together/"/>
    <updated>2008-12-24T08:47:00-08:00</updated>
    <id>https://matt.aimonetti.net/posts/2008/12/24/rails-and-merb-core-team-working-together</id>
    <content type="html"><![CDATA[<h3>This is huge!</h3>

<p><img src="http://merbist.com/wp-content/uploads/2008/12/surprise-296x300.jpg" alt="" /></p>

<p>While people still try to find some drama an in hypothetical war between rails and merb.</p>

<p>The Rails team and the Merb team announced working together on a joined version of the 2 frameworks. This is so exciting, nobody believed it could ever happen (I personally, had my serious doubt).</p>

<p>Yehuda had a great post laying down the plan and explaining things in details. Check out Davidâs post explaining why he wants us to work together and his vision of a better Ruby world.</p>

<p>I have to say that I have been impressed by the Rails core team and especially David (DHH).</p>

<p>Iâve known David for few years now and we had long/heated discussions on topics like i18n/l10n for Rails. David is known to be a very opinionated person. But if you come up with the right arguments, he can be convinced and when that happens, he is willing to move forward and shake things up.</p>

<p>This merge is a concrete example that David and the rest of the Rails team cares about Rails and the Ruby community more than we usually give them credit for. As a unified team, we are going to change the way web development in Ruby is done!</p>

<p>But what does it mean for you?</p>

<p>I put together a FAQ video here is the transcript:</p>

<p>Hi, Iâm Matt Aimonetti from the merb core team and as you might have heard, a big announcement was made earlier today.</p>

<p>I did this video to hopefully answer the questions you might have.</p>

<h3>Q: So whatâs the big news?</h3>

<ul>
<li><p>merb and rails team will work together on the next version of their frameworks</p></li>
<li><p>merb 2.0 and rails 3.0 share the same common endpoint</p></li>
<li><p>we realized we now have the same objectives and agreed on all the key principles.</p></li>
<li><p>merb will provide Rails with agnosticism, modularity, improved performance and a public API.</p></li>
<li><p>The end product will be called Rails 3.0 but what real matters is that itâs a huge gain for the entire community.</p></li>
</ul>


<h3>Q: What??? I thought there was a war going on between Rails and merb, what happened?</h3>

<ul>
<li><p>There was no war between rails and merb</p></li>
<li><p>We created merb because rails was not fitting us</p></li>
<li><p>We wanted better performance, more choices/ more modularity and a Public API.</p></li>
<li><p>The Rails team now embraces these concepts and want Rails to follow them, so why not work together?</p></li>
</ul>


<h3>Q: Wait, does that mean that merb is dead?</h3>

<ul>
<li><p>Absolutely not!</p></li>
<li><p>merb development wonât stop, we are going to keep on releasing updates until rails 3.0</p></li>
<li><p>clear migration path, and upgrading to rails 3.0 will be as trivial as upgrading from rails 2.x to Rails 3.0</p></li>
</ul>


<h3>Q: What does the timeline look like?</h3>

<p>We just started getting together and discuss the technical details. We are shooting for a release at RailsConf 2009. However itâs hard to estimate this kind of things so again, thatâs just an estimate <img src="http://merbist.com/wp-includes/images/smilies/icon_smile.gif" alt=":)" /></p>

<h3>Q: I just started a merb project, so what now?</h3>

<p>Iâm sure you had valid reasons to use merb, you needed modularity, performance and a solid API.</p>

<p>Keep on using Merb, we wonât let you down. The good news is that the next version of merb (rails 3.0) will be even awesomer!</p>

<h3>Q: What about my client who was looking at using merb for his new project?</h3>

<p>If your client is going to be using merb for valid reasons (and not, just because itâs not rails) he should still use merb, but with the full understanding that he/she will end up using Rails in 6 months or so. Again, Rails 3.0 will have what pushed you to use merb.</p>

<h3>Q: Iâve been involved with the merb-book, what will happen with this project?</h3>

<ul>
<li><p>rails 3.0 wonât get released right away</p></li>
<li><p>still need awesome documentation</p></li>
<li><p>if we look at rails 3.0 as merb 2.0, we can easily imagine how the current work can be extended to the new version.</p></li>
<li><p>rails team will also include an evangelism team which I will be part of, so will be able to focus more on projects like the book.</p></li>
</ul>


<h3>Q: Iâve been working on a merb plugin, what should I do?</h3>

<p>Keep working on it! Weâll assist you with the migration process and the new solid API.</p>

<h3>Q: What if I still have questions?</h3>

<p>Come talk with me, or any members from the new team. Weâll be open to hear your questions, worries, frustrations.</p>

<p>merb always valued its developers and we will continue to do so but at a bigger scale.</p>

<hr />

<p>Concretely, nothing changes for Merb users. People loving Merb should not worry. The way you build merb apps wonât change until merb2.0/rails3.0. We will still work on your favorite framework and improve it.</p>

<p>Lori Holden worked on merb_sequel and we should release a 1.0 release of the plugin in a few days.</p>

<p>Iâm sure this news comes as a shock for many of you, but try to not see Rails 3.0 as the way Rails is right now. Imagine a version of Rails with true modularity and agnosticism (sequel, DM and AR will still be supported) and the same type of performance as what you get with Merb. In other words, the rails world is about to discover the power of merb!</p>

<p>Here is what Yehuda explicitly says in his blog post:</p>

<ul>
<li><p>Rails will become more modular, starting with a rails-core, and including the ability to opt in or out of specific components. [...]</p></li>
<li><p>We will port all of our performance improvements into Rails. This includes architectural decisions that are big performance wins.[..]</p></li>
<li><p>As of Rails 3, Rails will have a defined public API with a test suite for that API. [..]</p></li>
<li><p>Rails will still ship with the âstackâ version as the default (just as Merb does since 1.0), but the goal is to make it easy to do with Rails what people do with Merb today.</p></li>
<li><p>Rails will be modified to more easily support DataMapper or Sequel as first-class ORMs. [..]</p></li>
<li><p>Rails will continue their recent embrace of Rack, which [..] will improve the state of modular, sharable logic between applications.</p></li>
<li><p>In general, we will take a look at features in Merb that are not in Rails (the most obvious example is the more robust router) and find a way to bring them into Rails.</p></li>
</ul>


<h2>Personal perspective</h2>

<p>Iâm personally really excited about this opportunity. I had a hard time believing that we could work together but I was proved wrong. We have many challenges in front of us, but watching the two teams working together is very reassuring.</p>

<p>Iâm also glad to see that we will have a Rails Evangelism team that I will be part of. I strongly believe that one of the many reasons why merb has been so successful is because we work and listen to our community. We have put a tremendous amount of energy trying to understand what you guys need and what you like and dislike. In return, we saw many people working hard on the wiki and the merb-book.</p>

<p>Can you imagine doing that with almost 4 Million Rails developers?</p>

<p>Iâm also looking forward to working with a team and reaching to even more people.</p>

<h2>Other news related to the merge:</h2>

<ul>
<li><p>The RubyOnRails website will keep a trace of this historical moment: <a href="http://rubyonrails.org/merb">http://rubyonrails.org/merb</a></p></li>
<li><p>The <a href="http://merbclass.com/">merb training scheduled for Jan 19-21</a> in partnership with <a href="http://integrumtech.com/">Integrum</a> will still take place, and if you want to get a head start and learn about the things that will make Rails 3.0 totally kick ass, Iâd suggest you join us.</p></li>
</ul>


<p>If you have any questions, or if you want me to publicly answer questions on your blog please contact me. Iâll do my best to get back to everyone.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MerbCamp 2008 SanDiego]]></title>
    <link href="https://matt.aimonetti.net/posts/2008/09/16/merbcamp-2008-sandiego/"/>
    <updated>2008-09-16T06:27:00-07:00</updated>
    <id>https://matt.aimonetti.net/posts/2008/09/16/merbcamp-2008-sandiego</id>
    <content type="html"><![CDATA[<p><img src="http://merbivore.com/img/merbcamp_badge_200.gif" alt="merbcamp" /></p>

<p>That's now finally <a href="http://www.reuters.com/article/pressRelease/idUS113181+09-Sep-2008+PRN20080909">official</a>, <a href="http://merbcamp.com">MerbCamp</a> 2008 <a href="http://merbcamp.com/#registration">registration</a> are open! What an exciting time!</p>

<h2>History</h2>

<p>To understand why I'm excited, we need to go back few months back. Merb was first released by <a href="http://brainspl.at/">Ezra</a> has an alternative tool to handle file uploads. Merb came to reality because Ezra needed something fast, light and flexible to handle something that, let's be frank about it, Rails had a hard time dealing with. Rails was king but was not as popular as now. Merb started as a simple Mongrel handler, in other words an alternative for small, light limited actions. Most people started using Merb simply to handle uploads. But as few cool kids started using Merb, they thought, hey, this thing is super fast, maybe I can use it to build small standalone apps. After all, hardcore developers don't need "cool ajax helpers" and form builders to create a simple site. <a href="">Geoffrey Grosenback</a> aka topfunky even proudly used Merb to reduild his site!
That was just enough to convince me to start using Merb back at version 0.3.4.</p>

<p>I was an active Rails user and contributor. Having to use a bare bone Ruby web framework was quite refreshing however the lack of testing framework was a real show stopper :( (Being hooked up on RSpec by <a href="http://joshknowles.com">Josh Knowles</a> I ended up only writing a small portion of a Rails app with Merb 0.3.x (uploader backend).)</p>

<p>Quite quickly Merb's philosophy changed and switched. The Mongrel handler framework started dreaming of becoming an alternative to Rails. Merb took the best from Rails but targeted another audience: the Ruby hackers living on the edge.
Merb prides itself in being less opinionated than Rails(that can be argued tho), ORM agnostic (supporting ActiveRecord, Sequel and DataMapper), Javascript framework agnostic and truly modular. People like <a href="http://yehudakatz.com">Yehuda Katz</a>, <a href="http://merb.lighthouseapp.com/users/10354">Michael Klishin aka antares</a> got involved, as more contributors joined the effort, rules were enforced to make sure the framework would be as fast as possible and easy to extend without monkey patching. (ohh and fully tested using RSpec ;)</p>

<p><a href="http://engineyard.com">Engine Yard</a> decided to support the development effort and helped with Merb's major rewrite (0.9 versions). Today, Merb is divided in 3 repositories, merb-core, merb-more and merb-plugins. By letting developers only choose what they want to use and by following a principle of isolation with private/public APIs, I believe Merb is today the most flexible yet powerful Ruby framework available.
Furthermore, even though many people don't understand the purpose of rewriting a "new Rails" from scratch, the reality is that many progress made by the merb team were ported back to Rails and inspired others (DataMapper for instance)!</p>

<p>Anyway, this is not a sale's speech and I'm not trying to convince you to use Merb. My point is that Merb is finally coming to a point where the public API is stable and where one would find most tools he needs to build production ready applications.
And, that's basically a long sum up explaining why I wanted to organize something special to celebrate the 1.0 release and to create more awareness around Merb's awesomeness!</p>

<h2>The Team behind MerbCamp</h2>

<p>I started getting involved with the SDRuby community a couple of years ago. As I got to know more people I realized that many people lead by <a href="http://mokolabs.com">Patrick Crowley</a> (leader of SDRuby and one of the organizers of SD BarCamp) had the desire to organize a local Ruby conf/camp.</p>

<p>At the same time, while I was working daily with Merb and contributing back to Merb's code, many other SDRuby fellows were also getting really excited about Merb (<a href="http://notch8.com">Rob Kaufman</a>, <a href="http://">Ryan Felton</a> to mention a few).</p>

<p>Seeing the opportunity to host the very first Merb event in San Diego (host of RubyConf 2005!) I chatted with <a href="http://yehudakatz.com">yehuda</a> and the rest of the merb team. All the merb people were really excited, Leah Sibler from <a href="http://engineyard.com">Engine Yard</a> even offered her expertise to organize such an event (she's totally awesome at planning/running conferences).</p>

<p>However, setting up such an event isn't something one can do on his own. Before promising anything, I checked that Rubyists from San Diego would be interested and would help. In no time, I got a lot of people offering to help.</p>

<p>The key thing for me was to get someone with a good experience in organizing conferences. A person with resources and contacts. The only person I knew in San Diego who would be good enough to do that was <a href="http://mokolabs.com">Patrick Crowley</a>. We had a quick chat Patrick and I and it turned out that Patrick was very excited about organizing the very first MerbCamp in his town.
Patrick quickly got a team together who agreed on working on the project. We got back to the Merb team and sealed the deal.</p>

<p>Patrick even found the <a href="http://www.calit2.net/">awesome venue</a> that many other cities will envy us! He's been running the show, running here and there, making phone calls to make sure registration would open on time, setup the website etc.... Thanks Patrick!</p>

<h2>The Conf</h2>

<p>MerbCamp will be an hybrid between a BarCamp, a conference and an unconference. When the organization team got together, we all agreed that what we like the most during conferences is networking. We certainly also enjoy some good talks and definitely enjoyed the hack-room during the last Rails Conf.  We therefore decided to organize a conf  <em>*we</em>* would love to go.</p>

<ul>
<li><p>1 scheduled track with "official talks" to make sure we have some serious content and to motivate people to signup ;)</p></li>
<li><p>BBQ at the beach, because we live in San Diego and we love that! (plus, big open meals are the best way to network)</p></li>
<li><p>BarCamp type impromptu talks</p></li>
<li><p>hack-rooms so people can work together</p></li>
<li><p>friendly and small conference (we limited the amount of participants to 200)</p></li>
</ul>


<p>To conclude, I hope the "history" of MerbCamp 08 wasn't too boring. People seem quite excited about this event, we even have guys in London who would get together to watch the talks via a webcam we are going to setup for them.
We hope to see you there, if not, we hope you'll organize your own conference and we will come have fun with you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[db fixtures replacement solution step by step]]></title>
    <link href="https://matt.aimonetti.net/posts/2008/09/07/db-fixtures-replacement-solution-step-by-step/"/>
    <updated>2008-09-07T16:06:00-07:00</updated>
    <id>https://matt.aimonetti.net/posts/2008/09/07/db-fixtures-replacement-solution-step-by-step</id>
    <content type="html"><![CDATA[<p>Like most people who started with Rails a while back, I first loved Rails fixtures and ended up hating them (slow, a pain to maintain etc...).</p>

<p>I went through different experiments, trying different existing libs, writing my own solutions etc... I wasn't quite satisfied until I found <a href="http://github.com/thoughtbot/factory_girl">factory_girl</a> from <a href="http://www.thoughtbot.com/">thoughtbot</a>.</p>

<p>You might not feel the need for a decent fixtures solution if you do a lot of mocking/stubbing, but I recently came back from my "mock everything you can outside of models" approach and I'm getting closer to the <a href="http://snipr.com/3nwry">mock roles, not objects</a> approach. So, I'm loosing my model/controller testing separation but I'm gaining by not having to maintain "dumb mocks" which don't always represent the real API behind. I mean, how many times did I change a Model, messing up my app but all my specs were still passing. Anyway, that's a long discussion, which will be covered by <a href="http://yehudakatz.com/">wycats</a> during <a href="http://merbcamp.com">merbcamp</a></p>

<p>So here is a simple example of how I use <a href="http://github.com/thoughtbot/factory_girl">factory girl</a> in a Merb + DataMapper app. (you can do the same in a Rails app, there is <strong>nothing</strong> specific to Merb in factory_girl).</p>

<ul>
<li><p>I. create an empty app, set the ORM etc...</p></li>
<li><p>II. git pull and install factory_girl from <a href="http://github.com/thoughtbot/factory_girl/tree/master">http://github.com/thoughtbot/factory</a>_<a href="http://github.com/thoughtbot/factory_girl/tree/master">girl/tree/master</a>. Or install thoughtbot-factory_girl gem using <a href="http://gems.github.com">GitHub gem server</a>.</p></li>
<li><p><strong>III.</strong> create a spec/factories.rb file. (You might prefer to create a folder called spec/factories and add a factory per model)</p></li>
<li><p><strong>IV.</strong> modify spec_helper.rb and add the following</p>

<p>  require 'factory_girl'
  require File.dirname(<strong>FILE</strong>) + '/factories'</p></li>
<li><p>V. write some specs against a Client model</p></li>
<li><p><strong>VI.</strong> Create the Model</p></li>
<li><p><strong>VII.</strong> create a factory</p></li>
<li><p><strong>IIX.</strong> run your specs</p></li>
</ul>


<p><img src="http://img.skitch.com/20080907-tf8yy6fi82b23t78stqii3mpbe.jpg" alt="failing specs" /></p>

<ul>
<li><p><strong>IX.</strong> fix the model (note that I set <code>dependencies "dm-validations"</code> in my init.rb)</p></li>
<li><p>X. run the specs</p></li>
</ul>


<p><img src="http://img.skitch.com/20080907-m7p2r6q1qau4k3qsmeadwu2tur.jpg" alt="passing specs" /></p>

<ul>
<li><strong>XI.</strong> add more specs</li>
</ul>


<p>As you can see, Factory.build(:client) only creates a new instance of the Object, while Factory(:client) creates, saves and loads the instance.</p>

<ul>
<li><strong>XII.</strong> get them to pass</li>
</ul>


<p>Factory Girl makes fixtures simple and clean. Here is another example for creating associations:</p>

<p>Factory Girl also supports sequencing, check out FG <a href="http://github.com/thoughtbot/factory_girl">read me</a></p>

<h2>In conclusion, Factory Girl is a mature and solid factory solution which will take you less than 15 minutes to get used to. It will offer you loads of flexibility and less frustration than good old yaml fixtures. You can also use it with existing fixtures if you want to start using it in an existing app.</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby developers don't scale]]></title>
    <link href="https://matt.aimonetti.net/posts/2008/08/27/ruby-developers-don-t-scale/"/>
    <updated>2008-08-27T14:58:00-07:00</updated>
    <id>https://matt.aimonetti.net/posts/2008/08/27/ruby-developers-don-t-scale</id>
    <content type="html"><![CDATA[<p>Wow, it's been a while since I blogged. With all the cool kids saying that spending time reading RSS feeds is overrated (see <a href="http://rubyhoedown2008.confreaks.com/08-chris-wanstrath-keynote.html">Defunkt's keynote</a> for instance) I even wonder if people will ever read this post!</p>

<p>Anyways, I have been quite busy preparing courses for classes I gave to a bunch a great Engineers at one of the Fortune 100 companies based in San Diego. I was also planning my big vacation trip to Europe and wrapping up few projects.</p>

<p>However, during my exile overseas, I came to the conclusion that <strong>Rubyists don't scale</strong>. Since Twitter became stable again, we don't hear many people ranting about Rails not scaling anymore.  With one of my clients' app handling around <strong>7 million requests/day</strong> I can tell you <strong>Ruby/Merb do scale quite well</strong>! But ruby developers don't seem to scale for some reason.</p>

<p>Maybe saying that we(Rubyists) don't scale isn't technically correct but that's basically what one of my client told me.</p>

<p>Let's go back in time a little bit and follow my client who we will call clientX.</p>

<ul>
<li><p>ClientX has a <strong>great concept</strong> and wants to conquer the internet.</p></li>
<li><p>ClientX hears that <strong>Rails is the way to go</strong>.</p></li>
<li><p>ClientX hires a contractor/mercenary/freelancer/guns for hire/<strong>consultant</strong> (aka Me)</p></li>
<li><p>Me builds a <strong>killer app</strong> using <strong>Merb</strong> (killing framework)</p></li>
<li><p>ClientX raises loads of <strong>$$$</strong></p></li>
<li><p>ClientX <strong>wants to hire a team</strong> because Me doesn't want to become a FTE</p></li>
<li><p>ClientX and Me <strong>look for Rubyists</strong> wanting to relocate and get a decent salary</p></li>
<li><p>ClientX <em>*can't find someone</em> they consider good enough and who would accept their package</p></li>
<li><p>Many <strong>JAVA guys are available</strong> on location and accept lower packages</p></li>
<li><p><strong>Ruby app gets ported over to JAVA</strong></p></li>
<li><p><strong>Me sad</strong> :(</p></li>
</ul>


<p>So is it really the Rubyists' fault if we don't want to relocate and only accept higher packages? Should I blame <a href="http://blog.obiefernandez.com/">Obie</a> for telling people to charge more and teaching how to <a href="http://rubyhoedown2008.confreaks.com/07-obie-fernandez-do-the-hustle.html">hustle</a>? Or should we just tell clients that it's time to get used to working remotely?</p>

<p>Honestly, I don't think any of the above explanations are valid. Ruby is the new/hot technology and very few people have the skills and experience to lead major projects. These people make a good living and enjoy their "freedom" and dream of building their own products. Most of them/us value their work environment, family and are reluctant to move.</p>

<p><img src="http://img.skitch.com/20080827-rwca7tfprhce6hw19uytfqx1bc.jpg" alt="scale" /></p>

<p>At the same time, companies do need people locally(at least a core team) and can't always afford the cool kids.</p>

<p>ClientX, quite frustrated by the whole hiring process told me once: <strong>"you Ruby folks are too unavailable and difficult to work with! We need a committed team that actually cares about the company/product."</strong></p>

<p>That hurts when you worked hard on a project and just can't satisfy the client by finding guys willing to relocate and work for them. <strong>It gets even more painful when your code gets entirely ported over to JAVA!</strong></p>

<p>But at the same time I understand ClientX's motivation, PHP guys are cheaper, JAVA guys are more available, why in the word did we go with Ruby and are now struggling finding people?</p>

<p>Once again, there is positive and negative side in everything, by choosing Ruby and a "great contractor" ClientX was able to <strong>catch up with the competition and even pass them in no time</strong>. They quickly raised good money and got everything they needed to become #1. I don't believe it would have been possible to do the same thing so quickly with JAVA for instance. However choosing a cutting edge technology means you need to look harder for talented people.</p>

<p>It's too bad the code gets rewritten in a different language but at the same time, I do my best to facilitate the process and to keep a good relation with my client. There was nothing personal in the decision, it's just too bad we were not able to keep on using the latest/coolest/awesomess technology available :)</p>

<h2>To finish on a positive note, here is the solution to scale your Ruby task force provided to you by the #caboose wisdom:</h2>

<p>Based on my conversations with other #caboosers who hire other devs, the word in the street is that you just need to get one or two great ruby guys (who will probably cost you a lot) and find a bunch of smart people to train. You'll end up with an awesome team of scalable rubyists ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Googlecharts featured on Github]]></title>
    <link href="https://matt.aimonetti.net/posts/2008/06/27/googlecharts-featured-on-github/"/>
    <updated>2008-06-27T07:06:00-07:00</updated>
    <id>https://matt.aimonetti.net/posts/2008/06/27/googlecharts-featured-on-github</id>
    <content type="html"><![CDATA[<p><a href="http://github.com">Github</a>, probably the most famous social code hosting service just <a href="http://github.com/blog/103-new-homepage">redesigned their homepage</a> and are now featuring hosted projects.</p>

<p>I got a very good surprise when <a href="http://github.com/takeo">Takeo</a> from <a href="http://powerset.com">Powerset</a> &amp; <a href="http://stafftool.com">Stafftool</a> hall of fame mentioned to me that <a href="http://github.com">Github</a> picked one of my gems as the first featured project!</p>

<p><img src="http://img.skitch.com/20080627-r14subqdx2ye3w13qefbx974gc.png" alt="github" /></p>

<p>By the way, Takeo is also a Googlecharts contributor (+ a Merbist) and I had the honor to be the first one he ever forked!</p>

<p>Another Googlecharts user, <a href="http://graffletopia.com">Mokolabs</a> from Graffletopia and <a href="http://icalshare.com/">iCal Share</a> also decided to try Git and Github. In no time he had forked my project, made some modifications and sent me a pull request. w00t w00t!</p>

<p>To celebrate, we released version 1.3.4 with cleaner documentation, and enhanced features.</p>

<p><a href="http://googlecharts.rubyforge.org/">Documentation</a> &amp; <a href="http://github.com/mattetti/googlecharts">Code Repo</a></p>

<p>Thanks to everyone involved in this project. And special kudos to the <a href="http://github.com">GitHub</a> team for offering such an awesome service!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[About Metaprogramming speed]]></title>
    <link href="https://matt.aimonetti.net/posts/2008/06/18/about-metaprogramming-speed/"/>
    <updated>2008-06-18T07:03:00-07:00</updated>
    <id>https://matt.aimonetti.net/posts/2008/06/18/about-metaprogramming-speed</id>
    <content type="html"><![CDATA[<p>In a <a href="http://railsontherun.com/2008/5/4/avoid-using-metaprogramming">previous article</a> I took an example of bad metaprogramming and I pushed people to think twice before using metaprogramming.</p>

<p>My main points were that:</p>

<ul>
<li><p>you might make your code way slower if you don't know what you are doing</p></li>
<li><p>readability might drop considerably</p></li>
<li><p>maintainability can become an issue</p></li>
</ul>


<p>People left some very good comments about how to write the same module using metaprogramming and keep things fast.</p>

<p>Today <a href="http://yehudakatz.com">Wycats</a> pinged me about this post and told me that the issue was define_method and that class_eval is effectively the same as regular code, it gets evaluated in eval.c, just like regular Ruby code. On the other hand, defined_method has to marshall the proc.</p>

<p>I cleaned up my benchmarks using <a href="http://github.com/somebee/rbench/tree/master">rbench</a>, added some of the solutions provided to me and obtained the following results:</p>

<p><img src="http://img.skitch.com/20080618-ju8hy1b1pw8c3hb882ksr3hbed.jpg" alt="results" /></p>

<p>Here is the original/bad metaprogramming example:</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;9&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;11&lt;tt&gt;
&lt;/tt&gt;12&lt;tt&gt;
&lt;/tt&gt;13&lt;tt&gt;
&lt;/tt&gt;14&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;15&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;16&lt;tt&gt;
&lt;/tt&gt;17&lt;tt&gt;
&lt;/tt&gt;18&lt;tt&gt;
&lt;/tt&gt;19&lt;tt&gt;
&lt;/tt&gt;




&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;module&lt;/span&gt; &lt;span class="cl"&gt;MetaTimeDSL&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;    {&lt;span class="sy"&gt;:second&lt;/span&gt; =&gt; &lt;span class="i"&gt;1&lt;/span&gt;, &lt;tt&gt;
&lt;/tt&gt;     &lt;span class="sy"&gt;:minute&lt;/span&gt; =&gt; &lt;span class="i"&gt;60&lt;/span&gt;, &lt;tt&gt;
&lt;/tt&gt;     &lt;span class="sy"&gt;:hour&lt;/span&gt; =&gt; &lt;span class="i"&gt;3600&lt;/span&gt;, &lt;tt&gt;
&lt;/tt&gt;     &lt;span class="sy"&gt;:day&lt;/span&gt; =&gt; [&lt;span class="i"&gt;24&lt;/span&gt;,&lt;span class="sy"&gt;:hours&lt;/span&gt;], &lt;tt&gt;
&lt;/tt&gt;     &lt;span class="sy"&gt;:week&lt;/span&gt; =&gt; [&lt;span class="i"&gt;7&lt;/span&gt;,&lt;span class="sy"&gt;:days&lt;/span&gt;], &lt;tt&gt;
&lt;/tt&gt;     &lt;span class="sy"&gt;:month&lt;/span&gt; =&gt; [&lt;span class="i"&gt;30&lt;/span&gt;,&lt;span class="sy"&gt;:days&lt;/span&gt;], &lt;tt&gt;
&lt;/tt&gt;     &lt;span class="sy"&gt;:year&lt;/span&gt; =&gt; [&lt;span class="fl"&gt;364.25&lt;/span&gt;, &lt;span class="sy"&gt;:days&lt;/span&gt;]}.each &lt;span class="r"&gt;do&lt;/span&gt; |meth, amount|&lt;tt&gt;
&lt;/tt&gt;      define_method &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="il"&gt;&lt;span class="dl"&gt;#{&lt;/span&gt;meth&lt;span class="dl"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;        amount = amount.is_a?(&lt;span class="co"&gt;Array&lt;/span&gt;) ? amount[&lt;span class="i"&gt;0&lt;/span&gt;].send(amount[&lt;span class="i"&gt;1&lt;/span&gt;]) : amount&lt;tt&gt;
&lt;/tt&gt;        &lt;span class="pc"&gt;self&lt;/span&gt; * amount&lt;tt&gt;
&lt;/tt&gt;      &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;      alias_method &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="il"&gt;&lt;span class="dl"&gt;#{&lt;/span&gt;meth&lt;span class="dl"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="k"&gt;s&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;.intern, &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="il"&gt;&lt;span class="dl"&gt;#{&lt;/span&gt;meth&lt;span class="dl"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="co"&gt;Numeric&lt;/span&gt;.send &lt;span class="sy"&gt;:include&lt;/span&gt;, &lt;span class="co"&gt;MetaTimeDSL&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;
</code></pre>

<p>The no metaprogramming module is available <a href="http://pastie.textmate.org/217046">there</a></p>

<p>Refactored:</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;9&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;11&lt;tt&gt;
&lt;/tt&gt;12&lt;tt&gt;
&lt;/tt&gt;13&lt;tt&gt;
&lt;/tt&gt;14&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;15&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;16&lt;tt&gt;
&lt;/tt&gt;17&lt;tt&gt;
&lt;/tt&gt;18&lt;tt&gt;
&lt;/tt&gt;19&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;20&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;




&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;module&lt;/span&gt; &lt;span class="cl"&gt;RefaMetaTimeDSL&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  {&lt;span class="sy"&gt;:second&lt;/span&gt; =&gt; &lt;span class="i"&gt;1&lt;/span&gt;, &lt;tt&gt;
&lt;/tt&gt;   &lt;span class="sy"&gt;:minute&lt;/span&gt; =&gt; &lt;span class="i"&gt;60&lt;/span&gt;, &lt;tt&gt;
&lt;/tt&gt;   &lt;span class="sy"&gt;:hour&lt;/span&gt; =&gt; &lt;span class="i"&gt;3600&lt;/span&gt;, &lt;tt&gt;
&lt;/tt&gt;   &lt;span class="sy"&gt;:day&lt;/span&gt; =&gt; [&lt;span class="i"&gt;24&lt;/span&gt;,&lt;span class="sy"&gt;:hours&lt;/span&gt;], &lt;tt&gt;
&lt;/tt&gt;   &lt;span class="sy"&gt;:week&lt;/span&gt; =&gt; [&lt;span class="i"&gt;7&lt;/span&gt;,&lt;span class="sy"&gt;:days&lt;/span&gt;], &lt;tt&gt;
&lt;/tt&gt;   &lt;span class="sy"&gt;:month&lt;/span&gt; =&gt; [&lt;span class="i"&gt;30&lt;/span&gt;,&lt;span class="sy"&gt;:days&lt;/span&gt;], &lt;tt&gt;
&lt;/tt&gt;   &lt;span class="sy"&gt;:year&lt;/span&gt; =&gt; [&lt;span class="fl"&gt;364.25&lt;/span&gt;, &lt;span class="sy"&gt;:days&lt;/span&gt;]}.each &lt;span class="r"&gt;do&lt;/span&gt; |meth, amount|&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="pc"&gt;self&lt;/span&gt;.class_eval &lt;span class="s"&gt;&lt;span class="dl"&gt;&lt;&lt;-RUBY&lt;/span&gt;&lt;/span&gt;&lt;span class="s"&gt;&lt;span class="k"&gt;&lt;tt&gt;
&lt;/tt&gt;      def r_&lt;/span&gt;&lt;span class="il"&gt;&lt;span class="dl"&gt;#{&lt;/span&gt;meth&lt;span class="dl"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="k"&gt;&lt;tt&gt;
&lt;/tt&gt;        &lt;/span&gt;&lt;span class="il"&gt;&lt;span class="dl"&gt;#{&lt;/span&gt;amount.is_a?(&lt;span class="co"&gt;Array&lt;/span&gt;) ? &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="il"&gt;&lt;span class="dl"&gt;#{&lt;/span&gt;amount[&lt;span class="i"&gt;0&lt;/span&gt;]&lt;span class="dl"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="k"&gt;.&lt;/span&gt;&lt;span class="il"&gt;&lt;span class="dl"&gt;#{&lt;/span&gt;amount[&lt;span class="i"&gt;1&lt;/span&gt;]&lt;span class="dl"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt; : &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="il"&gt;&lt;span class="dl"&gt;#{&lt;/span&gt;amount&lt;span class="dl"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="dl"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="k"&gt;&lt;tt&gt;
&lt;/tt&gt;      end&lt;tt&gt;
&lt;/tt&gt;      alias_method :r_&lt;/span&gt;&lt;span class="il"&gt;&lt;span class="dl"&gt;#{&lt;/span&gt;meth&lt;span class="dl"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="k"&gt;s, :r_&lt;/span&gt;&lt;span class="il"&gt;&lt;span class="dl"&gt;#{&lt;/span&gt;meth&lt;span class="dl"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="dl"&gt;&lt;tt&gt;
&lt;/tt&gt;    RUBY&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="co"&gt;Numeric&lt;/span&gt;.send &lt;span class="sy"&gt;:include&lt;/span&gt;, &lt;span class="co"&gt;RefaMetaTimeDSL&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;
</code></pre>

<p>the refactor 2 or eval based solution provided by <a href="http://pastie.caboo.se/191414">Matt Jones</a> which uses class_eval like the previous refactor.</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;9&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;11&lt;tt&gt;
&lt;/tt&gt;12&lt;tt&gt;
&lt;/tt&gt;13&lt;tt&gt;
&lt;/tt&gt;14&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;15&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;16&lt;tt&gt;
&lt;/tt&gt;17&lt;tt&gt;
&lt;/tt&gt;18&lt;tt&gt;
&lt;/tt&gt;19&lt;tt&gt;
&lt;/tt&gt;




&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;module&lt;/span&gt; &lt;span class="cl"&gt;EvalMetaTimeDSL&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="r"&gt;def&lt;/span&gt; &lt;span class="pc"&gt;self&lt;/span&gt;.included(base)&lt;tt&gt;
&lt;/tt&gt;      base.class_eval &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;        [ [&lt;span class="sy"&gt;:e_second&lt;/span&gt;, &lt;span class="i"&gt;1&lt;/span&gt;], &lt;tt&gt;
&lt;/tt&gt;          [&lt;span class="sy"&gt;:e_minute&lt;/span&gt;, &lt;span class="i"&gt;60&lt;/span&gt;], &lt;tt&gt;
&lt;/tt&gt;          [&lt;span class="sy"&gt;:e_hour&lt;/span&gt;, &lt;span class="i"&gt;3600&lt;/span&gt;], &lt;tt&gt;
&lt;/tt&gt;          [&lt;span class="sy"&gt;:e_day&lt;/span&gt;, [&lt;span class="i"&gt;24&lt;/span&gt;,&lt;span class="sy"&gt;:e_hours&lt;/span&gt;]], &lt;tt&gt;
&lt;/tt&gt;          [&lt;span class="sy"&gt;:e_week&lt;/span&gt;, [&lt;span class="i"&gt;7&lt;/span&gt;,&lt;span class="sy"&gt;:e_days&lt;/span&gt;]], &lt;tt&gt;
&lt;/tt&gt;          [&lt;span class="sy"&gt;:e_month&lt;/span&gt;, [&lt;span class="i"&gt;30&lt;/span&gt;,&lt;span class="sy"&gt;:e_days&lt;/span&gt;]], &lt;tt&gt;
&lt;/tt&gt;          [&lt;span class="sy"&gt;:e_year&lt;/span&gt;, [&lt;span class="fl"&gt;365.25&lt;/span&gt;, &lt;span class="sy"&gt;:e_days&lt;/span&gt;]]].each &lt;span class="r"&gt;do&lt;/span&gt; |meth, amount|&lt;tt&gt;
&lt;/tt&gt;            amount = amount.is_a?(&lt;span class="co"&gt;Array&lt;/span&gt;) ? amount[&lt;span class="i"&gt;0&lt;/span&gt;].send(amount[&lt;span class="i"&gt;1&lt;/span&gt;]) : amount&lt;tt&gt;
&lt;/tt&gt;            eval &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="il"&gt;&lt;span class="dl"&gt;#{&lt;/span&gt;meth&lt;span class="dl"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="k"&gt;; self*&lt;/span&gt;&lt;span class="il"&gt;&lt;span class="dl"&gt;#{&lt;/span&gt;amount&lt;span class="dl"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="k"&gt;; end&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;            alias_method &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="il"&gt;&lt;span class="dl"&gt;#{&lt;/span&gt;meth&lt;span class="dl"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="k"&gt;s&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;, meth&lt;tt&gt;
&lt;/tt&gt;          &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;      &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="co"&gt;Numeric&lt;/span&gt;.send &lt;span class="sy"&gt;:include&lt;/span&gt;, &lt;span class="co"&gt;EvalMetaTimeDSL&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;
</code></pre>

<p>and finally, the "better metaprogramming" version:</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;9&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;11&lt;tt&gt;
&lt;/tt&gt;12&lt;tt&gt;
&lt;/tt&gt;13&lt;tt&gt;
&lt;/tt&gt;14&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;15&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;16&lt;tt&gt;
&lt;/tt&gt;17&lt;tt&gt;
&lt;/tt&gt;18&lt;tt&gt;
&lt;/tt&gt;19&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;20&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;21&lt;tt&gt;
&lt;/tt&gt;22&lt;tt&gt;
&lt;/tt&gt;




&lt;tt&gt;
&lt;/tt&gt; &lt;span class="r"&gt;module&lt;/span&gt; &lt;span class="cl"&gt;GoodMetaTimeDSL&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="co"&gt;SECOND&lt;/span&gt;  = &lt;span class="i"&gt;1&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="co"&gt;MINUTE&lt;/span&gt;  = &lt;span class="co"&gt;SECOND&lt;/span&gt; * &lt;span class="i"&gt;60&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="co"&gt;HOUR&lt;/span&gt;    = &lt;span class="co"&gt;MINUTE&lt;/span&gt; * &lt;span class="i"&gt;60&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="co"&gt;DAY&lt;/span&gt;     = &lt;span class="co"&gt;HOUR&lt;/span&gt; * &lt;span class="i"&gt;24&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="co"&gt;WEEK&lt;/span&gt;    = &lt;span class="co"&gt;DAY&lt;/span&gt; * &lt;span class="i"&gt;7&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="co"&gt;MONTH&lt;/span&gt;   = &lt;span class="co"&gt;DAY&lt;/span&gt; * &lt;span class="i"&gt;30&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="co"&gt;YEAR&lt;/span&gt;    = &lt;span class="co"&gt;DAY&lt;/span&gt; * &lt;span class="fl"&gt;364.25&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;tt&gt;
&lt;/tt&gt;  &lt;span class="s"&gt;&lt;span class="dl"&gt;%w[&lt;/span&gt;&lt;span class="k"&gt;SECOND MINUTE HOUR DAY WEEK MONTH YEAR&lt;/span&gt;&lt;span class="dl"&gt;]&lt;/span&gt;&lt;/span&gt;.each &lt;span class="r"&gt;do&lt;/span&gt; |const_name|&lt;tt&gt;
&lt;/tt&gt;      meth = const_name.downcase&lt;tt&gt;
&lt;/tt&gt;      class_eval &lt;span class="s"&gt;&lt;span class="dl"&gt;&lt;&lt;-RUBY&lt;/span&gt;&lt;/span&gt; &lt;span class="s"&gt;&lt;span class="k"&gt;&lt;tt&gt;
&lt;/tt&gt;        def g_&lt;/span&gt;&lt;span class="il"&gt;&lt;span class="dl"&gt;#{&lt;/span&gt;meth&lt;span class="dl"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="k"&gt; &lt;tt&gt;
&lt;/tt&gt;          self * &lt;/span&gt;&lt;span class="il"&gt;&lt;span class="dl"&gt;#{&lt;/span&gt;const_name&lt;span class="dl"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="k"&gt; &lt;tt&gt;
&lt;/tt&gt;        end &lt;tt&gt;
&lt;/tt&gt;        alias g_&lt;/span&gt;&lt;span class="il"&gt;&lt;span class="dl"&gt;#{&lt;/span&gt;meth&lt;span class="dl"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="k"&gt;s g_&lt;/span&gt;&lt;span class="il"&gt;&lt;span class="dl"&gt;#{&lt;/span&gt;meth&lt;span class="dl"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="k"&gt; &lt;/span&gt;&lt;span class="dl"&gt;&lt;tt&gt;
&lt;/tt&gt;      RUBY&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="co"&gt;Numeric&lt;/span&gt;.send &lt;span class="sy"&gt;:include&lt;/span&gt;, &lt;span class="co"&gt;GoodMetaTimeDSL&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;
</code></pre>

<p>Looking at the refactored version by Wycats, you can see he's right and the major issue with the original version was define_method. Using class_eval does make things almost as fast and even faster than the no metaprogramming version.</p>

<p>Interesting enough, the benchmarks show that some methods from the meta modules are faster than the ones from the no meta module. Overall, an optimized metaprogramming can be more or else as fast as a non meta code. Of course, with the new VMs coming up, things might change a little bit depending on the language implementation.</p>

<p><em>In conclusion, metaprogramming can be as fast as no metaprogramming but that won't help your code readability and maintainability, so make sure to only use this great trick when needed!</em></p>

<p>p.s: <a href="http://pastie.textmate.org/217071">here</a> is the benchmark file if you don't believe me ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[News update]]></title>
    <link href="https://matt.aimonetti.net/posts/2008/06/18/news-update/"/>
    <updated>2008-06-18T01:40:00-07:00</updated>
    <id>https://matt.aimonetti.net/posts/2008/06/18/news-update</id>
    <content type="html"><![CDATA[<p>I realized I haven't updated this blog in a while. Here is a quick update on what's happened and on things to come:</p>

<ul>
<li><p><a href="http://en.oreilly.com/rails2008/public/content/home">RailsConf 08</a>. Great conference, probably my last Rails Conf though. I'll be in Orlando for <a href="http://rubyconf.org/">Ruby Conf 08</a> and I'll focus on 1 or 2 local conferences (probably <a href="http://mtnwestrubyconf.org/">mountain west</a> and another one).</p></li>
<li><p>MerbCamp 08 in San Diego this Fall organized by <a href="http://sdruby.com">SD Ruby</a>. Details are not finalized yet but <a href="http://yehudakatz.com/">Yehuda Katz</a> announced it during his Merb talk at RailsConf.</p></li>
<li><p>Moved this blog to a new <a href="http://joyent.com">Joyent accelerator</a> with git support and finally have the possibility to use Ambition! (planning on moving from Mephisto to <a href="http://crazycool.co.uk/2008/04/26/announcing-feather">Feather</a>)</p></li>
<li><p>Launched a client's Merb app and getting around 3 million hits/day. Merb is just awesome. (more info when the client's app gets out of beta)</p></li>
<li><p>I'll join <a href="http://railsenvy.com/">Gregg Pollack</a> from <a href="http://railsenvy.com/">http://railsenvy.com/</a> during <a href="http://qcon.infoq.com">Qcon</a> and take part in the <a href="http://qcon.infoq.com/sanfrancisco-2008/tracks/show_track.jsp?trackOID=172">Ruby for the Enterprise</a> track. <a href="http://qcon.infoq.com/sanfrancisco-2008/speaker/Matt+Aimonetti">My talk</a> will focus on Merb usage in real life.</p></li>
<li><p>Renamed my github username, new repo url: <a href="http://github.com/mattetti">http://github.com/mattetti</a> (sorry about that)</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Avoid using metaprogramming (seriously!)]]></title>
    <link href="https://matt.aimonetti.net/posts/2008/05/04/avoid-using-metaprogramming/"/>
    <updated>2008-05-04T08:29:00-07:00</updated>
    <id>https://matt.aimonetti.net/posts/2008/05/04/avoid-using-metaprogramming</id>
    <content type="html"><![CDATA[<p>Ruby is sexy, Ruby is cool and its metaprogramming potential offers some really cook features. However you might not realize that your cleverness is slowing down your code.</p>

<p>Today I was working on cleaning up merb_helper a Merb plugin that brings a lot of the stuff Rails developers are used to. In Merb we aim for speed and try to avoid magic.</p>

<p>merb_plugin didn't receive a lot of love from the main contributors but few features were added by different contributors and the code became hard to maintain.</p>

<p>Looking at the code I quickly found this bad boy:</p>

<p>(Old Merb Time DSL using metaprogramming)</p>

<pre><code>module MetaTimeDSL

    {:second =&gt; 1, 
     :minute =&gt; 60, 
     :hour =&gt; 3600, 
     :day =&gt; [24,:hours], 
     :week =&gt; [7,:days], 
     :month =&gt; [30,:days], 
     :year =&gt; [364.25, :days]}.each do |meth, amount|
      define_method "m_#{meth}" do
        amount = amount.is_a?(Array) ? amount[0].send(amount[1]) : amount
        self * amount
      end
      alias_method "m_#{meth}s".intern, "m_#{meth}"
    end

  end
  Numeric.send :include, MetaTimeDSL
</code></pre>

<p>The above code looks awful to me and I decided to rewrite it a way I thought would be more efficient:</p>

<pre><code> module TimeDSL

    def second
      self * 1
    end
    alias_method :seconds, :second

    def minute
      self * 60
    end
    alias_method :minutes, :minute

    def hour
      self * 3600
    end
    alias_method :hours, :hour

    def day
      self * 86400
    end
    alias_method :days, :day

    def week
      self * 604800
    end
    alias_method :weeks, :week

    def month
      self * 2592000
    end
    alias_method :months, :month

    def year
      self * 31471200
    end
    alias_method :years, :year

  end
  Numeric.send :include, TimeDSL
</code></pre>

<p>To make sure I was right, I run the following benchmarks:</p>

<pre><code>require 'benchmark'
TIMES = (ARGV[0] || 100_000).to_i

Benchmark.bmbm do |x|

  x.report("metaprogramming 360.seconds") do
    TIMES.times do    
      360.m_seconds
    end
  end

  x.report("no metaprogramming 360.hours") do
    TIMES.times do
      360.seconds
    end
  end

  x.report("metaprogramming 360.minutes") do
    TIMES.times do    
      360.m_minutes
    end
  end

  x.report("no metaprogramming 360.minutes") do
    TIMES.times do
      360.minutes
    end
  end

  x.report("metaprogramming 360.hours") do
    TIMES.times do    
      360.m_hours
    end
  end

  x.report("no metaprogramming 360.hours") do
    TIMES.times do
      360.hours
    end
  end

  x.report("metaprogramming 360.days") do
    TIMES.times do    
      360.m_days
    end
  end

  x.report("no metaprogramming 360.days") do
    TIMES.times do
      360.days
    end
  end

  x.report("metaprogramming 360.weeks") do
    TIMES.times do    
      360.m_weeks
    end
  end

  x.report("no metaprogramming 360.weeks") do
    TIMES.times do
      360.weeks
    end
  end

  x.report("metaprogramming 18.months") do
    TIMES.times do    
      18.m_months
    end
  end

  x.report("no metaprogramming 18.months") do
    TIMES.times do
      18.months
    end
  end

  x.report("metaprogramming 7.years") do
    TIMES.times do    
      7.m_years
    end
  end

  x.report("no metaprogramming 7.years") do
    TIMES.times do
      7.years
    end
  end

end


 Rehearsal ------------------------------------------------------------------
metaprogramming 360.seconds      0.130000   0.000000   0.130000 (  0.133164)
no metaprogramming 360.hours     0.050000   0.000000   0.050000 (  0.042655)
metaprogramming 360.minutes      0.130000   0.000000   0.130000 (  0.133327)
no metaprogramming 360.minutes   0.040000   0.000000   0.040000 (  0.042401)
metaprogramming 360.hours        0.140000   0.000000   0.140000 (  0.134312)
no metaprogramming 360.hours     0.040000   0.000000   0.040000 (  0.043125)
metaprogramming 360.days         0.130000   0.000000   0.130000 (  0.134949)
no metaprogramming 360.days      0.050000   0.000000   0.050000 (  0.043745)
metaprogramming 360.weeks        0.130000   0.000000   0.130000 (  0.135581)
no metaprogramming 360.weeks     0.050000   0.000000   0.050000 (  0.043544)
metaprogramming 18.months        0.130000   0.000000   0.130000 (  0.135234)
no metaprogramming 18.months     0.050000   0.000000   0.050000 (  0.044354)
metaprogramming 7.years          0.140000   0.000000   0.140000 (  0.144062)
no metaprogramming 7.years       0.050000   0.000000   0.050000 (  0.044392)
--------------------------------------------------------- total: 1.260000sec

                                     user     system      total        real
metaprogramming 360.seconds      0.130000   0.000000   0.130000 (  0.132567)
no metaprogramming 360.hours     0.040000   0.000000   0.040000 (  0.042777)
metaprogramming 360.minutes      0.140000   0.000000   0.140000 (  0.132554)
no metaprogramming 360.minutes   0.040000   0.000000   0.040000 (  0.043193)
metaprogramming 360.hours        0.130000   0.000000   0.130000 (  0.133027)
no metaprogramming 360.hours     0.050000   0.000000   0.050000 (  0.042613)
metaprogramming 360.days         0.130000   0.000000   0.130000 (  0.138637)
no metaprogramming 360.days      0.050000   0.000000   0.050000 (  0.043213)
metaprogramming 360.weeks        0.130000   0.000000   0.130000 (  0.134049)
no metaprogramming 360.weeks     0.040000   0.000000   0.040000 (  0.043713)
metaprogramming 18.months        0.140000   0.000000   0.140000 (  0.134941)
no metaprogramming 18.months     0.040000   0.000000   0.040000 (  0.043980)
metaprogramming 7.years          0.150000   0.000000   0.150000 (  0.143389)
no metaprogramming 7.years       0.040000   0.000000   0.040000 (  0.044585)
 0.136591)
</code></pre>

<p>The metaprogramming version of the same implementation is almost 3 times slower!</p>

<p>Moral of the story: be careful when using metaprogramming, you might end up slowing down your code considerably.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BarCamp San Diego rev.3]]></title>
    <link href="https://matt.aimonetti.net/posts/2008/04/27/barcamp-san-diego-rev-3/"/>
    <updated>2008-04-27T17:24:00-07:00</updated>
    <id>https://matt.aimonetti.net/posts/2008/04/27/barcamp-san-diego-rev-3</id>
    <content type="html"><![CDATA[<p><img src="http://www.barcampsd.org/badges_for_bcsd3/orange.png" alt="BarCamp" /></p>

<p>Just a reminder, this coming week end, San Diego presents <a href="http://www.barcampsd.org/">BarCamp</a> for the third time.</p>

<p>This time, the chosen Venue is <a href="http://www.technicaltrainingresources.com/">Microsoft</a> in <a href="http://maps.google.com/maps?hl=en&amp;ie=UTF8&amp;f=d&amp;daddr=9255+Towne+Centre+Dr+San+Diego,+CA+92121">La Jolla</a></p>

<p>I was thinking about preparing 2 intro talks, one on <a href="http://merbivore.com">Merb</a> and one on <a href="http://en.wikipedia.org/wiki/Unobtrusive_JavaScript">Unobtrusive Javascript</a> (jQuery, Prototype + LowPro etc...), then we'll see the crowd and what people are interested in. Feel free to give me your feedback, suggestions...</p>

<p>I also heard that on top of the awesome people from san Diego, some other important people are coming just for the event:</p>

<ul>
<li><p><a href="http://glu.ttono.us/">Kevin Clark</a> from the <a href="http://www.powerset.com/">Powerset</a> hall of fame.</p></li>
<li><p><a href="http://derekneighbors.com/">Derek Neighbors</a> representing Phoenix's top Rails shop: <a href="http://integrumtech.com">Integrum</a></p></li>
</ul>


<h2>Warning</h2>

<p>Based on previous BarCamps, you might end up seeing <a href="http://www.flickr.com/photos/kirinqueen/1993483057/sizes/m/in/pool-393912@N21/">a guy wearing a kilt who talks about how he is his own imaginary friend</a>, having to look at  <a href="http://www.flickr.com/photos/techslut/2043825771/sizes/l/in/pool-393912@N21/">ActionScript code</a>, meet <a href="http://www.flickr.com/photos/acphonehome/532658193/in/pool-barcampsd/">a lot</a> of <a href="http://www.flickr.com/photos/kirinqueen/531272887/in/pool-barcampsd">interesting people</a> and even maybe learn about <a href="http://www.flickr.com/photos/techslut/545216043/in/pool-barcampsd">lock picking</a>.</p>

<p><a href="http://farm2.static.flickr.com/1053/527321111_763e4ad085.jpg"><img src="http://farm2.static.flickr.com/1053/527321111_763e4ad085_m.jpg" alt="last year barcamp sd crowd" /></a></p>

<p><a href="http://farm3.static.flickr.com/2004/2044606386_2ee84dcce3.jpg"><img src="http://farm3.static.flickr.com/2004/2044606386_2ee84dcce3_m.jpg" alt="outside" /></a></p>

<p><a href="http://farm2.static.flickr.com/1082/529394507_f34d9015c0.jpg"><img src="http://farm2.static.flickr.com/1082/529394507_f34d9015c0_m.jpg" alt="powerpoint karaoke" /></a></p>

<p><a href="http://farm2.static.flickr.com/1114/527020113_cbe6393372.jpg"><img src="http://farm2.static.flickr.com/1114/527020113_cbe6393372_m.jpg" alt="tshirt printing" /></a></p>

<p><a href="http://farm3.static.flickr.com/2351/1994270564_3a0a2f5319.jpg"><img src="http://farm3.static.flickr.com/2351/1994270564_3a0a2f5319_m.jpg" alt="presentation" /></a></p>

<p>I even heard rumors saying that <a href="http://blog.aisleten.com/">Ryan Felton</a> is organizing another <a href="http://www.flickr.com/photos/kirinqueen/1994487718/in/pool-barcampsd">wii tournament</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Freezing Rails with Git]]></title>
    <link href="https://matt.aimonetti.net/posts/2008/04/16/freezing-rails-with-git/"/>
    <updated>2008-04-16T08:21:00-07:00</updated>
    <id>https://matt.aimonetti.net/posts/2008/04/16/freezing-rails-with-git</id>
    <content type="html"><![CDATA[<p>As you've <a href="http://blog.rubyonrails.com/2008/4/11/rails-premieres-on-github">probably heard</a>, Rails now moved to <a href="http://github.com/rails/rails">its own GitHub repo</a>.</p>

<p>If, like me you were a heavy <a href="http://piston.rubyforge.org/">piston</a> user, you are wondering how you will be able to do the same thing if you switch to git.</p>

<p>First off, you need to know that Piston will soon support git. As a matter a fact it already does. At least you can download a beta version from <a href="http://blog.teksol.info/tags/piston">FranÃ§ois's blog</a>.</p>

<p>You can also go with <a href="http://evil.che.lu/projects/braid">giston/braids</a> which was meant to make the svn/switch easy on you. I heard rumors that <a href="http://evil.che.lu">evilchelu</a> might not keep on developing this project. You might want to check with him.</p>

<p>Personally I didn't really like using any of these solutions. Rails also came with its' own approach. (<a href="http://github.com/rails/rails/commit/4b17082107aced980fc4b511028ee763247bc5ab">rake rails:freeze:edge</a>)</p>

<p>When I recently worked on <a href="http://railsontherun.com/2008/4/15/merb-tip-how-to-freeze-a-project">Merb's freezer</a>, I discovered the power of <a href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html">git submodules</a>.</p>

<p>Submodules allow you to import "modules" from other git repos inside your own repo. Basically they do what piston does for SVN, apart that submodules are built-in git. Of course it has an expected limitation, you can only add git submodules.</p>

<p>The good news is that Rails moved to git and now you can "freeze" Rails as a submodule and update really easily!</p>

<p>First thing first, you need to move your project to git. If you are not confident it's a good move yet, you can use "git-svn". However, I would personally recommend you don't. I did that for few months and when I finally moved to git only, it was a pain to restructure the entire path of the app.</p>

<p>Anyways, let's say you created a new <a href="http://github.com">github</a> project and if still wish to use git svn do:</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;




&lt;span class="er"&gt;$&lt;/span&gt; git-svn import svn&lt;span class="sy"&gt;:/&lt;/span&gt;/path-to-your-svn-repo project-name&lt;tt&gt;
&lt;/tt&gt;&lt;span class="er"&gt;$&lt;/span&gt; cd project-name&lt;tt&gt;
&lt;/tt&gt;&lt;span class="er"&gt;$&lt;/span&gt; git remote add origin git&lt;span class="iv"&gt;@github&lt;/span&gt;.com&lt;span class="sy"&gt;:mattetti&lt;/span&gt;/project-name.git&lt;tt&gt;
&lt;/tt&gt;&lt;span class="er"&gt;$&lt;/span&gt; git push origin master&lt;tt&gt;
&lt;/tt&gt;
</code></pre>

<p>Your project is now under git, but if you pistonized Rails, you can't update it anymore :(</p>

<p>Do not fear my dear friend and do as follows:</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;




&lt;span class="er"&gt;$&lt;/span&gt; rm -rf vendor/rails&lt;tt&gt;
&lt;/tt&gt;&lt;span class="er"&gt;$&lt;/span&gt; git commit&lt;tt&gt;
&lt;/tt&gt;&lt;span class="er"&gt;$&lt;/span&gt; git submodule add git&lt;span class="sy"&gt;:/&lt;/span&gt;/github.com/rails/rails.git vendor/rails&lt;tt&gt;
&lt;/tt&gt;&lt;span class="er"&gt;$&lt;/span&gt; git submodule init&lt;tt&gt;
&lt;/tt&gt;&lt;span class="er"&gt;$&lt;/span&gt; git commit&lt;tt&gt;
&lt;/tt&gt;&lt;span class="er"&gt;$&lt;/span&gt; 
</code></pre>

<p>That's it you are done :)</p>

<p>Next time you want to update just do:</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;




&lt;span class="er"&gt;$&lt;/span&gt; cd vendor/rails&lt;tt&gt;
&lt;/tt&gt;&lt;span class="er"&gt;$&lt;/span&gt; git remote update&lt;tt&gt;
&lt;/tt&gt;&lt;span class="er"&gt;$&lt;/span&gt; git merge origin/master
</code></pre>

<p>or you can also do</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;




&lt;span class="er"&gt;$&lt;/span&gt; cd vendor/rails&lt;tt&gt;
&lt;/tt&gt;&lt;span class="er"&gt;$&lt;/span&gt; git pull
</code></pre>

<p>(yes, each plugin acts a a normal git repo)</p>

<p>A quick note for gitHub users. If you browse your repo you won't see the vendor/rails folder and might freak out. Don't! Git is smart and wants to stay slim, instead of copying the files over, it just creates a reference to the original repo. If you try to pull your project in another folder you will see that the Rails folder gets created as expected.</p>

<p>Personally, when plugins are not available in a git repo I usually do a simple svn export to my project vendor's folder. If I need to modify one of these plugins, I just import it to <a href="http://github.com">github</a> and work on it from there.</p>

<p>You might still want to stick to Piston or Braids and that's fine, but now you won't have an excuse not to switch to Git :)</p>

<p>UPDATE: I just found out that Graeme wrote a <a href="http://woss.name/2008/04/09/using-git-submodules-to-track-vendorrails/">nice detailed post</a> about tracking plugins using git, <a href="http://woss.name/2008/04/09/using-git-submodules-to-track-vendorrails/">check it out</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Merb tip - how to freeze a project?]]></title>
    <link href="https://matt.aimonetti.net/posts/2008/04/15/merb-tip-how-to-freeze-a-project/"/>
    <updated>2008-04-15T07:42:00-07:00</updated>
    <id>https://matt.aimonetti.net/posts/2008/04/15/merb-tip-how-to-freeze-a-project</id>
    <content type="html"><![CDATA[<p><strong>THIS CONTENT is OUTDATED and can't be used with Merb 1.0 or more recent</strong></p>

<p><a href="merbivore">Merb</a> doesn't really have a core team per say. It's actually managed the same way <a href="http://rubini.us">Rubinius</a> is managed meaning that few people such as <a href="http://github.com/ezmobius">Ezra</a>, <a href="http://github.com/wycats">Wycats</a> and <a href="http://github.com/ivey">Ivey</a> lead the development while many other contributors have commit rights to the different repos.</p>

<p>Patches are handled via <a href="http://github.com">GitHub pull Request</a> and <a href="http://merb.lighthouseapp.com/">LightHouse tickets</a>. Read the following <a href="http://merbivore.com/contribute.html">contribution documentation</a> for more info.</p>

<p><img src="http://www.music-lyrics-chord.com/cover/Vanilla_Ice_Cool_as_Ice.jpg" alt="vanilla ice" /></p>

<p>Anyway, I've been working on a <a href="http://github.com/wycats/merb-more">merb-more</a> gem called <a href="http://github.com/wycats/merb-more/tree/master/merb-freezer">merb-freezer</a>.</p>

<p>We don't have a logo for the plugin yet so I picked a "cool" star from the late 80's to represent.</p>

<p><em>Vanilla Ice!</em></p>

<p>Right, so you might wonder what's the connection between a <a href="http://en.wikipedia.org/wiki/Kitsch">kitsch</a> white rapper and a new <a href="merbivore">Merb</a> Gem? Not much, apart that they are both cool (or kinda cool).</p>

<p>Let's forget about "ice ice Baby" and focus on <a href="http://github.com/wycats/merb-more/tree/master/merb-freezer">merb-freezer</a>.</p>

<p><a href="http://github.com/wycats/merb-more/tree/master/merb-freezer">merb-freezer</a> has a simple goal: let you "freeze" your application and run it without dependencies.</p>

<h2>Why would you want to freeze your app?</h2>

<p><em>(This is only valid for Merb 0.9.3 and 0.9.2 edge as of April 14)</em></p>

<ul>
<li><p>You might have multiple applications on the same server/slice/cluster. Different applications might require different versions of Merb or some other Merb gems.</p></li>
<li><p>You might work with a team of developers and want everyone to be using the same version of the gems.</p></li>
<li><p>You are using Merb Edge and want to make sure that your coworkers are developing/testing against the same revision.</p></li>
</ul>


<h2>How to freeze your app?</h2>

<p>First thing, in your init.rb file you need to require merb-freezer</p>

<pre><code>&lt;tt&gt;
&lt;/tt&gt;




require &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;merb-freezer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;
</code></pre>

<p>Now that you required the plugin when you get new rake tasks:</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;




&lt;tt&gt;
&lt;/tt&gt;  rake freeze&lt;span class="sy"&gt;:core&lt;/span&gt;            &lt;span class="c"&gt;# Freeze core from git://github.com/wycats/merb...&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  rake freeze&lt;span class="sy"&gt;:more&lt;/span&gt;            &lt;span class="c"&gt;# Freeze more from git://github.com/wycats/merb...&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  rake freeze&lt;span class="sy"&gt;:plugins&lt;/span&gt;         &lt;span class="c"&gt;# Freeze plugins from git://github.com/wycats/m...&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;
</code></pre>

<p>The rake freeze tasks use by default git submodules to freeze the various components. That means that you need to have your project under git to use that feature. However, if you didn't switch to git yet, do no worry, we have a plan B.</p>

<p>When you run the freeze tasks a framework directory is created at the root of the folder and the gems are checked out there.</p>

<p>Not a git user? We thought of you and added an option for you to use rubygems.</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;




&lt;tt&gt;
&lt;/tt&gt;  rake freeze&lt;span class="sy"&gt;:core&lt;/span&gt; &lt;span class="co"&gt;MODE&lt;/span&gt;=rubygems&lt;tt&gt;
&lt;/tt&gt;
</code></pre>

<p>When doing that, you are freezing the latest version available on the rubygems server or installed locally.
Note that when using the default mode, you are pulling the latest version of Merb from the official git repo. If you want to do that using rubygems you will need to checkout the git repos locally and install the gems yourself before freezing them.</p>

<p>Also it's worth noting that you can also do all of that manually, as long as you follow the same conventions you should be fine.</p>

<h2>How to use the freezing gems?</h2>

<p>If you are a Rails user, you might expect that Merb uses the frozen gems by default, at least that what I expected. Turns out, it's not the case since Merb avoids too much magic and unless you ask for it, Merb will use the available system gems.</p>

<p>So how to start a frozen merb app? Easy enough:</p>

<pre><code>&lt;tt&gt;
&lt;/tt&gt;




frozen-merb
</code></pre>

<p>That's it, you can uninstall merb-core from your system and as long as you froze merb-core, you can start your app.</p>

<h2>How to update a frozen app?</h2>

<p>simply re-freeze but with the UPDATE=true param</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;




&lt;tt&gt;
&lt;/tt&gt;  rake freeze&lt;span class="sy"&gt;:core&lt;/span&gt; &lt;span class="co"&gt;UPDATE&lt;/span&gt;=&lt;span class="pc"&gt;true&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;
</code></pre>

<p>This option works for in both modes (rubygems and git submodules).</p>

<h2>What's next?</h2>

<p>I'd like to add a locking mechanism that would allow you to force your app to only run on specific versions of few gems. The main advantage of this approach is that you wouldn't need to freeze files in your repo as long as you have the required versions on your machine.</p>

<p>I would also like to extend the freezer to let you use the submodules to freeze other gems.</p>

<p>Other suggestions? Found a bug? Want to submit a patch?  Leave me a comment or use <a href="http://merb.lighthouseapp.com/">the Merb LightHouse ticketing system</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails or Merb, what's best for you?]]></title>
    <link href="https://matt.aimonetti.net/posts/2008/04/10/rails-or-merb-what-s-best-for-you/"/>
    <updated>2008-04-10T08:10:00-07:00</updated>
    <id>https://matt.aimonetti.net/posts/2008/04/10/rails-or-merb-what-s-best-for-you</id>
    <content type="html"><![CDATA[<p><img src="http://brainspl.at/louiecon.gif" alt="" /></p>

<p>If you follow my blog, you already know what <a href="http://merbivore.com">Merb</a> is.</p>

<p>I love Rails and I truly believe it has changed web development. At least it has changed the way I do web development.</p>

<p>But Merb looks slick, apparently is way faster than Rails, and has less "fluff" and less magic.</p>

<p>Now that we are getting really close to a Merb 1.0 (scheduled for Rails Conf '08) it's time to evaluate if Merb is the good choice for some of my clients' projects.</p>

<p>However, according to Merb's author, Ezra, at MountainWest RubyConf 2008, <a href="http://mwrc2008.confreaks.com/02zygmuntowicz.html">Rails will get you there faster</a>. In a client's case, they don't need to build a huge app but need a lot of speed and the ability to easily handle a heavy load right away without using caching. Also most of the traffic will go through an API so we won't have to manage too many views.</p>

<h2>Let's see how fast Merb really is.</h2>

<p>To test Merb's speed, I built the very same prototype using Merb 0.9.2 and Rails Edge (pre 2.1). Both apps use ActiveRecord and are connected to a UTF8 MySQL database, both apps have exactly the same views. (Note that Merb would run way faster using DataMapper, but I don't feel that DM 0.9x is production ready yet, also, using a rack handler would certainly be way faster but my goal was really to compare ActionPack vs Merb.)</p>

<p>Both apps use the same ActiveRecord class, their controllers are a bit different but basically do the same thing.</p>

<p>Here is what was tested:</p>

<ul>
<li><p>The Merb/Rails app should receive a GET request with a JSON object in the query.</p></li>
<li><p>The Merb/Rails app should route the request to a controller and pass the JSON object to an AR class.</p></li>
<li><p>The AR class should parse the JSON object (which contains an array of objects), extract each object, and try to find them in the database using one of the attributes. If the object isn't found, it should be created, otherwise it should return the AR object. The amount of hits should be incremented by 1 and the object should be saved back to the database.</p></li>
<li><p>A simple HTML view should be rendered</p></li>
</ul>


<h2>Quick Merb benchmark</h2>

<p><img src="http://merbivore.com/img/header_logo.png" alt="merb" /></p>

<p>I setup Merb to run locally on my MacBook 2.16Ghz Core Duo 2, 2Gb Ram. To test the raw performance, Merb is started in production mode.</p>

<p>I then used httperf to make 10000 connections to the server at a rate of 500 (--rate=500 --send-buffer=4096 --recv-buffer=16384 --num-conns=10000 --num-calls=1)</p>

<p>Here are the results:</p>

<pre><code>&lt;code&gt;Maximum connect burst length: 29
Total: connections 4377 requests 4221 replies 2932 test-duration 41.629 s
Connection rate: 105.1 conn/s (9.5 ms/conn, &lt;=1022 concurrent connections)
Connection time [ms]: min 41.0 avg 1920.4 max 35390.8 median 898.5 stddev 4887.3
Connection time [ms]: connect 2118.1
Connection length [replies/conn]: 1.000

Request rate: 101.4 req/s (9.9 ms/req)
Request size [B]: 321.0

*Reply rate [replies/s]: min 0.0 avg 73.3 max 143.0 stddev 65.8 (8 samples)*
Reply time [ms]: response 809.0 transfer 18.1
Reply size [B]: header 121.0 content 557.0 footer 0.0 (total 678.0)
*Reply status: 1xx=0 2xx=2932 3xx=0 4xx=0 5xx=0*

CPU time [s]: user 0.35 system 36.54 (user 0.8% system 87.8% total 88.6%)
Net I/O: 78.4 KB/s (0.6*10^6 bps)

Errors: total 7068 client-timo 0 socket-timo 0 connrefused 0 connreset 1445
Errors: fd-unavail 5623 addrunavail 0 ftab-full 0 other 0
&lt;/code&gt;
</code></pre>

<p>What we care about is the reply rate/s. We have an average of <em>73.3 requests per second</em> with a standard deviation of 65.8 using 8 samples.</p>

<p>We also make sure that all the replies were successful. (status == 2xx)</p>

<p>I also checked the database, made sure my AR object was created and that the hits were increased. AR object hits: 2932, which matches the amount of replies reported by httperf.</p>

<p>We don't care so much about the rest of the httperf. Let's move on to the Rails benchmark.</p>

<hr />

<h2>Quick Rails benchmark</h2>

<p><img src="http://www.rubyonrails.org/images/rails.png" alt="rails" /></p>

<p>Rails is set the same way, running locally in production mode, same httperf settings.</p>

<p>Here are the results:</p>

<pre><code>&lt;code&gt;Maximum connect burst length: 44

Total: connections 2923 requests 2825 replies 1672 test-duration 37.418 s

Connection rate: 78.1 conn/s (12.8 ms/conn, &lt;=1022 concurrent connections)
Connection time [ms]: min 382.7 avg 5635.4 max 36384.5 median 1887.5 stddev 10103.1
Connection time [ms]: connect 3631.2
Connection length [replies/conn]: 1.000

Request rate: 75.5 req/s (13.2 ms/req)
Request size [B]: 319.0

*Reply rate [replies/s]: min 0.0 avg 43.4 max 75.2 stddev 30.8 (7 samples)*
Reply time [ms]: response 1568.1 transfer 36.7
Reply size [B]: header 471.0 content 581.0 footer 0.0 (total 1052.0)
*Reply status: 1xx=0 2xx=1672 3xx=0 4xx=0 5xx=0*

CPU time [s]: user 0.25 system 31.31 (user 0.7% system 83.7% total 84.4%)
Net I/O: 69.4 KB/s (0.6*10^6 bps)

DB hits: 1672
&lt;/code&gt;
</code></pre>

<p>First thing, the database object was created properly and the hits incremented to 1672 which matches the amount of replies reported by httperf.</p>

<p>Then, we notice that on this test, we only got 7 samples, that's more than enough though. The standard deviation is 30.8 which is better than Merb's 65.8. That means that in our benchmarks, the reply speed difference in Merb's requests was bigger than Rails'. Not a big deal, this is not a scientific test but it's good to acknowledge it.</p>

<p>What we really care about is the average reply rate: 43.4</p>

<p>Let's also note that all the replies had a 2xx status, so everything went well.</p>

<h2>Results</h2>

<p>Based on this really basic benchmark, my Merb app had an average reply rate of <em>73.3 requests per second</em> against Rails' <em>43.4 requests per second</em>.</p>

<p>That means that in this very specific case,</p>

<h2><em>Merb is 69% faster than Rails</em>!  Sexy!</h2>

<p>In other words, my Merb prototype could handle 69% more requests than the Rails prototype in the same amount of time.</p>

<p>I heard people reporting than Merb was 3 to 5 times faster than Rails. Honestly, it really depends on what you do. By using ActiveRecord on both prototypes, I limited the speed difference since AR is not multithread and therefore Merb can't run as fast as it would using Sequel or DataMapper. By actually hitting the database on every single request, I also made sure to really compare ActionPack vs Merb.</p>

<h2>Conclusion</h2>

<p>The conclusion is simple, I recommended that my client go with Merb. Merb 1.0 is almost ready, the public API has been frozen. My client needs speed and simplicity. Using Merb I get exactly what I need and nothing more. Actually, we'll probably increase the performance by writing a rack handler and bypassing the entire framework for API calls (that should be wicked fast!).  Also, as soon as DataMapper becomes production ready, we'll switch to DM and should get way better performance!</p>

<p>Am I suggesting to give up Rails and switch to Merb?
Absolutely not!  First off, Merb is a "lower level" framework. It requires a deeper understanding of Web Development in general and being more than just 'acquainted' with the Ruby language. So, unless you are an advanced developer or have time to learn, I would suggest to keep on using Rails (start using Merb on personal projects, it's a perfect way of learning).
If you have a lot of views and/or use loads of AJAX, RJS, built-in helpers, you probably want to stick to Rails and start looking at how you can do all of that from scratch. By default Rails uses nasty helpers that create inline javascript, and is something you really want to avoid. RJS is fun, but it goes against Merb's philosophy, so you need to make sure you can live without it (note that you can reproduce the same behavior in Merb rendering JS, it just requries more work). If you rely a lot of Rails plugins, you might want to delay your switch, Merb is pretty new and doesn't have a mass-load of plugins yet.</p>

<p>Finally, Merb doesn't have a lot of documentation and changed a lot when 0.9 got released. To understand how Merb works, you will need to go through the source code, specs, Google, and ask on the Merb IRC channel.</p>

<p>It turns out that in our case we have experienced developers, a great need for speed, not too many views and are following Merb's development really closely . I honestly think it's the best choice for my client and I'm excited they accepted to use Merb.</p>

<p>Merb is addressing different issues than Rails and doing it well. I think there is a bright future for Merb. And don't even think that Rails is going away, that won't happen anytime soon!</p>

<p>Recently, <a href="http://www.us.playstation.com/Corporate/About">Sony Playstation</a> even posted a <a href="https://www2.recruitingcenter.net/Clients/playstation/PublicJobs/controller.cfm?jbaction=JobProfile&amp;Job_Id=11424&amp;esid=az">job post</a> looking for a Rails/Merb developer. This is very promising for the Merb community!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Merb tips II]]></title>
    <link href="https://matt.aimonetti.net/posts/2008/04/08/merb-tips-2/"/>
    <updated>2008-04-08T02:11:00-07:00</updated>
    <id>https://matt.aimonetti.net/posts/2008/04/08/merb-tips-2</id>
    <content type="html"><![CDATA[<p><em>* this content is now outdated and only applied to Merb 0.9</em>*</p>

<p>I the <a href="http://railsontherun.com/2008/4/5/merb-tips-1">previous post</a> I covered few useful tips for Merb 0.9. The good news is that Merb should get its wiki setup over the week end!</p>

<p>Here is another batch of hopefully useful tips:</p>

<ul>
<li><p>In init.rb, you can define a dependency and specify a version number: <em>dependency "merb_fu", ">= 1.0"</em></p></li>
<li><p>If you want to run your application from a subdirectory, once again, in your init.rb file, add: <em>c[:path_prefix] = "/your_prefix"</em> <em>(note, that you can also do that in a specific environment file.)</em></p></li>
<li><p>You feel like limiting a route to a specific request such as a DELETE? In your router.rb file add the following:</p>

<p>1<tt>
</tt>2<tt>
</tt></p>

<p><tt>
</tt>  r.match(<span class="s"><span class="dl">"</span><span class="k">/:bucket_id</span><span class="dl">"</span></span>, <span class="sy">:method</span> => <span class="sy">:delete</span>).to(<span class="sy">:controller</span> => <span class="s"><span class="dl">"</span><span class="k">buckets</span><span class="dl">"</span></span>, <span class="sy">:action</span> => <span class="s"><span class="dl">"</span><span class="k">destroy</span><span class="dl">"</span></span>)<tt>
</tt></p></li>
<li><p>Since we are talking about routes, what about an iPhone only route?</p>

<p>1<tt>
</tt>2<tt>
</tt></p>

<p><tt>
</tt>  r.match(<span class="rx"><span class="dl">%r[</span><span class="k"><sup>/(.+)</span>&lt;span</sup> class="dl">]</span></span>, <span class="sy">:user_agent</span> => <span class="rx"><span class="dl">/</span><span class="k">iPhone</span><span class="dl">/</span></span>).to(<span class="sy">:controller</span> => <span class="s"><span class="dl">"</span><span class="k">mobile</span><span class="dl">"</span></span>, <span class="sy">:title</span> => <span class="s"><span class="dl">"</span><span class="k">Welcome Apple FanBoy</span><span class="dl">"</span></span>, <span class="sy">:action</span> => <span class="s"><span class="dl">"</span><span class="k">show</span><span class="dl">"</span></span>)<tt>
</tt></p></li>
<li><p>what about an admin section for my blogposts?</p>

<p>1<tt>
</tt>2<tt>
</tt>3<tt>
</tt>4<tt>
</tt></p>

<p><tt>
</tt>  r.match(<span class="s"><span class="dl">'</span><span class="k">/admin</span><span class="dl">'</span></span>) <span class="r">do</span> |admin|<tt>
</tt>    admin.resources <span class="sy">:blogposts</span><tt>
</tt>  <span class="r">end</span><tt>
</tt></p></li>
<li><p>To finish with the routes, look at the <a href="http://github.com/wycats/merb-core/tree/master/spec/public/router/special_spec.rb#L39-46">following merb-core spec</a></p>

<p>1<tt>
</tt>2<tt>
</tt>3<tt>
</tt>4<tt>
</tt><strong>5</strong><tt>
</tt>6<tt>
</tt>7<tt>
</tt>8<tt>
</tt>9<tt>
</tt></p>

<p><tt>
</tt>  it <span class="s"><span class="dl">"</span><span class="k">should allow you to restrict routes based on protocol</span><span class="dl">"</span></span> <span class="r">do</span><tt>
</tt>    <span class="co">Merb</span>::<span class="co">Router</span>.prepare <span class="r">do</span> |r|<tt>
</tt>      r.match(<span class="sy">:protocol</span> => <span class="s"><span class="dl">"</span><span class="k">http://</span><span class="dl">"</span></span>).to(<span class="sy">:controller</span> => <span class="s"><span class="dl">"</span><span class="k">foo</span><span class="dl">"</span></span>, <span class="sy">:action</span> => <span class="s"><span class="dl">"</span><span class="k">bar</span><span class="dl">"</span></span>)<tt>
</tt>      r.default_routes<tt>
</tt>    <span class="r">end</span><tt>
</tt>    route_to(<span class="s"><span class="dl">"</span><span class="k">/foo/bar</span><span class="dl">"</span></span>).should have_route(<span class="sy">:controller</span> => <span class="s"><span class="dl">"</span><span class="k">foo</span><span class="dl">"</span></span>, <span class="sy">:action</span> => <span class="s"><span class="dl">"</span><span class="k">bar</span><span class="dl">"</span></span>)<tt>
</tt>    route_to(<span class="s"><span class="dl">"</span><span class="k">/boo/hoo</span><span class="dl">"</span></span>, <span class="sy">:protocol</span> => <span class="s"><span class="dl">"</span><span class="k">https://</span><span class="dl">"</span></span>).should have_route(<span class="sy">:controller</span> => <span class="s"><span class="dl">"</span><span class="k">boo</span><span class="dl">"</span></span>, <span class="sy">:action</span> => <span class="s"><span class="dl">"</span><span class="k">hoo</span><span class="dl">"</span></span>)<tt>
</tt>  <span class="r">end</span><tt>
</tt></p></li>
</ul>


<p>You can set custom routes to only work when connected via SSL, that's just really nice!</p>

<ul>
<li><p>Other quick tip. <a href="http://railsontherun.com/2008/4/5/merb-tips-1">Last time</a> we saw how to install locally all the required gems. Well, you can also freeze merb by doing:</p>

<p>1<tt>
</tt>2<tt>
</tt></p>

<p><tt>
</tt>  merb-gen frozen-merb<tt>
</tt></p></li>
<li><p>Another common IRC question, how do I use Merb's logger. It's really easy:</p>

<p>1<tt>
</tt>2<tt>
</tt></p>

<p><tt>
</tt>  <span class="co">Merb</span>.logger.info(<span class="s"><span class="dl">'</span><span class="k">our stuff</span><span class="dl">'</span></span>)<tt>
</tt></p></li>
</ul>


<p>Where info is the debugging level you want to send your message to.</p>

<ul>
<li>Finally, today in IRC a Rails user asked how reset a session in Merb. Rails has a <em>reset_session</em> method that resets the session by clearing out all the objects stored within and initializing a new session object. Merb simply uses a hash to store sessions, so <em>session.clear</em> will do it ;)</li>
</ul>


<p>Feel free to add a comment with your Merb tips or leave a question regarding something you can't seem to be able to do with Merb.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Merb tips I]]></title>
    <link href="https://matt.aimonetti.net/posts/2008/04/05/merb-tips-1/"/>
    <updated>2008-04-05T05:59:00-07:00</updated>
    <id>https://matt.aimonetti.net/posts/2008/04/05/merb-tips-1</id>
    <content type="html"><![CDATA[<p><em>* this content is now outdated and only applied to Merb 0.9</em>*</p>

<p>I'm working on a post reporting a recent benchmark I did comparing Rails vs Merb performances for a client's app.</p>

<p>In the meantime, here are few tricks you might need when using Merb 0.9x</p>

<ol>
<li><p>In the init.rb file, uncomment and rename <em>c[:session_id_key]</em>  (in the Merb::Config.use block)</p></li>
<li><p>In the same block, add <em>c[:log_level] = :debug</em>  to set a log level</p></li>
<li><p>By default, Merb logs to STDOUT, to log to a file, in the config block add <em>c[:log_file] = Merb.log_path + '/development.log'</em>  (note that you need to create the file yourself, Merb won't do that)</p></li>
<li><p>to save your gems locally, do: <em>sudo gem install gem_name -i gems</em></p></li>
<li><p>need basic HTTP auth? <a href="http://github.com/wycats/merb-core/tree/e690bb81bb550e58dad519712de050141b8552d8/lib/merb-core/controller/mixins/authentication.rb#L15-46">it's now available in core</a></p></li>
<li><p>don't forget to require any plugins, extra gems you need (such as <em>merb_helpers</em> or <em>merb-assets</em>)</p></li>
<li><p>don't forget to select your ORM before using the generator( so your generated goodies will be adapted to your ORM)</p></li>
<li><p>routes are easy to use. In the console (merb -i) type <em>merb.show_routes</em> to see all your named routes</p></li>
<li><p>if you want to use link_to, install <a href="http://github.com/wycats/merb-plugins/tree/master/merb_assets">merb_assets</a></p></li>
<li><p>nested routes example:</p></li>
</ol>


<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;




&lt;tt&gt;
&lt;/tt&gt;  r.resources &lt;span class="sy"&gt;:channels&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt; |channels|&lt;tt&gt;
&lt;/tt&gt;    channels.resources &lt;span class="sy"&gt;:shows&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt; |shows|&lt;tt&gt;
&lt;/tt&gt;     shows.resources &lt;span class="sy"&gt;:episodes&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;   &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;
</code></pre>

<p>usage:</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;




&lt;tt&gt;
&lt;/tt&gt;  url(&lt;span class="sy"&gt;:channel_shows&lt;/span&gt;, &lt;span class="sy"&gt;:channel_id&lt;/span&gt; =&gt; channel)&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  link_to h(channel.description), url(&lt;span class="sy"&gt;:channel&lt;/span&gt;, &lt;span class="sy"&gt;:id&lt;/span&gt; =&gt; channel)&lt;tt&gt;
&lt;/tt&gt;
</code></pre>

<p>That's it for today :)</p>

<p>In the meantime, check this <a href="http://mwrc2008.confreaks.com/02zygmuntowicz.html">Merb presentation by Ezra</a> and <a href="http://mwrc2008.confreaks.com/04katz.html">this DataMapper presentation by Wycats</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Duplo (and I) offended people]]></title>
    <link href="https://matt.aimonetti.net/posts/2008/03/21/how-duplo-and-i-offended-people/"/>
    <updated>2008-03-21T06:59:00-07:00</updated>
    <id>https://matt.aimonetti.net/posts/2008/03/21/how-duplo-and-i-offended-people</id>
    <content type="html"><![CDATA[<p>My <a href="http://railsontherun.com/2008/3/17/rails-the-duplo-generation">recent and certainly provocative post</a> generated a lot of noise. Just by reading some of the <a href="http://railsontherun.com/2008/3/17/rails-the-duplo-generation#comments">comments</a> on my blog or on <a href="http://reddit.com/r/ruby/info/6cbwo/comments/">reddit</a> I could only notice that some people took offense and some people tried to push the metaphor way too far. At the same time, it generated a lot of interesting discussions even <a href="http://msforums.ph/forums/p/47347/226547.aspx">outside</a> of our <em>small</em> Ruby community.</p>

<h2>A few clarifications:</h2>

<ul>
<li><p>Rails is an awesome framework, and to be honest I really like the fact that it's accessible to newbies while offering great tools</p></li>
<li><p>Rails Plugins that I like calling Duplo blocks are great and I use a bunch in most of my projects</p></li>
<li><p>I, myself wrote a bunch of <a href="http://github.com/matta/">plugins and gems</a> never as great as the one mentioned in <a href="http://railsontherun.com/2008/3/17/rails-the-duplo-generation">my post</a> though</p></li>
<li><p>No, I don't think you are dumb if you don't have a clue how Rails or Rails plugins work</p></li>
</ul>


<p>I also agree that the <img src="http://cache.lego.com/upload/contentTemplating/LifestyleProductsBags/otherfiles/1033/uploadF2767709-6EFA-4D99-93FA-13F75766309B.jpg" alt="Duplo" /> metaphor is very limited and doesn't stretch... but who cares.. it's funny.</p>

<h2><em>What did I mean to say</em></h2>

<ul>
<li><p>Rails plugins are useful, use them and <em>ABUSE</em> them. Even though most of them are very well written I strongly believe you would become a better developer if you understand how they work.</p></li>
<li><p>A <em>Duplo</em> doesn't do exactly what you want it to do, don't <em>bitch</em> about it. Try submitting a patch or if you can write your own plugin.</p></li>
<li><p>If you are using a plugin on a regular basis, give it some love. Submit some documentation, write a blog post, send a thank you email.</p></li>
<li><p>A great framework and a bunch of nice plugins are awesome tools for developers but they won't replace your brain.</p></li>
</ul>


<p>So, there you go, this time around I tried to be more straight forward and I even apologize if I offended you.</p>

<p>Finally, I don't believe the Rails community is a bunch of <em>obnoxious-arrogant-wannabe-rockstars</em>, and certainly not a ghetto. We all started as newbies and I hope a lot of newbies will join the fun and learn through Rails and later provide the community with a lot of awesome Duplos!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails: the Duplo generation]]></title>
    <link href="https://matt.aimonetti.net/posts/2008/03/17/rails-the-duplo-generation/"/>
    <updated>2008-03-17T06:39:00-07:00</updated>
    <id>https://matt.aimonetti.net/posts/2008/03/17/rails-the-duplo-generation</id>
    <content type="html"><![CDATA[<p><img src="http://cache.lego.com/upload/contentTemplating/LifestyleProductsBags/otherfiles/1033/uploadF2767709-6EFA-4D99-93FA-13F75766309B.jpg" alt="duplo" />
I'm sure, at least once in your life you played with Duplos.</p>

<p><em>Duplo bricks are eight times the size in volume, twice the length, height and width of traditional Lego bricks, and are <strong>easier to handle for younger children</strong>. Despite their size, they are <strong>still compatible</strong> with traditional Lego brick.</em></p>

<p>Duplos are great to introduce kids to the concept of Lego bricks and to get them to think about building their own creations. However you would freak out if your kid would grow up and not want to start playing with Legos and building more advanced/custom stuff.</p>

<p>Unfortunately, that's exactly what's going on in the Rails community right now. We created a generation of Duplo developers.</p>

<p><strong>Rick Olson</strong>, AKA <a href="http://techno-weenie.net/">Technoweenie</a> fathered a great majority of this Duplo generation. Rick is a Rails core member and a prolific Rails plugin developer. He has written very popular plugins and Rails apps such as:</p>

<ul>
<li><p><a href="http://github.com/technoweenie/restful-authentication/tree">restful-authentication</a></p></li>
<li><p><a href="http://github.com/technoweenie/attachment_fu/tree">attachment_fu</a></p></li>
<li><p><a href="http://github.com/technoweenie/acts_as_versioned/tree">acts_as_versioned</a></p></li>
<li><p><a href="http://github.com/technoweenie/permalink_fu/tree">permalink_fu</a></p></li>
<li><p><a href="http://mephistoblog.com/">mephisto blog engine</a></p></li>
<li><p><a href="http://beast.caboo.se/">Beast forum</a></p></li>
</ul>


<p>If Rick is the father, the mother of this generation would obviously be <a href="http://www.loudthinking.com/">David Heinemeier Hansson</a>, creator of the Ruby on Rails framework. David has always wanted to make our lives easier, providing us with tools to avoid repeating ourselves and a mass-load of tools to create web apps in no time.</p>

<p>Rick, David and others worked hard to provide the community with tools that cut our development times by 20% to 30% and that's just awesome. They basically took their <a href="http://www.meccano.com/">meccano</a> applications and extracted Duplo blocks you can play with.</p>

<p>from <img src="http://upload.wikimedia.org/wikipedia/en/thumb/b/b5/Meccano_model_Steam_shovel_excavator.jpg/250px-Meccano_model_Steam_shovel_excavator.jpg" alt="meccano" /> to <img src="http://upload.wikimedia.org/wikipedia/en/thumb/e/eb/Duplo_bricks.jpg/250px-Duplo_bricks.jpg" alt="Duplo" /></p>

<p><strong>The problem is that a generation of Rubyists has grown up being used to getting everything pre written for them. They haven't yet passed the "Duplo stage" and basically write applications putting a few blocks together, only writing 10 to 20% and barely understand 5%.</strong></p>

<p>On top of that, what really annoys me is that, these very same developers complain about the existing plugins, always ask for more and don't give anything back to the community.</p>

<p>The problem is that it's always the same people giving and helping. Relatively quickly, the community grows and people supporting it get tired. I won't go as far as <a href="http://www.zedshaw.com/rants/rails_is_a_ghetto.html">Zed and his funny rant</a> but we need to wake up. We need to evolve, learn how Rails magic works, give up the <a href="http://www.therailsway.com/2007/8/1/dangers-of-cargo-culting">cargo culting</a> and start giving back.</p>

<p>The first thing would be to stop complaining about plugins you use on a daily basis and write your own or fork existing ones. <a href="http://github.com">GitHub</a> is a good place to start forking existing projects, if you are a Rails/Ruby beginner, you can help with documentation or submit small patches. <a href="http://hasmanythrough.com">Josh Susser</a> wrote a <a href="http://hasmanythrough.com/layingtracks/LayingTracks.pdf">nice tutorial</a> on how to commit changes (patches/documentation).</p>

<p>Why not blog about issues you have just faced and how you resolved them. Start writing small plugins/gems. Try helping people on the various mailing lists.</p>

<p>And finally, drop the Duplos and start playing with Legos - don't use plugins just because they are available to you, make sure you fully understand what the plugins you use do! Learn more about Rails guts and start using it in a way that makes sense to you.</p>

<p>Why not even switch to meccano and take a look at <a href="http://merbivore.com">Merb</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[starting the migration to GitHub]]></title>
    <link href="https://matt.aimonetti.net/posts/2008/03/05/starting-the-migration-to-github/"/>
    <updated>2008-03-05T07:48:00-08:00</updated>
    <id>https://matt.aimonetti.net/posts/2008/03/05/starting-the-migration-to-github</id>
    <content type="html"><![CDATA[<p>I started moving some of my projects to <a href="http://github.com">GitHub</a>.</p>

<p><a href="http://github.com/matta">Here</a> is my <a href="http://github.com">GitHub</a> account.</p>

<p>Projects moved to <a href="http://github.com">GitHub</a>:</p>

<ul>
<li><p><a href="http://github.com/matta/globalite/tree">GlobaLite</a></p></li>
<li><p><a href="http://github.com/matta/ar-backup/tree">ActiveRecord Backup</a></p></li>
<li><p><a href="http://github.com/matta/mimetype-fu/tree">mimetype-fu</a></p></li>
</ul>


<p>I'm planning on moving <a href="http://rubyforge.org/projects/googlecharts/">GoogleCharts</a>, <a href="http://rubyforge.org/projects/random-word-gen/">RandomWordGenerator</a> and some not released stuff to GitHub so people can have fun forking my projects.</p>

<p><a href="http://git.or.cz/">Git</a> and <a href="http://github.com">GitHub</a> are the new cool things. GitHub is planning on setting up a gem server while they are already offering tarball download and a post-receive hook. (they also plan on becoming myspace for geeks, but that's another story)</p>

<p>Do you have to switch to git and github? Honestly, ...no you don't..
Git can act as SVN, but let's be honest, if you switch to a new SCM it needs to do more. I've been using Git for a couple of months and even though I still don't have a full understanding of this SCM, I really enjoy using it.</p>

<p>So, get over it, learn on your own or purchase <a href="https://peepcode.com/products/git">this excellent peepcode</a></p>

<p>Email me to get a GitHub invite (Tom and Chris gave me some invites for readers) or/and try <a href="http://gitorious.org/">Gitorious</a>.</p>

<p>The fact that some major players (<a href="http://topfunky.com/">Topfunky</a>, <a href="http://weblog.techno-weenie.net/2008/3/4/my-gushing-github-love-letter">technoweenie</a>, <a href="http://errtheblog.com/">Chris &amp; PJ</a>, <a href="http://railstips.org/2008/2/16/git-and-github/">jnunemaker</a> and major projects such as <a href="http://weblog.rubyonrails.com/2008/2/28/capistrano-2-2-0">capistrano</a>, <a href="http://rubyhitsquad.com/Vlad_the_Deployer.html">vlad the deployer</a> and <a href="http://merbivore.com">Merb</a> use and support Git is a sign that it's the next big thing.</p>

<p>Also, I believe that a lot of developers will also be motivated to move their plugins/gems to GitHub because they simply can't always maintain their own libs and/or just hope people will fork their project and contribute back.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to use github and submit a patch]]></title>
    <link href="https://matt.aimonetti.net/posts/2008/03/03/how-to-use-github-and-submit-a-patch/"/>
    <updated>2008-03-03T08:22:00-08:00</updated>
    <id>https://matt.aimonetti.net/posts/2008/03/03/how-to-use-github-and-submit-a-patch</id>
    <content type="html"><![CDATA[<p>If you don't know about <a href="http://git.or.cz/">git</a> and <a href="http://github.com">github</a> yet, it's time you clean up your RSS feeds and find some good source of information.</p>

<p><a href="http://github.com">Github</a> is used by the <a href="http://merbivore.com">Merb core team</a> and I'll show you how to use github to fork Merb, make your modifications and "submit your patch".</p>

<p>This is the exact reason why github is simply awesome, it makes forking projects just super simple and submitting changes even easier.</p>

<p>First thing, you need to have a github account, if you don't have one yet, email me, I have a couple of invitations left, otherwise, just wait until github gets public.</p>

<p>Now, let's go to <a href="http://github.com/wycats/merb-core/tree/master">Merb's repository</a> and fork Merb-core by clicking on the fork button.</p>

<p><img src="http://img.skitch.com/20080303-q2aceaadcqk59kqck4b199bdmh.jpg" alt="fork merb" /></p>

<p>Actually, for this example, I'll fork <a href="http://github.com/wycats/merb-plugins/tree/master">merb-plugins</a> because I want to improve the ActiveRecord rake tasks.</p>

<p>Because I forked merb-plugins, I now have my own forked repo: !<img src="http://img.skitch.com/20080303-g8jas46gq1enn9fhu1t7rsyunj.jpg" alt="my forked repo" /></p>

<p>I'll start by checking out/cloning my forked repo locally.</p>

<pre><code>&lt;tt&gt;
&lt;/tt&gt;




git clone git&lt;span class="iv"&gt;@github&lt;/span&gt;.com&lt;span class="sy"&gt;:mattetti&lt;/span&gt;/merb-plugins.git
</code></pre>

<p>!<img src="http://img.skitch.com/20080303-rf87t44c3c6m6hqy5b38ksycua.jpg" alt="git clone" /></p>

<p>Great I can now make my own changes.... but wait, what if the merb core team makes a change to the code? Well, I need to track their changes. Here is how:</p>

<pre><code>&lt;tt&gt;
&lt;/tt&gt;




git remote add coreteam git&lt;span class="sy"&gt;:/&lt;/span&gt;/github.com/wycats/merb-plugins.git
</code></pre>

<p>FYI, it adds the following to edit .git/config:</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;




&lt;tt&gt;
&lt;/tt&gt;  [remote &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;coreteam&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;]&lt;tt&gt;
&lt;/tt&gt;  url = git&lt;span class="sy"&gt;:/&lt;/span&gt;/github.com/wycats/merb-plugins.git&lt;tt&gt;
&lt;/tt&gt;  fetch = +refs/heads/*&lt;span class="sy"&gt;:refs&lt;/span&gt;/remotes/coreteam/*&lt;tt&gt;
&lt;/tt&gt;
</code></pre>

<p>then</p>

<pre><code>&lt;tt&gt;
&lt;/tt&gt;




git fetch coreteam
</code></pre>

<p>and finally</p>

<pre><code>&lt;tt&gt;
&lt;/tt&gt;




git checkout -b coreteam coreteam/master
</code></pre>

<p>You can now track the latest change and merge them with your branch. Note that you can also track other forks and merge some other changes. (just that feature is worth using git)</p>

<p>Alright, now you can do your stuff, and push your local change to your remote repo at github.</p>

<p>Once you are done, you can simply click on the "pull request button"</p>

<p><img src="http://img.skitch.com/20080303-xxh5d3a2uu65ksf8u4i9tga59e.jpg" alt="pull request button" /></p>

<p>fill up the form and select the recipient. (wycats in this example if you want him to merge your changes into the official version of Merb).</p>

<p><img src="http://img.skitch.com/20080303-dei7bxpt577gqe3d1x4ncpmq6w.jpg" alt="pull request" /></p>

<p>p.s: The github guys are working on a gem to make our loves easier, give <a href="http://github.com/defunkt/github-gem/tree/master">http://github.com/defunkt/github-gem/tree/master</a> a try. I'll post about the gem when it will be a bit more stable.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[resolving git-svn conflicts]]></title>
    <link href="https://matt.aimonetti.net/posts/2008/02/29/resolving-git-svn-conflicts/"/>
    <updated>2008-02-29T22:40:00-08:00</updated>
    <id>https://matt.aimonetti.net/posts/2008/02/29/resolving-git-svn-conflicts</id>
    <content type="html"><![CDATA[<p>I've been using <a href="http://git.or.cz/">git</a> and <a href="http://www.kernel.org/pub/software/scm/git/docs/git-svn.html">git-svn</a> for a little while and never had a problem... until today.</p>

<p>On one of my <a href="http://gumgum.com">project</a>, we have a SVN repo but since I prefer using Git, I'm using git-svn.</p>

<p>Git-svn has been great, it let me create my own local branches for each new set of features (that's when I don't forget to create a branch) and to commit all the changes back to svn.</p>

<p>The problem today happened after I did a simple git-svn rebase. I had some sort of error and my local repo looked like it got reverted to the head of the svn repo....</p>

<pre><code>&lt;code&gt;error: patch failed: trunk/app/models/view.rb:1
error: trunk/app/models/view.rb: patch does not apply
[blah blah]
sing index info to reconstruct a base tree...
Falling back to patching base and 3-way merge...
&lt;/code&gt;
</code></pre>

<p>I hadn't committed to SVN for 24 hours and had a lot of work that was just checked in locally... You can imagine the panic.  <a href="http://notch8.com">Rob</a> started digging in the .git repo to finally find the hash representing the latest delta before the rebase. With the help of the #caboose guys, I did a simple</p>

<pre><code>&lt;code&gt;git reset --hard hash-name
&lt;/code&gt;
</code></pre>

<p>Which restore my repo to the pre SVN commit state. Awesome... however I still had issues to commit my stuff. After a little while I as able to commit again, worked a bit more and tried to commit again.... same error :(</p>

<p>But this time I noticed I could simply do</p>

<pre><code>&lt;code&gt;git rebase --abort
&lt;/code&gt;
</code></pre>

<p>to restore the original branch.an</p>

<p>But I still couldn't commit properly... until I discovered that I just needed to fix the conflicts manually using</p>

<pre><code>&lt;code&gt;git-mergetool
&lt;/code&gt;
</code></pre>

<p>git-mergetool uses whichever merge tool available: kdiff3 tkdiff xxdiff meld gvimdiff opendiff emerge vimdiff filemerge</p>

<p>I fixed my conflicts in no time, then did a</p>

<pre><code>&lt;code&gt;git rebase --continue
&lt;/code&gt;
</code></pre>

<p>and finally</p>

<pre><code>&lt;code&gt;git-svn dcommit
&lt;/code&gt;
</code></pre>

<p>Looking back, I wish I knew how to properly deal with conflicts when using git-svn, I wasted a bit of my precious time ;)  hopefully this post will help you.</p>

<p>p.s:  <a href="http://brian.maybeyoureinsane.net/blog/2008/01/31/git-sake-tasks/">here</a> is an interesting use of Sake to handle git-svn</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GumGum launch, or how to avoid a disastrous launch.]]></title>
    <link href="https://matt.aimonetti.net/posts/2008/02/28/gumgum-launch-or-how-to-avoid-a-disastrous-launch/"/>
    <updated>2008-02-28T08:42:00-08:00</updated>
    <id>https://matt.aimonetti.net/posts/2008/02/28/gumgum-launch-or-how-to-avoid-a-disastrous-launch</id>
    <content type="html"><![CDATA[<p>For the last few months I worked on a Rails app called <a href="http://gumgum.com">GumGum</a>. <a href="http://gumgum.com">GumGum</a> is a licensing and distribution platform for online content. <a href="http://gumgum.com">GumGum</a> believes paying a flat rate to license content for online use is illogical. Offline, the flat rate model works because distribution is finite. Online, thanks to Google and other search engines, a story lives forever. <a href="http://gumgum.com">GumGum</a> has developed two usage models to fairly monetize a license: pay-per-use and ad supported. Pay-per-use allows publishers to license content on a CPM basis. Ad supported subsidizes the licensing revenue through advertisements, providing the publisher a free license.</p>

<p>Simple concept and great team. When Ari Mir and Ophir Tanz approached me to work on their app I was impressed by their understanding of Web Business. It was not their first start up and as a consultant, you usually prefer to work with some experienced clients. Ari, GumGum's CPO was great at defining realistic expectations, and limit the scope of the application which was great since I'm an Agile/XP fanboy. I believe that really helped us meeting our dead line without feature creeping the app.</p>

<p>We were finally ready to enter a public beta phase, we were running our production server on a godaddy VPS (no comment) and were on the process of migrating to <a href="http://www.slicehost.com/">slicehost</a> where we were running our staging environment. The plan was to go public on Tuesday 12 and have a feel for the load. We also setup an <a href="http://www.amazon.com/gp/browse.html?node=201590011">EC2</a> image to handle some of the background tasks and were thinking of moving to <a href="http://engineyard.com">Engine Yard</a> within few months.</p>

<p>Everything was ready for a launch, when the day before D Day, Ari calls me telling me: "Good news Matt, <a href="http://www.techcrunch.com/">TechCrunch</a> is going to publish a blog post about us!". While he sounded really excited, I couldn't believe me ears.</p>

<ol>
<li><p>The app wasn't optimized, darn it all, I hadn't even properly indexed the database, no caching, nothing. (it was in the backlog, things I was planning on doing after the public beta launch)</p></li>
<li><p>We would never be able to handle the load. Running an app like ours definitely needs more than a 256Mb shared CPU shared host.</p></li>
<li><p>Ari asked me if they could embed one of our license object in <a href="http://www.techcrunch.com/">TechCrunch</a> home page.</p></li>
<li><p>I had 12 hours to get stuff ready.</p></li>
</ol>


<h1>Trying to be ready:</h1>

<p><a href="http://www.techcrunch.com/">TechCrunch</a> has 688k <a href="http://feeds.feedburner.com/Techcrunch">RSS subscribers</a>! Even though I asked Ari not to embed one of our protected object inside TC's home page, I knew he couldn't say no to <a href="http://www.techcrunch.com/about-michael-arrington/">Mike Arrington</a>. (little did I know, they would end up embedding 2 licenses)</p>

<p>I hurried up and started properly indexing the database, ask advice to some of my <a href="http://blog.caboo.se/">cabooser</a> friends, did some quick re-factoring but obviously didn't have enough time to rewrite the way we handle tags and tooltips (the overlay popup window that displays when you rollover a picture in our browse page). <a href="http://notch8.com">Rob</a> helped me getting ready and we transformed our staging environment into a secondary production server hoping we would split the load.</p>

<p>Since we didn't have a load balancer, we tried to cheat by setting up two A records for gumgum.com. The idea was that browsers would pick an ip randomly and since we were only using 1 database, everything should be fine. That was the theory, during our tests we realized that our Flash object was not using the same IP than the webpage and that was creating random issues with our licensing system.</p>

<p>We were running out of time, I turned on page caching on few actions (home page) so even though my mongrels would die, I knew we would at least be able to display something. Because of our complex authentication system, I couldn't cache much and I didn't have time to re-factor a lot of my code or to setup <a href="http://www.danga.com/memcached/">memcached</a>. (on top of that I knew the product was stable and I didn't want to mess up with it).</p>

<h1>The Storm:</h1>

<p><a href="http://www.techcrunch.com/2008/02/13/gumgum-launches-new-image-licensing-platform/">The article got published</a> and in seconds we saw the load on the main box going from 0.2 to 2.0! We were still dealing with the DNS issues and some pictures were not getting loaded. When Rails got above 60 req/s we started dropping some requests and returning 500s. That was bad, really bad. Our browse page (not optimized) was down and we handled around 80k requests in a matter of few hours. What you don't know is that each of our flash object generates a couple of requests, and that <a href="http://techcrunch.com">TechCrunch</a> decided to embed 2 objects on their home page.</p>

<p>Remember, it was our launch, which was not meant to be a big launch, we were not prepared for that!</p>

<h1>Dealing with the load:</h1>

<p>The good thing is that my code didn't leak memory, Rails was stable and it was a good sign. We all know that "Rails CAN scale", but we also know that you need to have a proper hosting to do that. Godaddy was not handling the load and it was just the beginning. So what do you do when you have to scale and that your code isn't total junk? You call a real hosting company like <a href="http://engineyard.com">EngineYard</a> or <a href="http://joyent.com">Joyent</a>. I was lucky <a href="http://www.workingwithrails.com/person/5421-ezra-zygmuntowicz">Ezra</a> was online. I quickly explained to him the situation, we discussed the reason why our site was not doing so great and defined the bottlenecks. It was simple, we needed more humph. The normal waiting time to get a slice on EY was around 2 weeks back then. Ezra knew that we couldn't wait 2 weeks :p He was simply awesome, managed to find us 2 slices, set them up for us and setup our app in less than 2 hours. He even helped us configuring our old server to get NginX to bounce the requests to EY while the DNS was propagating.</p>

<p>As soon as the switch was done, everything loaded perfectly, not a single request dropped, it was simply great.</p>

<p>Since we are talking about scaling, hosting and facing issues, I'd like to make a simple point: $349.00 a month for a slice is NOT expensive for what you get. First off, EY slices are setup superbly, you get awesome performances out of them, they come ready for your app and you don't have to do much. Secondly, I'm not a sys admin, I really hate dealing with servers, packages, configuration, compiling crap that won't compile because I'm lame... etc...</p>

<p>EY has a bunch of experts (both Ruby and Sys admin experts) available 24/7 that always go the extra mile to help you. Last time I checked I couldn't hire a good sys admin for, let's say the price of 3 or 4 slices. Now, we get a team of guys, available, knowing their stuff and helping me for way cheaper than hiring a sys admin dude. The other thing is, I'm a consultant, I don't want to deal with servers and charge my clients for that. I also want them to be reassured and know that "yes, we can scale". The price of an EY/Joyent slice is the price you pay to be confident you can take the load.</p>

<h1>So what now?</h1>

<p>We have a lot of optimization to do, we are working on moving more of our stuff to EC2 to avoid being charged for bandwidth twice (user => EY => S3), we are setting up a queuing system and we have a lot of nice features to deploy. But one thing for sure, I can focus on my code since I know EY has my back and I don't have to worry about our servers.</p>

<p>p.s: <a href="http://gumgum.com">GumGum</a> is doing great, a lot of people are really interested in the product, new features are coming up (we already auto import content from some major Paparazzi agencies) and we are getting a <a href="http://blog.gumgum.com/2008/02/gumgums-press.html">good press coverage</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Misc tips and tricks]]></title>
    <link href="https://matt.aimonetti.net/posts/2008/01/30/misc-tips-and-tricks/"/>
    <updated>2008-01-30T08:00:00-08:00</updated>
    <id>https://matt.aimonetti.net/posts/2008/01/30/misc-tips-and-tricks</id>
    <content type="html"><![CDATA[<p>I haven't posted for quite a long time. The thing is I moved to a new place and I'm really busy on working clients + setting up my new office + dealing with way too much paperwork.</p>

<p>Anyway, enough excuses, here are few tips that I believe will be useful to some of you:</p>

<h2><a href="http://www.zenspider.com/ZSS/Products/ZenTest/">ZenTest Autotest</a></h2>

<p>I love autotest, but you might have noticed that sometimes (especially on big projects), ZenTest might start using more CPU than expected. On my machine, that results in the fan going off and annoying the crap out of me.</p>

<p>The solution is quite simple, exclude all folders you don't need to monitor. To do that, update ZenTest to version 3.8.X</p>

<pre><code>&lt;code&gt;sudo gem update ZenTest
&lt;/code&gt;
</code></pre>

<p>(older version had a different syntax)</p>

<p>Now, edit your .autotest that should be located in ~/.autotest  (if it doesn't exist, create it).</p>

<p>Finally add the following code:</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;




&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="co"&gt;Autotest&lt;/span&gt;.add_hook &lt;span class="sy"&gt;:initialize&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt; |at|&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="s"&gt;&lt;span class="dl"&gt;%w{&lt;/span&gt;&lt;span class="k"&gt;.svn .hg .git vendor&lt;/span&gt;&lt;span class="dl"&gt;}&lt;/span&gt;&lt;/span&gt;.each {|exception| at.add_exception(exception)}&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;
</code></pre>

<p>I personally freeze rails in vendor and I autotest is way happier when it doesn't have to monitor some extra files. (note that we also exclude folders such as .git or .svn)
(you can also include files etc... read more <a href="http://blog.davidchelimsky.net/articles/2008/01/15/rspec-1-1-2-and-zentest-3-8-0">there</a>)</p>

<h2><a href="http://rspec.info">RSpec</a></h2>

<p>RSpec is certainly my favorite Ruby tool and I'm glad to say that most of my <a href="http://sdruby.com/">SD.rb</a> friends finally got convinced!</p>

<p>Now, few people complained to me about spec failures outputting the full stack such as:</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;9&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;11&lt;tt&gt;
&lt;/tt&gt;12&lt;tt&gt;
&lt;/tt&gt;13&lt;tt&gt;
&lt;/tt&gt;14&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;15&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;16&lt;tt&gt;
&lt;/tt&gt;17&lt;tt&gt;
&lt;/tt&gt;18&lt;tt&gt;
&lt;/tt&gt;19&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;20&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;21&lt;tt&gt;
&lt;/tt&gt;22&lt;tt&gt;
&lt;/tt&gt;23&lt;tt&gt;
&lt;/tt&gt;24&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;25&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;26&lt;tt&gt;
&lt;/tt&gt;




&lt;tt&gt;
&lt;/tt&gt; &lt;span class="co"&gt;The&lt;/span&gt; &lt;span class="co"&gt;Sessions&lt;/span&gt; controller should fail since it&lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;s a test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="co"&gt;FAILED&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt; expected &lt;span class="pc"&gt;true&lt;/span&gt;, got &lt;span class="pc"&gt;false&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt; test_app-git/trunk/vendor/plugins/rspec/lib/spec/expectations.rb:&lt;span class="i"&gt;52&lt;/span&gt;&lt;span class="sy"&gt;:in&lt;/span&gt; &lt;span class="sh"&gt;&lt;span class="dl"&gt;`&lt;/span&gt;&lt;span class="k"&gt;fail_with'&lt;tt&gt;
&lt;/tt&gt; test_app-git/trunk/vendor/plugins/rspec/lib/spec/expectations/handler.rb:21:in &lt;/span&gt;&lt;span class="dl"&gt;`&lt;/span&gt;&lt;/span&gt;handle_matcher&lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;&lt;tt&gt;
&lt;/tt&gt; test_app-git/trunk/vendor/plugins/rspec/lib/spec/expectations/extensions/object.rb:34:in `should&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt; ./spec/controllers/sessions_controller_spec.rb:&lt;span class="i"&gt;25&lt;/span&gt;:&lt;tt&gt;
&lt;/tt&gt; test_app-git/trunk/vendor/plugins/rspec/lib/spec/example/example_methods.rb:&lt;span class="i"&gt;78&lt;/span&gt;&lt;span class="sy"&gt;:in&lt;/span&gt; &lt;span class="sh"&gt;&lt;span class="dl"&gt;`&lt;/span&gt;&lt;span class="k"&gt;instance_eval'&lt;tt&gt;
&lt;/tt&gt; test_app-git/trunk/vendor/plugins/rspec/lib/spec/example/example_methods.rb:78:in &lt;/span&gt;&lt;span class="dl"&gt;`&lt;/span&gt;&lt;/span&gt;run_with_description_capturing&lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;&lt;tt&gt;
&lt;/tt&gt; test_app-git/trunk/vendor/plugins/rspec/lib/spec/example/example_methods.rb:19:in `execute&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt; &lt;span class="rx"&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;span class="k"&gt;opt&lt;/span&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;/span&gt;local/lib/ruby/&lt;span class="fl"&gt;1.8&lt;/span&gt;/timeout.rb:&lt;span class="i"&gt;48&lt;/span&gt;&lt;span class="sy"&gt;:in&lt;/span&gt; &lt;span class="sh"&gt;&lt;span class="dl"&gt;`&lt;/span&gt;&lt;span class="k"&gt;timeout'&lt;tt&gt;
&lt;/tt&gt; test_app-git/trunk/vendor/plugins/rspec/lib/spec/example/example_methods.rb:16:in &lt;/span&gt;&lt;span class="dl"&gt;`&lt;/span&gt;&lt;/span&gt;execute&lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;&lt;tt&gt;
&lt;/tt&gt; test_app-git/trunk/vendor/plugins/rspec/lib/spec/example/example_group_methods.rb:288:in `execute_examples&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt; test_app-git/trunk/vendor/plugins/rspec/lib/spec/example/example_group_methods.rb:&lt;span class="i"&gt;287&lt;/span&gt;&lt;span class="sy"&gt;:in&lt;/span&gt; &lt;span class="sh"&gt;&lt;span class="dl"&gt;`&lt;/span&gt;&lt;span class="k"&gt;each'&lt;tt&gt;
&lt;/tt&gt; test_app-git/trunk/vendor/plugins/rspec/lib/spec/example/example_group_methods.rb:287:in &lt;/span&gt;&lt;span class="dl"&gt;`&lt;/span&gt;&lt;/span&gt;execute_examples&lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;&lt;tt&gt;
&lt;/tt&gt; test_app-git/trunk/vendor/plugins/rspec/lib/spec/example/example_group_methods.rb:121:in `run&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt; test_app-git/trunk/vendor/plugins/rspec/lib/spec/runner/example_group_runner.rb:&lt;span class="i"&gt;22&lt;/span&gt;&lt;span class="sy"&gt;:in&lt;/span&gt; &lt;span class="sh"&gt;&lt;span class="dl"&gt;`&lt;/span&gt;&lt;span class="k"&gt;run'&lt;tt&gt;
&lt;/tt&gt; test_app-git/trunk/vendor/plugins/rspec/lib/spec/runner/example_group_runner.rb:21:in &lt;/span&gt;&lt;span class="dl"&gt;`&lt;/span&gt;&lt;/span&gt;each&lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;&lt;tt&gt;
&lt;/tt&gt; test_app-git/trunk/vendor/plugins/rspec/lib/spec/runner/example_group_runner.rb:21:in `run&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt; test_app-git/trunk/vendor/plugins/rspec/lib/spec/runner/options.rb:&lt;span class="i"&gt;89&lt;/span&gt;&lt;span class="sy"&gt;:in&lt;/span&gt; &lt;span class="sh"&gt;&lt;span class="dl"&gt;`&lt;/span&gt;&lt;span class="k"&gt;run_examples'&lt;tt&gt;
&lt;/tt&gt; test_app-git/trunk/vendor/plugins/rspec/lib/spec/runner/command_line.rb:19:in &lt;/span&gt;&lt;span class="dl"&gt;`&lt;/span&gt;&lt;/span&gt;run&lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;&lt;tt&gt;
&lt;/tt&gt; script/spec:4:&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  Finished in 6.035147 seconds&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  400 examples, 1 failure&lt;tt&gt;
&lt;/tt&gt;&lt;/span&gt;&lt;/span&gt;
</code></pre>

<p>We can really easily change that, open you spec.opts file located in your spec folder.</p>

<p>it probably looks like that:</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;




&lt;tt&gt;
&lt;/tt&gt;  --colour&lt;tt&gt;
&lt;/tt&gt;  --format&lt;tt&gt;
&lt;/tt&gt;  progress&lt;tt&gt;
&lt;/tt&gt;  --loadby&lt;tt&gt;
&lt;/tt&gt;  mtime&lt;tt&gt;
&lt;/tt&gt;  --reverse&lt;tt&gt;
&lt;/tt&gt;  --backtrace&lt;tt&gt;
&lt;/tt&gt;
</code></pre>

<p>Get rid of "--backtrace" and your new failure should look like:</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;9&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;11&lt;tt&gt;
&lt;/tt&gt;




&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="i"&gt;1&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;The Sessions controller The Sessions controller should fail since it&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;s a test&lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt; FAILED&lt;tt&gt;
&lt;/tt&gt;  expected false, got true&lt;tt&gt;
&lt;/tt&gt;  ./spec/controllers/sessions_controller_spec.rb:25:&lt;tt&gt;
&lt;/tt&gt;  script/spec:4:&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  Finished in 0.269956 seconds&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  15 examples, 1 failure&lt;tt&gt;
&lt;/tt&gt;  &lt;tt&gt;
&lt;/tt&gt;&lt;/span&gt;&lt;/span&gt;
</code></pre>

<h2>Other stuff you may find interesting (in no particular order):</h2>

<ul>
<li><p><a href="http://opensource.thinkrelevance.com/wiki/spec-converter">spec converter</a></p></li>
<li><p><a href="http://cells.rubyforge.org/overview.html">Rails Cell</a></p></li>
<li><p><a href="http://jointheconversation.org/railsgit">Git to manage and deploy a Rails app</a></p></li>
<li><p><a href="http://rufy.com/contacts/doc/">contacts (retrieve user's contacts from yahoo, gmail etc..)</a></p></li>
<li><p><a href="http://www.hashrocket.com/">Hashrocket</a></p></li>
<li><p><a href="http://www.amazon.com/Rails-Way-Addison-Wesley-Professional-Ruby/dp/0321445619">one of the best Rails book of the moment</a></p></li>
<li><p><a href="http://famspam.com/">err's new baby</a></p></li>
<li><p><a href="http://blog.caboo.se/articles/2008/1/30/caboose-conf-2008">caboose conf 08</a></p></li>
<li><p><a href="http://github.com/">git hub</a></p></li>
<li><p><a href="http://swxruby.org/">SWX Ruby (or how to get Rails to talk with Flash even faster)</a></p></li>
<li><p><a href="http://ruby.reddit.com">Ruby Reddit</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSpec on Rails Matchers plugin]]></title>
    <link href="https://matt.aimonetti.net/posts/2008/01/04/rspec-on-rails-matchers-plugin/"/>
    <updated>2008-01-04T03:46:00-08:00</updated>
    <id>https://matt.aimonetti.net/posts/2008/01/04/rspec-on-rails-matchers-plugin</id>
    <content type="html"><![CDATA[<p><a href="http://rspec.info">RSpec</a> is an awesome testing framework. On top of being the first Ruby <a href="http://en.wikipedia.org/wiki/Behavior_driven_development">BDD</a> framework the core team is doing a great job in enhancing our testing experience and therefore the quality of our code.</p>

<p>This time, I don't want to introduce to the <a href="http://rspec.info/changes.html">latest changes</a> but instead showing you what <a href="http://joshknowles.com">Josh Knowles</a>, <a href="http://www.brynary.com/">Bryan Helmkamp</a> and myself came up with.</p>

<p><a href="http://code.google.com/p/rspec-on-rails-matchers/">RSpec on Rails matchers plugin</a> + <a href="http://rspec-on-rails-matchers.googlecode.com/svn/textmate-bundle/RSpecOnRailsMatchers.tmbundle.zip">TextMate Bundle</a></p>

<p>Matchers are some sort of helpers that will help you cleaning up your tests. We simply came up with a collection of matchers that we think will make your like easier.</p>

<p>We divided the matchers in 3 categories:</p>

<h2>Associations</h2>

<p>Verify that the association has been defined. (doesn't verify that the association works!)</p>

<p><em>Usage examples:</em></p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;




&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="iv"&gt;@post&lt;/span&gt;.should have_many(&lt;span class="sy"&gt;:comments&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;  &lt;tt&gt;
&lt;/tt&gt;    &lt;span class="iv"&gt;@comment&lt;/span&gt;.should belong_to(&lt;span class="sy"&gt;:post&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;  &lt;tt&gt;
&lt;/tt&gt;    &lt;span class="iv"&gt;@user&lt;/span&gt;.should have_one(&lt;span class="sy"&gt;:social_security_number&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;  &lt;tt&gt;
&lt;/tt&gt;    &lt;span class="iv"&gt;@project&lt;/span&gt;.should have_and_belong_to_many(&lt;span class="sy"&gt;:categories&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;
</code></pre>

<h2>Validations</h2>

<p>Verify that a validation has been defined. (doesn't test the validation itself)</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;9&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;




&lt;tt&gt;
&lt;/tt&gt;    object.should validate_presence_of(&lt;span class="sy"&gt;:attribute&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;    object.should validate_confirmation_of(&lt;span class="sy"&gt;:attribute&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;    object.should validate_uniqueness_of(&lt;span class="sy"&gt;:attribute&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;    object.should validate_length_of(&lt;span class="sy"&gt;:attribute&lt;/span&gt;, &lt;span class="sy"&gt;:between&lt;/span&gt; =&gt; &lt;span class="i"&gt;5&lt;/span&gt;..&lt;span class="i"&gt;10&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;    &lt;tt&gt;
&lt;/tt&gt;    object.should validate_length_of(&lt;span class="sy"&gt;:attribute&lt;/span&gt;, &lt;span class="sy"&gt;:is&lt;/span&gt; =&gt; &lt;span class="i"&gt;5&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;
</code></pre>

<h2>Views</h2>

<p>My personal favorite matchers, you can now do stuff like:</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;9&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;11&lt;tt&gt;
&lt;/tt&gt;12&lt;tt&gt;
&lt;/tt&gt;




&lt;tt&gt;
&lt;/tt&gt;    it &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;should render new form&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;        render &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;/users/new.html.erb&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;        response.should have_form_posting_to(users_path) &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;          with_text_field_for(&lt;span class="sy"&gt;:user_name&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;          with_text_area_for(&lt;span class="sy"&gt;:user_address&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;          with_text_field_for(&lt;span class="sy"&gt;:user_login&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;          with_text_field_for(&lt;span class="sy"&gt;:user_email&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;          with_submit_button&lt;tt&gt;
&lt;/tt&gt;        &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;
</code></pre>

<p>Check the <a href="http://rspec-on-rails-matchers.googlecode.com/svn/trunk/README">readme</a> for more information and details on the added matchers. I personally recommend you try the <a href="http://rspec-on-rails-matchers.googlecode.com/svn/textmate-bundle/RSpecOnRailsMatchers.tmbundle.zip">TextMate Bundle</a> on top of being a perfect tool for lazy devs, it also lists all the available matchers and is an excellent way of learning.</p>

<p>We just released our first release yesterday, this is not a final version and we will keep on improving the code. If you have suggestions and patches feel free to open a ticket <a href="http://code.google.com/p/rspec-on-rails-matchers/issues/lis">there</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Retrospective on Freelancing/Consulting]]></title>
    <link href="https://matt.aimonetti.net/posts/2007/12/31/retrospective-on-freelancing-consulting/"/>
    <updated>2007-12-31T19:42:00-08:00</updated>
    <id>https://matt.aimonetti.net/posts/2007/12/31/retrospective-on-freelancing-consulting</id>
    <content type="html"><![CDATA[<p>Being a consultant is great, being a consultant working exclusively with Ruby is awesome, being a Ruby consultant using Agile methods on great projects with cool clients is just super-awesome. The English language doesn't seem to have a word/expression defining this feeling without using the "f-word" (at least, there's nothing I can think of right now)
I have to say that I owe a lot to the Ruby community and especially the Rails core team. Without you/them, I wouldn't be able to do what I do and I would certainly not have so much fun.</p>

<p>Enough blahblah, a retrospective wouldn't be a retrospective if I wouldn't look at ways to improve the process.</p>

<p>Looking at back on 2007, I'll look at what I did good and where I could have done better.</p>

<p><strong>communication wise</strong>, I think things worked out quite well.</p>

<h2>Daily stand up</h2>

<p>The <strong>daily stand up/scrum</strong> proved to be very efficient on all projects. it usually takes a short adaptation time on the clients side, but once everybody is on the same page, <strong>meetings are short and efficient</strong>.</p>

<h2>Iterations</h2>

<p>Clients adapted more or less well to the whole <strong>Iteration process</strong>. On some occasions, I ended up being in charge of managing iterations, confirming my suggestions with the client during our iteration planning. I wish I was able to get all my clients to fully understand and enjoy the process, but oh well, the reality is that some clients just want the work done and don't care too much how you do it.
In general iteration planning sessions went quite well, they really helped us defining priorities and manage the budget. However, <strong>I feel the need to bring more structure into these meetings</strong>.</p>

<h2>Weekly Retrospectives</h2>

<p>Retrospectives/demos could really be improved. I have to admit that I was not able to organize a single great retrospective with my clients. That's one major draw back of working remotely and being a contractor.
Since I would deploy few times a week, the weekly demo didn't always made sense. I therefore decided to use <a href="http://www.jingproject.com/">Jing</a> and create a weekly screencast of the iteration changes. This way my clients know exactly what was done and can test whenever they want. We still have our demos from time to time especially when major new features are implemented.
In 2008, <strong>I really want to improve clients' retrospective</strong>.</p>

<h2>Tools</h2>

<p>While lighthouse helped me keeping track of my iteration user stories, unfortunately, I noticed that clients got confused when using the same tool to report bugs and to manage iterations. I'll still be using lighthouse for bug reports but or I will have to finish my agile project manager or I'll use <a href="http://joshknowles.com">Josh Knowles'</a> of he finally releases his software ;)</p>

<p>Bdd/Rspec was a big winner in '07. People might argue about the real benefit of RSpec vs test unit. Well, I can only talk about my own experience, after using RSpec for a year, the way I write my applications totally changed. TDD certainly became a reality. Even my relationship with my clients changed. I now get my clients to write my tests, well, not exactly but almost. I get them to define the expected behaviors using the usual it..should..do syntax. I then just need to transpose my clients expectations in contextualized specs. once the iteration is over, I output a spec report that i give to my client. I never had so much fun writing tests!</p>

<p>One thing I need to focus on in 08: ajax &amp; js tests!</p>

<p>Talking about JavaScript, I finally found a way to write Js and have fun. <a href="http://lowpro.stikipad.com">Lowpro</a> totally changed my view of Js and I can't wait to push things further.(my <a href="http://sdruby.com/">December talk</a> on Unobtrusive Javascript should be online sometimes soon)</p>

<p>Talking about pushing things further, I need to see if I can totally dish svn and only use git + gitosis. if you didn't check Git yet, go check on the awesome <a href="http://peepcode.com/products/git">peepcode</a> put together by <a href="http://nubyonrails.com/">topfunky</a>.</p>

<h2>Misc things that didn't work that well:</h2>

<ul>
<li><p>unreliable subcontractors</p></li>
<li><p>hard to find designers</p></li>
<li><p>having to say no to so many cool projects (always a good problem to have though)</p></li>
</ul>


<h2>Various things that I enjoyed:</h2>

<ul>
<li><p><a href="http://www.joyent.com/accelerator">Joyent accelerators</a></p></li>
<li><p><a href="http://twitter.com/">twitter</a></p></li>
<li><p><a href="http://sdruby.com/">sd.rb</a></p></li>
<li><p><a href="http://www.zenspider.com/ZSS/Products/ZenTest/">autotest</a></p></li>
<li><p><a href="http://www.apple.com/iphone/">iPhone</a>
(and probably a lot other stuff that I can't remember right now)</p></li>
</ul>


<h2>Major changes planned for 08:</h2>

<ul>
<li><p>pairing with another <a href="http://workingwithrails.com/person/8526-robert-kaufman">local developer</a> complementing my skills.</p></li>
<li><p>better weekly retrospectives</p></li>
<li><p>tech lunch at least once a month</p></li>
<li><p>learn Erlang or another programming language</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[blog hiccups]]></title>
    <link href="https://matt.aimonetti.net/posts/2007/12/31/blog-hiccups/"/>
    <updated>2007-12-31T14:14:00-08:00</updated>
    <id>https://matt.aimonetti.net/posts/2007/12/31/blog-hiccups</id>
    <content type="html"><![CDATA[<p>Last night I updated my <a href="http://mephistoblog.com/">Mephisto install</a> and switched from awful <a href="http://dreamhost.com/">dreamhost</a> to awesome <a href="http://www.joyent.com/">Joyent</a>. Everything went well until the dreamhost control panel wasn't accessible anymore leaving my site broken for a couple of hours. This should have cleared up by now, but I'm really sorry about that.</p>

<p>I was hoping to launch the site from <a href="http://www.joyent.com/">Joyent</a> with the new design, but the <a href="http://matthewgist.com/">designer</a> isn't done yet :(</p>

<p>I wish you all a Happy New Year 2008.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TimeZone selection]]></title>
    <link href="https://matt.aimonetti.net/posts/2007/12/21/timezone-selection/"/>
    <updated>2007-12-21T23:47:00-08:00</updated>
    <id>https://matt.aimonetti.net/posts/2007/12/21/timezone-selection</id>
    <content type="html"><![CDATA[<p>Supporting TimeZones is a serious pain in a developer's neck. Thankfully, Rails comes with a bunch of tools making our life easier. One of my Rails patch <a href="http://dev.rubyonrails.org/changeset/8473">just got merged</a> in Rails Edge (Future Rails 2.1)  and I believe it will make my life just a tiny be more enjoyable.</p>

<p>Let's look at a simple scenario, your application has many users and each user has the option of setting his own TimeZone. Most of your users are in the US and actually on the West Coast. You probably don't want to list all the time zones on earth, and you don't really want to include a blank option. What we want is to have a list of top priority time zones (US zones) and to pre select the most comment zone. (L.A. / PST)</p>

<p>I won't go into TZ support in the back-end, check <a href="http://weblog.jamisbuck.org/2007/2/2/introducing-tztime">this post</a>, <a href="http://www.caboo.se/articles/2007/2/23/adding-timezone-to-your-rails-app">this other one</a> or yet <a href="http://www.marklunds.com/articles/one/311">that one</a> for more information.</p>

<p>Let's look at our views, option one, you want to use the Rails built-in TimeZones:</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;9&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;11&lt;tt&gt;
&lt;/tt&gt;12&lt;tt&gt;
&lt;/tt&gt;13&lt;tt&gt;
&lt;/tt&gt;14&lt;tt&gt;
&lt;/tt&gt;




&lt;% form_for &lt;span class="sy"&gt;:user&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt; |f| -&lt;span class="s"&gt;&lt;span class="dl"&gt;%&gt;&lt;/span&gt;&lt;span class="k"&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;p&lt;/span&gt;&lt;span class="dl"&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;label &lt;span class="r"&gt;for&lt;/span&gt;=&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;&gt;&lt;span class="co"&gt;Name&lt;/span&gt;: &lt;em&gt;(full name)&lt;&lt;span class="rx"&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;span class="k"&gt;em&gt;&lt;&lt;/span&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;/span&gt;label&gt;&lt;br/&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;%= f.text_field &lt;span class="sy"&gt;:name&lt;/span&gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;%&gt;&lt;/span&gt;&lt;span class="k"&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;/p&lt;/span&gt;&lt;span class="dl"&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;p&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;label&gt;&lt;span class="co"&gt;Default&lt;/span&gt; timezone&lt;span class="sy"&gt;:&lt;&lt;/span&gt;/label&gt;&lt;br/&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;%= f.time_zone_select (&lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;time_zone&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="co"&gt;TimeZone&lt;/span&gt;.us_zones, &lt;tt&gt;
&lt;/tt&gt;                                          &lt;span class="sy"&gt;:default&lt;/span&gt; =&gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;Pacific Time (US &amp; Canada)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="s"&gt;&lt;span class="dl"&gt;%&gt;&lt;/span&gt;&lt;span class="k"&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;/p&lt;/span&gt;&lt;span class="dl"&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;div &lt;span class="r"&gt;class&lt;/span&gt;=&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;actions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;&gt;&lt;%= submit_tag &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;register&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;%&gt;&lt;/span&gt;&lt;span class="k"&gt;&lt;/div&lt;/span&gt;&lt;span class="dl"&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;% &lt;span class="r"&gt;end&lt;/span&gt; -&lt;span class="s"&gt;&lt;span class="dl"&gt;%&gt;&lt;/span&gt;&lt;/span&gt;
</code></pre>

<p><img src="http://myskitch.com/matt_a/time_zone_select-20071221-182928.jpg" alt="builtin timezones" /></p>

<p>Option 2, we are using <a href="http://rubyforge.org/projects/tzinfo/">TZinfo</a>:</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;9&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;11&lt;tt&gt;
&lt;/tt&gt;12&lt;tt&gt;
&lt;/tt&gt;13&lt;tt&gt;
&lt;/tt&gt;14&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;15&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;




&lt;% form_for &lt;span class="sy"&gt;:user&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt; |f| -&lt;span class="s"&gt;&lt;span class="dl"&gt;%&gt;&lt;/span&gt;&lt;span class="k"&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;p&lt;/span&gt;&lt;span class="dl"&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;label &lt;span class="r"&gt;for&lt;/span&gt;=&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;&gt;&lt;span class="co"&gt;Name&lt;/span&gt;: &lt;em&gt;(full name)&lt;&lt;span class="rx"&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;span class="k"&gt;em&gt;&lt;&lt;/span&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;/span&gt;label&gt;&lt;br/&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;%= f.text_field &lt;span class="sy"&gt;:name&lt;/span&gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;%&gt;&lt;/span&gt;&lt;span class="k"&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;/p&lt;/span&gt;&lt;span class="dl"&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;p&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;label&gt;&lt;span class="co"&gt;Default&lt;/span&gt; timezone&lt;span class="sy"&gt;:&lt;&lt;/span&gt;/label&gt;&lt;br/&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;%= f.time_zone_select(&lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;time_zone&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="co"&gt;TZInfo&lt;/span&gt;::&lt;span class="co"&gt;Timezone&lt;/span&gt;.us_zones, &lt;tt&gt;
&lt;/tt&gt;                                         &lt;span class="sy"&gt;:default&lt;/span&gt; =&gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;America/Los_Angeles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;tt&gt;
&lt;/tt&gt;                                         &lt;span class="sy"&gt;:model&lt;/span&gt; =&gt; &lt;span class="co"&gt;TZInfo&lt;/span&gt;::&lt;span class="co"&gt;Timezone&lt;/span&gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;%&gt;&lt;/span&gt;&lt;span class="k"&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;/p&lt;/span&gt;&lt;span class="dl"&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;div &lt;span class="r"&gt;class&lt;/span&gt;=&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;actions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;&gt;&lt;%= submit_tag &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;register&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;%&gt;&lt;/span&gt;&lt;span class="k"&gt;&lt;/div&lt;/span&gt;&lt;span class="dl"&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;% &lt;span class="r"&gt;end&lt;/span&gt; -&lt;span class="s"&gt;&lt;span class="dl"&gt;%&gt;&lt;/span&gt;&lt;/span&gt;
</code></pre>

<p><img src="http://myskitch.com/matt_a/timezone_select_tzinfo-20071221-183443.jpg" alt="TZinfo" /></p>

<p>Obviously, the default timezone is used only if the user didn't set one already.</p>

<p>Pretty simple feature but hopefully quite helpful!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 2.0.2 with few changes]]></title>
    <link href="https://matt.aimonetti.net/posts/2007/12/17/rails-2-0-2-with-few-changes/"/>
    <updated>2007-12-17T09:52:00-08:00</updated>
    <id>https://matt.aimonetti.net/posts/2007/12/17/rails-2-0-2-with-few-changes</id>
    <content type="html"><![CDATA[<h2>What's new?</h2>

<ul>
<li><p>Rails default database is now sqlite3. If you are running Leopard, everything is already setup for you. As DHH mentioned, just "rails -d mysql your_app_name" if you want to generate a new app preconfigured for MySQL.
Sqlite3 is great and if the only reason why you didn't give it a try is because you have to use CocoaMySQL, then check out <a href="http://sqlitebrowser.sourceforge.net/">sqlitebrowser</a></p></li>
<li><p>Other new feature: rake secret  to generate a key used to encrypt your session. Really useful task when you're migrating an app to 2.x</p></li>
<li><p>To improve performance, some changes were made to the template caching and you have to restart your production server after a template modification.</p></li>
<li><p>Validates acceptance of still works for non-existent tables . (sorry <a href="http://blog.hasmanythrough.com/">Josh</a>, I won't post after 2am, especially when I forget your life changing bug fix ;) )</p></li>
<li><p>Added option to pass proc to ActionController::Base.asset_host for maximum configurability. Example:</p>

<p>1<tt>
</tt>2<tt>
</tt>3<tt>
</tt>4<tt>
</tt><strong>5</strong><tt>
</tt>6<tt>
</tt>7<tt>
</tt></p>

<pre><code>&lt;span class="co"&gt;ActionController&lt;/span&gt;::&lt;span class="co"&gt;Base&lt;/span&gt;.asset_host = &lt;span class="co"&gt;Proc&lt;/span&gt;.new { |source|&lt;tt&gt;
</code></pre>

<p></tt>      <span class="r">if</span> source.starts_with?(<span class="s"><span class="dl">'</span><span class="k">/images</span><span class="dl">'</span></span>)<tt>
</tt>        <span class="s"><span class="dl">"</span><span class="k">http://images.example.com</span><span class="dl">"</span></span><tt>
</tt>      <span class="r">else</span><tt>
</tt>        <span class="s"><span class="dl">"</span><span class="k">http://assets.example.com</span><span class="dl">"</span></span><tt>
</tt>      <span class="r">end</span><tt>
</tt>    }</p></li>
<li><p>Finally, I added 2 new rake tasks: db:migrate:redo and db:migrate:reset</p></li>
</ul>


<p>db:migrate:redo rolls back your database and then migrates it up. You can define the STEP constant to specify the amount of steps you want to rollback. This task is very useful in development mode when making a modification to the latest migration(s).
db:migrate:reset will drop your database, re create it and migrate it up. Only use this task if you really have to and only in development/test environment.  Use db:reset in production mode since it uses the schema.rb file and won't go through the hundreds of migrations you might have.</p>

<h2>Changeset</h2>

<p><em>2.0.2</em> (December 16th, 2007)</p>

<ul>
<li><p>Changed the default database from mysql to sqlite3, so now running "rails myapp" will have a config/database.yml that's setup for SQLite3 (which in OS X Leopard is installed by default, so is the gem, so everything Just Works with no database configuration at all). To get a Rails application preconfigured for MySQL, just run "rails -d mysql myapp" [DHH]</p></li>
<li><p>Turned on ActionView::Base.cache_template_loading by default in config/environments/production.rb to prevent file system stat calls for every template loading to see if it changed (this means that you have to restart the application to see template changes in production mode) [DHH]</p></li>
<li><p>Introduce <code>rake secret</code> to output a crytographically secure secret key for use with cookie sessions #10363 [revans]</p></li>
<li><p>Fixed that local database creation should consider 127.0.0.1 local #9026 [parcelbrat]</p></li>
<li><p>Fixed that functional tests generated for scaffolds should use fixture calls instead of hard-coded IDs #10435 [boone]</p></li>
<li><p>Added db:migrate:redo and db:migrate:reset for rerunning existing migrations #10431, #10432  [matt]</p></li>
<li><p>RAILS_GEM_VERSION may be double-quoted also.  #10443 [James Cox]</p></li>
<li><p>Update rails:freeze:gems to work with RubyGems 0.9.5.  [Jeremy Kemper]</p></li>
<li><p>Added delete_via_redirect and put_via_redirect to integration testing #10497 [philodespotos]</p></li>
<li><p>Allow headers['Accept'] to be set by hand when calling xml_http_request #10461 [BMorearty]</p></li>
<li><p>Added OPTIONS to list of default accepted HTTP methods #10449 [holoway]</p></li>
<li><p>Added option to pass proc to ActionController::Base.asset_host for maximum configurability #10521 [chuyeow]. Example:</p></li>
</ul>


<p>ActionController::Base.asset_host = Proc.new { |source|
  if source.starts_with?('/images')</p>

<pre><code>"http://images.example.com"
</code></pre>

<p>  else</p>

<pre><code>"http://assets.example.com"
</code></pre>

<p>  end
}</p>

<ul>
<li><p>Fixed that ActionView#file_exists? would be incorrect if @first_render is set #10569 [dbussink]</p></li>
<li><p>Added that Array#to_param calls to_param on all it's elements #10473 [brandon]</p></li>
<li><p>Ensure asset cache directories are automatically created.  #10337 [Josh Peek, Cheah Chu Yeow]</p></li>
<li><p>render :xml and :json preserve custom content types.  #10388 [jmettraux, Cheah Chu Yeow]</p></li>
<li><p>Refactor Action View template handlers.  #10437, #10455 [Josh Peek]</p></li>
<li><p>Fix DoubleRenderError message and leave out mention of returning false from filters.  Closes #10380 [Frederick Cheung]</p></li>
<li><p>Clean up some cruft around ActionController::Base#head.  Closes #10417 [ssoroka]</p></li>
<li><p>Ensure optimistic locking handles nil #lock_version values properly.  Closes #10510 [rick]</p></li>
<li><p>Make the Fixtures Test::Unit enhancements more supporting for double-loaded test cases.  Closes #10379 [brynary]</p></li>
<li><p>Fix that validates_acceptance_of still works for non-existent tables (useful for bootstrapping new databases).  Closes #10474 [hasmanyjosh]</p></li>
<li><p>Ensure that the :uniq option for has_many :through associations retains the order.  #10463 [remvee]</p></li>
<li><p>Base.exists? doesn't rescue exceptions to avoid hiding SQL errors.  #10458 [Michael Klishin]</p></li>
<li><p>Documentation: Active Record exceptions, destroy_all and delete_all.  #10444, #10447 [Michael Klishin]</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Googlecharts 0.1.0 released with new site]]></title>
    <link href="https://matt.aimonetti.net/posts/2007/12/12/googlecharts-0-1-0-released-with-new-site/"/>
    <updated>2007-12-12T08:02:00-08:00</updated>
    <id>https://matt.aimonetti.net/posts/2007/12/12/googlecharts-0-1-0-released-with-new-site</id>
    <content type="html"><![CDATA[<p>I just released Googlecharts 0.1.0 (few bug fixes and enhancements).</p>

<ul>
<li><p>The first thing you want to do is to install the gem</p>

<p>sudo gem install googlecharts</p></li>
<li><p>The second thing you want to do is check <a href="http://googlecharts.rubyforge.org/">the great brand new website</a> for <a href="http://googlecharts.rubyforge.org/">googlecharts</a></p></li>
</ul>


<p><img src="http://content.screencast.com/media/40c8b83c-06e5-4d07-89d5-8f05ae37e3a9_74569570-772f-4886-b2ea-f305d1ede3aa_static_0_0_00000037.png" alt="website" /></p>

<ul>
<li><p>The third thing you want to do is to <a href="http://www.workingwithrails.com/recommendation/new/person/6065-matt-aimonetti">recommend me on Working with Rails</a> ;)</p></li>
<li><p>The fourth thing you want to do is to submit patches, suggestions etc...</p></li>
<li><p>The fifth thing you want to do is to develop an awesome website using sexy googlecharts</p></li>
</ul>


<p>This gem and its website have been made possible by <a href="http://drnicwilliams.com/">DrNic</a> and his awesome <a href="http://newgem.rubyforge.org/">new gem generator</a> and has been developed following the BDD approach thanks to <a href="http://rspec.rubyforge.org">RSpec</a> :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Chart Gem]]></title>
    <link href="https://matt.aimonetti.net/posts/2007/12/10/google-chart-gem/"/>
    <updated>2007-12-10T06:43:00-08:00</updated>
    <id>https://matt.aimonetti.net/posts/2007/12/10/google-chart-gem</id>
    <content type="html"><![CDATA[<h2>update Nov 11: the gem is finally available <a href="http://rubyforge.org/projects/googlecharts/">there</a> or simply:</h2>

<pre><code>  sudo gem install googlecharts
</code></pre>

<p>Note that I'm working on merging this gem with another Google Charts gem. (see comments for more info about that)</p>

<p><img src="http://chart.apis.google.com/chart?chtt=Rails+on+the+run&amp;cht=p3&amp;chs=200x90&amp;chd=s:Hellobla&amp;chl=May|Jun|Jul|Aug|Sep|Oct&amp;chco=0000ff" alt="gchart" /></p>

<p>I've been working on a Google Chart Gem that I have ready for a beta release but unfortunately, getting a new project setup on RubyForge takes forever. (apparently 72 hours)</p>

<p>It's mainly a wrapper for the great GChart API, but instead of using a helper to generate your graphs, you can simply do:</p>

<pre><code>  Gchart.bar(:title =&gt; 'My Mojo', :data =&gt; [1,2,4,67,100,41,234], :max_value =&gt; 300, :bg =&gt; 'c3c3c3')

  Gchart.line(:title =&gt; 'My Mojo', 
              :data =&gt; [[1,2,4,67,100,41,234],[41,63,96,17,100,14,423]],
              :bg =&gt; '666666', 
              :graph_bg =&gt; 'cccccc', 
              :line_colors =&gt; 'ff0000,00ff00',
              :legend =&gt; ['morning','evening'])







  Gchart.pie(:data =&gt; [20,10,15,5,50], :title =&gt; 'SDRuby fu', :size =&gt; '400x200', :labels =&gt; ['matt', 'rob', 'patrick', 'jordan', 'ryan'])
</code></pre>

<p><img src="http://chart.apis.google.com/chart?chs=400x200&amp;chd=s:YMSG9&amp;chtt=SDRuby+fu&amp;chl=matt|rob|patrick|jordan|ryan&amp;cht=p" alt="img" /></p>

<p>As far as I know this is most complete Ruby wrapper for Google Chart API, but feel free to look around.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[keeping my javascript files organized]]></title>
    <link href="https://matt.aimonetti.net/posts/2007/12/05/keeping-my-javascript-files-organized/"/>
    <updated>2007-12-05T04:01:00-08:00</updated>
    <id>https://matt.aimonetti.net/posts/2007/12/05/keeping-my-javascript-files-organized</id>
    <content type="html"><![CDATA[<p>I was recently asked by Rubyist friend (<a href="http://joshknowles.com/">Josh Knowles</a>) how I was organizing my Javascript files when using <a href="http://lowpro.stikipad.com/home/show/HomePage">LowPro</a>.</p>

<p><a href="http://lowpro.stikipad.com/home/show/HomePage">LowPro</a> is the best solution for doing <a href="http://en.wikipedia.org/wiki/Unobtrusive_JavaScript">Unobtrusive Javascript</a> using <a href="http://www.prototypejs.org/">Prototype</a>.</p>

<p>With the help of <a href="http://lowpro.stikipad.com/home/show/HomePage">LowPro</a>, you define behaviors that get triggered by the user. This is great, however, you'll notice that some behaviors are used all over the place (a date chooser for instance) and some complicated behaviors only get used on very specific pages.</p>

<p>First things first, let's look at the header in my application.html.erb file (located in app/views/layouts).
This is the default layout used by all my views, I rarely use more than 5 layouts per app and always use a default layout.</p>

<p>Please note that I'm using Rails 2.0 so some features you'll see in my file won't work in Rails 1.2.x. (if you want to know about all the new Rails sexiness, check on <a href="http://peepcode.com/products/rails2-pdf">this awesome Peepcode PDF</a>.</p>

<p>Here we go:</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;




  &lt;%= javascript_include_tag &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;prototype&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;effects&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="sy"&gt;:cache&lt;/span&gt; =&gt; &lt;span class="pc"&gt;true&lt;/span&gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;%&gt;&lt;/span&gt;&lt;span class="k"&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;%= javascript_include_tag 'lowpro', :cache =&lt;/span&gt;&lt;span class="dl"&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class="pc"&gt;true&lt;/span&gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;%&gt;&lt;/span&gt;&lt;span class="k"&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;%= javascript_include_tag  'application', :cache =&lt;/span&gt;&lt;span class="dl"&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class="pc"&gt;true&lt;/span&gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;%&gt;&lt;/span&gt;&lt;/span&gt;
</code></pre>

<p>The first thing you might notice is that I don't use</p>

<pre><code>&lt;tt&gt;
&lt;/tt&gt;




  &lt;%= javascript_include_tag &lt;span class="sy"&gt;:defaults&lt;/span&gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;%&gt;&lt;/span&gt;&lt;/span&gt;
</code></pre>

<p>The reason? I don't want to load prototype.js, effects.js, controls.js, dragdrop.js, and application.js all at once. I almost never use drag'n'drop and seldom use Autocompleter and InPlaceEditor so why loading them in each and every single page of my apps? I'm not saying they are bad libraries, I'm just saying that in more than 80% of my page, I don't use them, so they should not be in my default page load.</p>

<p>The second thing you might notice, I use :cache => true. Asset caching is a new feature in Rails 2.0 which combines related assets into a single file (works with css and js and only in production mode)
 Note that the above code is untested, but everything should be loaded properly, otherwise, make sure proto gets loaded first, then lowpro, then application. (and you can probably create a one-liner)</p>

<p>All the default behaviors are defined in the application.js file, so they get loaded on all page. However to handle action specific behaviors, I use another Rails trick right in the header:</p>

<pre><code>&lt;tt&gt;
&lt;/tt&gt;




 &lt;%= &lt;span class="r"&gt;yield&lt;/span&gt; &lt;span class="sy"&gt;:javascript&lt;/span&gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;%&gt;&lt;/span&gt;&lt;/span&gt;
</code></pre>

<p>Why? Very simple, I want to load some custom JS in the header depending on the action that is used. For instance, when a visitor goes to my fancy ajax photo editor, I want to load the content editor javascript right in the header where it belongs.</p>

<p>For that, I simply need to add the following to my view:</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;




  &lt;% content_for &lt;span class="sy"&gt;:javascript&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;%&gt;&lt;/span&gt;&lt;span class="k"&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;%= javascript_include_tag "photos_show" %&lt;/span&gt;&lt;span class="dl"&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;% &lt;span class="r"&gt;end&lt;/span&gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;%&gt;&lt;/span&gt;&lt;/span&gt;
</code></pre>

<p>If content_for :javascript isn't define, noting is yield in my header and therefore nothing is included but whenever I need, I can access my header directly from the view and insert javascript code in a very clean way.</p>

<p>photos_show.js is the javascript defining all the behaviors related to the photos controller and the show action. I usually only have few actions with a lot of custom behaviors so, these structure works well for me.</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;




  javascripts&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="er"&gt;\&lt;/span&gt;controller_action.js&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="er"&gt;\&lt;/span&gt;controller_another_action.js&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="er"&gt;\&lt;/span&gt;another_controller_action.js&lt;tt&gt;
&lt;/tt&gt;    ...
</code></pre>

<p>However in the case of an app with a lot of custom behaviors, I recommend using the following structure:</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;




  javascripts&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="er"&gt;\&lt;/span&gt; controller_name_&lt;tt&gt;
&lt;/tt&gt;            &lt;span class="er"&gt;\&lt;/span&gt;action_name_.js&lt;tt&gt;
&lt;/tt&gt;      &lt;span class="er"&gt;\&lt;/span&gt;another_controller_name&lt;tt&gt;
&lt;/tt&gt;              &lt;span class="er"&gt;\&lt;/span&gt;action_name_.js&lt;tt&gt;
&lt;/tt&gt;  ...
</code></pre>

<p>That's it folks, I'm not a javascript expert, and if you know better, don't hesitate to leave me a comment. What I know for sure, is that since I started using LowPro and behavior driven with Prototype, I have much more fun. Adding a bit of structure is a simple way for me to keep my code clear and help other people who have to work with me. (more on that later)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[a new useless Gem]]></title>
    <link href="https://matt.aimonetti.net/posts/2007/12/04/a-new-useless-gem/"/>
    <updated>2007-12-04T08:28:00-08:00</updated>
    <id>https://matt.aimonetti.net/posts/2007/12/04/a-new-useless-gem</id>
    <content type="html"><![CDATA[<p>During Thanksgiving break I had fun with a friend of mine working on a Ruby challenge while digesting the traditional turkey.</p>

<p><img src="http://content.screencast.com/media/a088950c-c9d1-4655-9b6e-b917e04dd6ec_74569570-772f-4886-b2ea-f305d1ede3aa_static_0_0_00000026.png" alt="http://content.screencast.com/media/a088950c-c9d1-4655-9b6e-b917e04dd6ec&lt;em&gt;74569570-772f-4886-b2ea-f305d1ede3aa&lt;/em&gt;static&lt;em&gt;0&lt;/em&gt;0_00000026.png" /></p>

<p>The challenge was quite simple, create a small library that can generate random words from the English dictionary.</p>

<p>But of course there was a twist. One should be able to choose the total amount of characters, the amount of words and the separator between the words. However we both had a <a href="http://wordlist.sourceforge.net/">word list</a>.</p>

<p>I personally decided to use <a href="http://www.sqlite.org/">SQlite3</a> to store the words after parsing the text file if the database is empty.</p>

<p>It was a good exercise and it got me to play with SQLite and one of the <a href="http://rubyforge.org/projects/sqlite-ruby/">Ruby adapter library</a>. Once I was done, I decide to play with <a href="http://drnicwilliams.com/">DrNic</a> cool <a href="http://newgem.rubyforge.org/">Gem generator</a>.</p>

<p><img src="http://static.flickr.com/50/130749539_89959dd059_t.jpg" alt="http://static.flickr.com/50/130749539&lt;em&gt;89959dd059&lt;/em&gt;t.jpg" /></p>

<p>Nic is my favorite Aussie's Rubyist (ok, I don't know many) and I've been wanting to check on this lib for a very long time. And I have to say he did an awesome job! Writing a Ruby Gem has never that easy! And on top of that the generator creates RSpec examples (or test/unit tests), a basic website for your gem and has a bunch of rake tasks to deploy your newly created gem.</p>

<p>Feel free to check the source code:</p>

<p><a href="http://random-word-gen.rubyforge.org/svn/">http://random-word-gen.rubyforge.org/svn/</a></p>

<p><a href="http://rubyforge.org/projects/random-word-gen/">And the Rubyforge site</a></p>

<p>By the way, I did find an almost useful use for this gem. Activation code generator. You know, the kind of string your receive on by email or SMS to activate a feature or an account. It's always a pain to type a MD5Hash string, while, when using the word generator, the string is made of existing words, making the process way more user friendly.</p>

<p>I also plan on adding some random copyleft text to the sqlite db so the Gem will be able to generate titles, paragraphs and random quotes. I'm just tired of reading <a href="http://en.wikipedia.org/wiki/Lorem_ipsum">lorem ipsum</a> and on top of that, I get to it, I might had text in various languages so you check if your app breaks when using another char set, or if your layout can't handle too much text.</p>

<p>Honestly, I don't expect you to use this gem, but I jut wanted to encourage people to start writing their own gem, the process is super easy and rewarding. And actually, feel free to try the challenge and post a link to your implementation in the comments. (That's seriously, the best way to learn)</p>

<p>p.s: I'm sorry about my RSS feed constantly being reset, it seems to be a problem with Mephisto, my blog engine and we are trying to figure out what's going on.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Attachment_fu updated!]]></title>
    <link href="https://matt.aimonetti.net/posts/2007/11/28/attachment_fu-updated/"/>
    <updated>2007-11-28T08:26:00-08:00</updated>
    <id>https://matt.aimonetti.net/posts/2007/11/28/attachment_fu-updated</id>
    <content type="html"><![CDATA[<p>I recently bugged <a href="http://techno-weenie.net/">Rick Olson</a> so much about <a href="http://svn.techno-weenie.net/projects/plugins/attachment_fu/">attachment_fu</a> that he gave me SVN access to fix few bugs.</p>

<p>Rick being really busy with <a href="http://activereload.net/">ActiveReload</a> he didn't spend too much time maintaining <a href="http://svn.techno-weenie.net/projects/plugins/attachment_fu/">attachment_fu</a>.</p>

<p>On my side of things, I've been using <a href="http://svn.techno-weenie.net/projects/plugins/attachment_fu/">attachment_fu</a> on a lot of projects and I've been fixing bugs and adding new features.</p>

<p>My first contribution to <a href="http://svn.techno-weenie.net/projects/plugins/attachment_fu/">attachment_fu</a> is a fix for the <a href="http://seattlerb.rubyforge.org/ImageScience.html">ImageScience</a> processor.</p>

<p>Attachment_fu is very flexible and let you use your favorite image processor:</p>

<ul>
<li><p><a href="http://rmagick.rubyforge.org/">RMagick</a> based on <a href="http://www.imagemagick.org/script/mogrify.php">ImageMagick</a> and <a href="http://www.graphicsmagick.org/">GraphicsMagick</a>(known to leak memory and being a pain to setup)</p></li>
<li><p><a href="http://rubyforge.org/projects/mini-magick/">minimagick</a> based on <a href="http://www.imagemagick.org/script/mogrify.php">ImageMagick</a></p></li>
<li><p><a href="http://seattlerb.rubyforge.org/ImageScience.html">ImageScience</a> based on <a href="http://sf.net/projects/freeimage">FreeImage</a>.</p></li>
</ul>


<p>Like many rubyists, I like <a href="http://seattlerb.rubyforge.org/ImageScience.html">ImageScience</a> for its simplicity and efficiency. However, <a href="http://svn.techno-weenie.net/projects/plugins/attachment_fu/">attachment_fu</a> had few problems when being used with <a href="http://seattlerb.rubyforge.org/ImageScience.html">ImageScience</a>.</p>

<ul>
<li><p>File sizes for thumbnails were not saved correctly in the database. Fixed</p></li>
<li><p>Thumbnails based on a gif files were not processed properly. So, this was the big problem. <a href="http://sf.net/projects/freeimage">FreeImage</a> has issues dealing with resizing gif files because of the gif palette limitation (256 colors). to avoid this problem thumbnails of gif files are converted to png. However the thumbnail content type info in the database was not saved properly. That's now fixed.</p></li>
<li><p>Because of the gif bug reported above, any thumbnail link was broken since it was trying to link to the thumbnail version with a gif extension instead of a png one. Fixed</p></li>
</ul>


<p>I also fixed a small bug related to <a href="http://www.amazon.com/gp/browse.html?node=16427261">S3 storage</a> and the fact that a_fu had issues loading the config file. (Fixed)</p>

<p>I'll also try be able to add some of the S3 features I've been working on. As well as maybe enhancing the validation process.</p>

<p>In the mean time, you might want to read <a href="http://the.railsi.st/2007/11/27/roll-your-own-attachment_fu-validations">this blog post</a> about better validation with attachment_fu.</p>

<p>If you are heavily using attachment_fu or starting using it and think that a google group would be great idea, please let me know in the comment and I'll try to convince Technoweenie that we need to set that up :)</p>

<p>Ooohh I almost forgot, if you fixed some bugs you found while using a_fu, please contact me so we can get a_fu bug free.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LowPro trunk, what's new?]]></title>
    <link href="https://matt.aimonetti.net/posts/2007/11/27/lowpro-0-5-what-s-new/"/>
    <updated>2007-11-27T06:44:00-08:00</updated>
    <id>https://matt.aimonetti.net/posts/2007/11/27/lowpro-0-5-what-s-new</id>
    <content type="html"><![CDATA[<p>If you've read my <a href="http://railsontherun.com/2007/9/27/ajax-pagination-in-less-than-5-minutes">post on Ajax pagination</a> you know that I'm a big fan of <a href="http://www.danwebb.net">Dan Webb</a>'s <a href="http://www.danwebb.net/lowpro">LowPro</a> unobtrusive javascript library.</p>

<p>Doing Unobtrusive Javascript (UJS) is basically registering event handlers programmatically using CSS selectors to select the elements to register. In other words : keeping things separate and avoiding inline javascript.</p>

<p>If you've been using LowPro 0.4 and recently tried to upgrade to <a href="http://www.prototypejs.org/">Prototype 1.6</a> you probably noticed that things don't work as they used to.</p>

<p>The first thing you want to do, is to update to the <a href="http://svn.danwebb.net/external/lowpro/trunk/dist/">latest version of Lowpro</a>.</p>

<h2>So what's new in 0.5 trunk?</h2>

<p>First off, you need to know that a lot of lowpro features were moved in Prototype 1.6 core :)</p>

<ul>
<li><p>You now get a warning via firebug if you try to use Low Pro with a version of Prototype that its not designed to work with.</p></li>
<li><p>Alternative event system ripped out: uses core events</p></li>
<li><p>DOM method mixins ripped out: alternatives all in prototype</p></li>
<li><p>Event.onReady delegates to the new dom:loaded event.  However this doesn't fire immediately if the dom is already loaded like Event.onReady did. (might be patched to work as before)</p></li>
<li><p>DOMBuilder is staying but now is a thin shell around the new proto 1.6 Element stuff.</p></li>
<li><p>You can still return false from event handlers in addEvent and Behaviors to stop the event but now if you use Event.observe raw you don't get this.</p></li>
<li><p>Behavior.create now works like Class.create in 1.6 so behaviors can have full inheritance:</p>

<p>1<tt>
</tt>2<tt>
</tt>3<tt>
</tt>4<tt>
</tt><strong>5</strong><tt>
</tt>6<tt>
</tt>7<tt>
</tt>8<tt>
</tt>9<tt>
</tt><strong>10</strong><tt>
</tt>11<tt>
</tt>12<tt>
</tt></p>

<p>  <span class="co">Basic</span> = <span class="co">Behavior</span>.create({<tt>
</tt>   onclick: function() {<tt>
</tt>    alert(<span class="s"><span class="dl">'</span><span class="k">woo</span><span class="dl">'</span></span>);<tt>
</tt>   }<tt>
</tt>  });<tt>
</tt><tt>
</tt>  <span class="co">SuppedUp</span> = <span class="co">Behavior</span>.create({<tt>
</tt>   onclick: function(<span class="gv">$super</span>) {<tt>
</tt>    alert(<span class="s"><span class="dl">'</span><span class="k">wee</span><span class="dl">'</span></span>);<tt>
</tt>    <span class="gv">$super</span>();<tt>
</tt>   }<tt>
</tt>  });</p></li>
</ul>


<p>Works really nicely.</p>

<ul>
<li><p>core behaviors : Remote and Observed are now moved into the lowpro core (you don't need to include the external files).</p></li>
<li><p>Event.addBehavior.reassignAfterAjax defaults to false. If you want re assign behaviors after an ajax call, you need to turn this option to true.</p></li>
<li><p>Event.addBehavior.reload(); added to reload/re assign behaviors. Very useful if you dynamically insert elements you want to observe!</p></li>
<li><p><a href="http://lowprojs.com">new website</a> has been set up and will contain documentation and tips - Full API docs coming soon.  There's also a dedicated <a href="http://groups.google.co.uk/group/low-pro">google group</a>.</p></li>
</ul>


<p>Here is a quick example with real life code. (which could be refactored, I know)</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;9&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;11&lt;tt&gt;
&lt;/tt&gt;12&lt;tt&gt;
&lt;/tt&gt;13&lt;tt&gt;
&lt;/tt&gt;14&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;15&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;16&lt;tt&gt;
&lt;/tt&gt;17&lt;tt&gt;
&lt;/tt&gt;18&lt;tt&gt;
&lt;/tt&gt;19&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;20&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;21&lt;tt&gt;
&lt;/tt&gt;22&lt;tt&gt;
&lt;/tt&gt;23&lt;tt&gt;
&lt;/tt&gt;24&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;25&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;26&lt;tt&gt;
&lt;/tt&gt;27&lt;tt&gt;
&lt;/tt&gt;28&lt;tt&gt;
&lt;/tt&gt;29&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;30&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;31&lt;tt&gt;
&lt;/tt&gt;32&lt;tt&gt;
&lt;/tt&gt;33&lt;tt&gt;
&lt;/tt&gt;34&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;35&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;36&lt;tt&gt;
&lt;/tt&gt;37&lt;tt&gt;
&lt;/tt&gt;38&lt;tt&gt;
&lt;/tt&gt;39&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;40&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;41&lt;tt&gt;
&lt;/tt&gt;42&lt;tt&gt;
&lt;/tt&gt;




&lt;span class="c"&gt;// Make sure the behaviors still work even after navigating to another page using the ajax navigation.&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;Event.addBehavior.reassignAfterAjax = &lt;span class="pc"&gt;true&lt;/span&gt;;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="c"&gt;// Behaviors&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;Event.addBehavior({&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="c"&gt;// Pagination links  &lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;div.pagination a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt; : Remote.&lt;span class="pt"&gt;Link&lt;/span&gt;,&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="c"&gt;// Reset the list when a user clicks on cancel.&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;a.cancel_button:click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt; : &lt;span class="r"&gt;function&lt;/span&gt;() {&lt;tt&gt;
&lt;/tt&gt;    $(&lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;list_of_things&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;).update(&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;);&lt;tt&gt;
&lt;/tt&gt;  },&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="c"&gt;// carousel navigation prev&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;a#carousel_prev:click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt; : &lt;span class="r"&gt;function&lt;/span&gt;() {&lt;tt&gt;
&lt;/tt&gt;    moveCarousel(&lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;prev&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;); &lt;span class="r"&gt;return&lt;/span&gt; &lt;span class="pc"&gt;false&lt;/span&gt;;&lt;tt&gt;
&lt;/tt&gt;  },&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="c"&gt;// carousel navigation next&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;a#carousel_next:click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt; : &lt;span class="r"&gt;function&lt;/span&gt;() {&lt;tt&gt;
&lt;/tt&gt;    moveCarousel(&lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;next&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;); &lt;span class="r"&gt;return&lt;/span&gt; &lt;span class="pc"&gt;false&lt;/span&gt;;&lt;tt&gt;
&lt;/tt&gt;  },&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;div.panel_pic:click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt; : &lt;span class="r"&gt;function&lt;/span&gt;() {&lt;tt&gt;
&lt;/tt&gt;    removePanelPic(&lt;span class="pc"&gt;this&lt;/span&gt;);&lt;tt&gt;
&lt;/tt&gt;  },&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;div.photo_from_row img:click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt; : &lt;span class="r"&gt;function&lt;/span&gt;() {&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="c"&gt;// Get the div holding the pic and use it as a target&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="r"&gt;var&lt;/span&gt; target = &lt;span class="pc"&gt;this&lt;/span&gt;.up();&lt;tt&gt;
&lt;/tt&gt;    addPicToPanel(target);&lt;tt&gt;
&lt;/tt&gt;    new Effect.Highlight(target);&lt;tt&gt;
&lt;/tt&gt;  }&lt;tt&gt;
&lt;/tt&gt;});&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="r"&gt;function&lt;/span&gt; addPicToPanel(target){&lt;tt&gt;
&lt;/tt&gt;  new Insertion.Bottom(&lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;control_panel_photos&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;&lt;div id='edit_&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;+ target.id +&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;' class='panel_pic'&gt;&lt;img class='panel_pic' src='&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt; +  target.immediateDescendants()[0].src + &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;'/&gt;&lt;/div&gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;);&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="c"&gt;// Reload the behaviors so the new inserted pic can be monitored &lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="c"&gt;// and the 'div.panel_pic:click' behavior can be triggered&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  Event.addBehavior.&lt;span class="fu"&gt;reload&lt;/span&gt;();&lt;tt&gt;
&lt;/tt&gt;}&lt;tt&gt;
&lt;/tt&gt;  
</code></pre>

<p>LowPro is a great way of keeping your code really clean and your views very accessible.</p>

<p>If you are interested in knowing more about UJS, come to our <a href="http://sdruby.com/">SDruby group meeting</a> on Dec 6 @ 7:30pm (<a href="http://tinyurl.com/2f486e">directions</a>). And if you don't care about UJS, come later to hear about Facebook API. Don't forger to bring your questions for our first <a href="http://groups.google.com/group/sdruby/browse_thread/thread/d488b70d67f84a5f#">Rails roundtable</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sexy Chart - The video]]></title>
    <link href="https://matt.aimonetti.net/posts/2007/11/20/sexy-chart-the-video/"/>
    <updated>2007-11-20T04:46:00-08:00</updated>
    <id>https://matt.aimonetti.net/posts/2007/11/20/sexy-chart-the-video</id>
    <content type="html"><![CDATA[<p>A bit more than a month ago I posted a <a href="http://railsontherun.com/2007/10/4/sexy-charts-in-less-than-5-minutes">tutorial</a> on how to use Flash with Rails to <a href="http://railsontherun.com/2007/10/4/sexy-charts-in-less-than-5-minutes">create some awesome/sexy graphs</a>.</p>

<p><img src="http://content.screencast.com/media/e0605640-1100-43dc-90f9-d8c2083c0f7c_74569570-772f-4886-b2ea-f305d1ede3aa_static_0_0_00000016.png" alt="chart" /></p>

<p>Since a lot of people seemed interested by the topic, the <a href="http://sdruby.com/">SDRuby</a> guys asked me to do a intro talk on how to create Sexy Charts with super sexy Rails.</p>

<p>In the mean time, a lot of people were asking for a example app to look at. People knowing me know that I'm quite lazy and I don't like repeating tasks. I therefore decided to kill 2 birds with one stone and wrote a demo app that I would use during my <a href="http://podcast.sdruby.com/2007/11/13/episode-037-sexy-charts">presentation</a></p>

<p>As I was writing the demo app, I quickly realized that my talk would be even sexier if I would show some best practices. After all, an introduction talk is meant to help newbies learning the tricks that will change them in ninjas!</p>

<p>Sexy charts are sexy now, but in 15 years they might not look so sexy anymore. However <a href="http://en.wikipedia.org/wiki/Behavior_driven_development">BDD</a> is super hot now and will always be sexy! (even though we'll probably adopt other even hotter approaches).</p>

<p>Based on the circumstances I decided that Sexy charts would become an excuse to show people how to do BDD using <a href="http://rspec.rubyforge.org">RSpec</a> and how to test a XML view  as described in <a href="http://railsontherun.com/2007/10/31/how-to-test-a-xml-builder-view">this previous post</a></p>

<p>During my presentation I totally forgot to show people what what kind of XML we were trying to feed amCharts, so here is the file:</p>

<p><a href="http://pastie.caboo.se/120055">http://pastie.caboo.se/120055</a></p>

<p>The code used in the presentation is also available <a href="http://railsontherun.com/assets/sexy_charts.zip">here</a></p>

<p>Presentation available <a href="http://podcast.sdruby.com/2007/11/13/episode-037-sexy-charts">here</a> (the sound is a bit saturated, sorry about that. Note that we made the video big enough so you can follow with the code if you don't understand my accent :) )</p>

<p>Feel free to watch the other <a href="http://podcast.sdruby.com/">SDRuby podcasts</a> or even better, <a href="http://feeds.feedburner.com/sdrbpodcast">subscribe to our feed</a>.</p>

<h2>Next SDRuby meeting will be Thursday, December 6 @ 7:30pm</h2>

<p>Location: <a href="http://tinyurl.com/2f486e">UCSD CS Building</a></p>

<p>We'll be talking about <a href="http://groups.google.com/group/sdruby/browse_thread/thread/d488b70d67f84a5f#">Unobtrusive Javascript</a>, the <a href="http://groups.google.com/group/sdruby/browse_thread/thread/d488b70d67f84a5f#">Facebook API</a>, and hosting our first Rails Roundtable.</p>

<h2>Newbies and experts welcome!</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XP by Ooochie]]></title>
    <link href="https://matt.aimonetti.net/posts/2007/11/14/xp-by-ooochie/"/>
    <updated>2007-11-14T21:33:00-08:00</updated>
    <id>https://matt.aimonetti.net/posts/2007/11/14/xp-by-ooochie</id>
    <content type="html"><![CDATA[<p><img src="http://integrumtech.com/images/emps/lindsay_bigger.jpg" alt="Lindsay" /></p>

<p><a href="http://ooochie.com">Lindsay</a> from the <a href="http://integrumtech.com">Integrum</a> hall of fame wrote 3 nice (short) articles about Extreme Programming (XP).</p>

<ul>
<li><p><a href="http://ooochie.com/2007/10/3/extreme-programming-part-1">XP part I - XP values </a></p></li>
<li><p><a href="http://ooochie.com/2007/10/10/extreme-programming-part-2">XP part II - XP principles</a></p></li>
<li><p><a href="http://ooochie.com/2007/10/27/extreme-programming-part-3">XP part III - practices</a></p></li>
</ul>


<p>I really enjoyed reading her posts and I can really recommend you spend few minutes going through her explanations.</p>

<p>If you are in San Diego, check the <a href="http://www.xpsd.org/cgi-bin/wiki">XP San Diego group</a>. Unfortunately, the XPSD group meets at the same time as the SDRuby group, but we'll try to work something out.</p>

<p>In the mean time, I hope to see <a href="http://ooochie.com">Ooochie </a> sharing more of her own experience with Extreme Programming.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSS feed issues]]></title>
    <link href="https://matt.aimonetti.net/posts/2007/11/06/rss-feed-issues/"/>
    <updated>2007-11-06T04:21:00-08:00</updated>
    <id>https://matt.aimonetti.net/posts/2007/11/06/rss-feed-issues</id>
    <content type="html"><![CDATA[<p>Few of you contacted me to let me know that my RSS feed was always getting reset up to few times a day. (Thanks <a href="http://blog.hasmanythrough.com/">Josh</a>).</p>

<p>It looks like a <a href="http://mephistoblog.com/">Mephisto</a> problem, so if you subscribed to the mephisto feed, please switch to <a href="http://feeds.feedburner.com/railsontherun">this</a> feed:</p>

<p><a href="http://feeds.feedburner.com/railsontherun">http://feeds.feedburner.com/railsontherun</a></p>

<p>I made sure to clean up the blog header so the old mephisto link won't show up.</p>

<p>Sorry about that and thanks for reading.</p>

<p>-Matt</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to test a XML builder view]]></title>
    <link href="https://matt.aimonetti.net/posts/2007/10/31/how-to-test-a-xml-builder-view/"/>
    <updated>2007-10-31T08:32:00-07:00</updated>
    <id>https://matt.aimonetti.net/posts/2007/10/31/how-to-test-a-xml-builder-view</id>
    <content type="html"><![CDATA[<p>As a good Rubyist, I do <a href="http://en.wikipedia.org/wiki/Test-driven_development">TDD</a> and even <a href="http://en.wikipedia.org/wiki/Behavior_driven_development">BDD</a>.</p>

<p>Since I've started using <a href="http://rspec.rubyforge.org/">RSpec</a> I've started writing tests against my views. RSpec makes things really easy and I've been enjoying testing my views.</p>

<p>I'm not the only one having fun, check <a href="http://www.robbyonrails.com/articles/2007/08/02/spec-your-views">this great post</a> from Mr <a href="http://www.planetargon.com/">Planet Argon</a> aka <a href="http://www.robbyonrails.com">Robby Russel</a></p>

<p>Recently I was working on implementing some <a href="http://railsontherun.com/2007/10/4/sexy-charts-in-less-than-5-minutes">Sexy Charts</a> and I was using a XML builder to create an XML view of for a controller. Since I wanted to be a good Rails Ninja and obey the BDD rules, I figured I needed to test my XML view. Making sure that the nodes and the attributes were properly created. Turned out that is wasn't too hard, there was many options but none were very well documented so I decided to write this quick tutorial.</p>

<h2>UPDATE 31 Oct 2007: After a comment from <a href="http://joshknowles.com">Josh Knowles</a>, I updated the tests to test with have_tags (built in RSpec) and hpricot.</h2>

<h2>Hpricot</h2>

<p><a href="http://code.whytheluckystiff.net/hpricot/">hpricot</a> is a awesome HTML parser perfect for <a href="http://en.wikipedia.org/wiki/Screen_scraping">screen scraping</a>. But wait, there's more to this awesome library, <a href="http://code.whytheluckystiff.net/hpricot/wiki/HpricotXML">hpricot can also parse XML</a>.</p>

<p>If you watched the excellent <a href="http://peepcode.com/products">RSpec peepcasts</a> you probably noticed that <a href="http://topfunky.com/">topfunky</a> aka <a href="http://geoffreygrosenbach.com/">Geoffrey Grosenbach</a> uses hpricot to test a remote API.</p>

<p>In our case, we'll use hpricot to test that our generated XML follows our expectations.</p>

<h2>XML Builder + RSpec</h2>

<p>Let's write a quick test to make sure our controller uses a XML builder view:</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;9&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;11&lt;tt&gt;
&lt;/tt&gt;12&lt;tt&gt;
&lt;/tt&gt;13&lt;tt&gt;
&lt;/tt&gt;14&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;15&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;16&lt;tt&gt;
&lt;/tt&gt;17&lt;tt&gt;
&lt;/tt&gt;




  describe &lt;span class="co"&gt;AveragesController&lt;/span&gt;, &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;handling GET /averages.xml&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;    before &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;      &lt;span class="co"&gt;Average&lt;/span&gt;.stub!(&lt;span class="sy"&gt;:find&lt;/span&gt;).and_return(&lt;span class="iv"&gt;@average&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;tt&gt;
&lt;/tt&gt;    &lt;span class="r"&gt;def&lt;/span&gt; &lt;span class="fu"&gt;do_get&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;      &lt;span class="iv"&gt;@request&lt;/span&gt;.env[&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;HTTP_ACCEPT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;] = &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;application/xml&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;      get &lt;span class="sy"&gt;:index&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;tt&gt;
&lt;/tt&gt;    it &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;should render the action using the XML builder&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;      do_get&lt;tt&gt;
&lt;/tt&gt;      response.should render_template(&lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;averages/index.xml.builder&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;
</code></pre>

<p>To make this example pass, we need to modify our rspec generated controller.</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;




  &lt;span class="r"&gt;def&lt;/span&gt; &lt;span class="fu"&gt;index&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="iv"&gt;@averages&lt;/span&gt; = &lt;span class="co"&gt;Average&lt;/span&gt;.find(&lt;span class="sy"&gt;:all&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;  &lt;tt&gt;
&lt;/tt&gt;    respond_to &lt;span class="r"&gt;do&lt;/span&gt; |format|&lt;tt&gt;
&lt;/tt&gt;      format.html &lt;span class="c"&gt;# index.html.erb&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;      format.xml  { render &lt;span class="sy"&gt;:action&lt;/span&gt; =&gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;index.xml.builder&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="sy"&gt;:layout&lt;/span&gt; =&gt; &lt;span class="pc"&gt;false&lt;/span&gt; }&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;
</code></pre>

<p>(Please note that I'm using Rails 2.0 and that's why I'm not using a .rxml view)</p>

<p>Here is what our XML file should end up looking like:</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;9&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;11&lt;tt&gt;
&lt;/tt&gt;12&lt;tt&gt;
&lt;/tt&gt;13&lt;tt&gt;
&lt;/tt&gt;14&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;15&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;16&lt;tt&gt;
&lt;/tt&gt;17&lt;tt&gt;
&lt;/tt&gt;18&lt;tt&gt;
&lt;/tt&gt;19&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;20&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;21&lt;tt&gt;
&lt;/tt&gt;22&lt;tt&gt;
&lt;/tt&gt;23&lt;tt&gt;
&lt;/tt&gt;24&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;25&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;26&lt;tt&gt;
&lt;/tt&gt;27&lt;tt&gt;
&lt;/tt&gt;28&lt;tt&gt;
&lt;/tt&gt;29&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;30&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;31&lt;tt&gt;
&lt;/tt&gt;32&lt;tt&gt;
&lt;/tt&gt;33&lt;tt&gt;
&lt;/tt&gt;34&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;35&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;36&lt;tt&gt;
&lt;/tt&gt;37&lt;tt&gt;
&lt;/tt&gt;38&lt;tt&gt;
&lt;/tt&gt;39&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;40&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;41&lt;tt&gt;
&lt;/tt&gt;42&lt;tt&gt;
&lt;/tt&gt;43&lt;tt&gt;
&lt;/tt&gt;44&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;45&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;46&lt;tt&gt;
&lt;/tt&gt;47&lt;tt&gt;
&lt;/tt&gt;48&lt;tt&gt;
&lt;/tt&gt;49&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;50&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;51&lt;tt&gt;
&lt;/tt&gt;52&lt;tt&gt;
&lt;/tt&gt;53&lt;tt&gt;
&lt;/tt&gt;54&lt;tt&gt;
&lt;/tt&gt;




  &lt;&lt;span class="i"&gt;?x&lt;/span&gt;ml version=&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;1.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt; encoding=&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;UTF-8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;?&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;chart&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;series&gt;&lt;tt&gt;
&lt;/tt&gt;      &lt;value xid=&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;&gt;&lt;span class="co"&gt;January&lt;/span&gt;&lt;&lt;span class="rx"&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;span class="k"&gt;value&gt;&lt;tt&gt;
&lt;/tt&gt;      &lt;value xid="1"&gt;February&lt;&lt;/span&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;/span&gt;value&gt;&lt;tt&gt;
&lt;/tt&gt;      &lt;value xid=&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;&gt;&lt;span class="co"&gt;March&lt;/span&gt;&lt;&lt;span class="rx"&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;span class="k"&gt;value&gt;&lt;tt&gt;
&lt;/tt&gt;      &lt;value xid="3"&gt;April&lt;&lt;/span&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;/span&gt;value&gt;&lt;tt&gt;
&lt;/tt&gt;      &lt;value xid=&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;&gt;&lt;span class="co"&gt;May&lt;/span&gt;&lt;&lt;span class="rx"&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;span class="k"&gt;value&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;      &lt;value xid="5"&gt;June&lt;&lt;/span&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;/span&gt;value&gt;&lt;tt&gt;
&lt;/tt&gt;      &lt;value xid=&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;6&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;&gt;&lt;span class="co"&gt;July&lt;/span&gt;&lt;&lt;span class="rx"&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;span class="k"&gt;value&gt;&lt;tt&gt;
&lt;/tt&gt;      &lt;value xid="7"&gt;August&lt;&lt;/span&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;/span&gt;value&gt;&lt;tt&gt;
&lt;/tt&gt;      &lt;value xid=&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;&gt;&lt;span class="co"&gt;September&lt;/span&gt;&lt;&lt;span class="rx"&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;span class="k"&gt;value&gt;&lt;tt&gt;
&lt;/tt&gt;      &lt;value xid="9"&gt;October&lt;&lt;/span&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;/span&gt;value&gt;&lt;tt&gt;
&lt;/tt&gt;      &lt;value xid=&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;10&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;&gt;&lt;span class="co"&gt;November&lt;/span&gt;&lt;&lt;span class="rx"&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;span class="k"&gt;value&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;      &lt;value xid="11"&gt;December&lt;&lt;/span&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;/span&gt;value&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;&lt;span class="rx"&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;span class="k"&gt;series&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;graphs&gt;&lt;tt&gt;
&lt;/tt&gt;      &lt;graph fill_alpha="50" color="#FF0000" fill_color="#CC0000" title="high"&gt;&lt;tt&gt;
&lt;/tt&gt;        &lt;value xid="0"&gt;65.1&lt;&lt;/span&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;/span&gt;value&gt;&lt;tt&gt;
&lt;/tt&gt;        &lt;value xid=&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;&gt;&lt;span class="fl"&gt;65.7&lt;/span&gt;&lt;&lt;span class="rx"&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;span class="k"&gt;value&gt;&lt;tt&gt;
&lt;/tt&gt;        &lt;value xid="2"&gt;64.9&lt;&lt;/span&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;/span&gt;value&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;        &lt;value xid=&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;&gt;&lt;span class="fl"&gt;66.7&lt;/span&gt;&lt;&lt;span class="rx"&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;span class="k"&gt;value&gt;&lt;tt&gt;
&lt;/tt&gt;        &lt;value xid="4"&gt;67.1&lt;&lt;/span&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;/span&gt;value&gt;&lt;tt&gt;
&lt;/tt&gt;        &lt;value xid=&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;&gt;&lt;span class="fl"&gt;69.3&lt;/span&gt;&lt;&lt;span class="rx"&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;span class="k"&gt;value&gt;&lt;tt&gt;
&lt;/tt&gt;        &lt;value xid="6"&gt;73.0&lt;&lt;/span&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;/span&gt;value&gt;&lt;tt&gt;
&lt;/tt&gt;        &lt;value xid=&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;7&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;&gt;&lt;span class="fl"&gt;74.8&lt;/span&gt;&lt;&lt;span class="rx"&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;span class="k"&gt;value&gt;&lt;tt&gt;
&lt;/tt&gt;        &lt;value xid="8"&gt;75.4&lt;&lt;/span&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;/span&gt;value&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;        &lt;value xid=&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;9&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;&gt;&lt;span class="fl"&gt;73.4&lt;/span&gt;&lt;&lt;span class="rx"&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;span class="k"&gt;value&gt;&lt;tt&gt;
&lt;/tt&gt;        &lt;value xid="10"&gt;68.9&lt;&lt;/span&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;/span&gt;value&gt;&lt;tt&gt;
&lt;/tt&gt;        &lt;value xid=&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;11&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;&gt;&lt;span class="fl"&gt;65.3&lt;/span&gt;&lt;&lt;span class="rx"&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;span class="k"&gt;value&gt;&lt;tt&gt;
&lt;/tt&gt;      &lt;&lt;/span&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;/span&gt;graph&gt;&lt;tt&gt;
&lt;/tt&gt;      &lt;graph fill_alpha=&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;50&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt; color=&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;#0000CC&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt; fill_color=&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;#0000CC&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt; title=&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;low&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;&gt;&lt;tt&gt;
&lt;/tt&gt;        &lt;value xid=&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;&gt;&lt;span class="fl"&gt;48.9&lt;/span&gt;&lt;&lt;span class="rx"&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;span class="k"&gt;value&gt;&lt;tt&gt;
&lt;/tt&gt;        &lt;value xid="1"&gt;50.7&lt;&lt;/span&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;/span&gt;value&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;        &lt;value xid=&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;&gt;&lt;span class="fl"&gt;52.9&lt;/span&gt;&lt;&lt;span class="rx"&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;span class="k"&gt;value&gt;&lt;tt&gt;
&lt;/tt&gt;        &lt;value xid="3"&gt;55.6&lt;&lt;/span&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;/span&gt;value&gt;&lt;tt&gt;
&lt;/tt&gt;        &lt;value xid=&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;&gt;&lt;span class="fl"&gt;59.2&lt;/span&gt;&lt;&lt;span class="rx"&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;span class="k"&gt;value&gt;&lt;tt&gt;
&lt;/tt&gt;        &lt;value xid="5"&gt;61.9&lt;&lt;/span&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;/span&gt;value&gt;&lt;tt&gt;
&lt;/tt&gt;        &lt;value xid=&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;6&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;&gt;&lt;span class="fl"&gt;65.7&lt;/span&gt;&lt;&lt;span class="rx"&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;span class="k"&gt;value&gt;&lt;tt&gt;
&lt;/tt&gt;        &lt;value xid="7"&gt;67.3&lt;&lt;/span&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;/span&gt;value&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;        &lt;value xid=&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;&gt;&lt;span class="fl"&gt;65.7&lt;/span&gt;&lt;&lt;span class="rx"&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;span class="k"&gt;value&gt;&lt;tt&gt;
&lt;/tt&gt;        &lt;value xid="9"&gt;61.0&lt;&lt;/span&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;/span&gt;value&gt;&lt;tt&gt;
&lt;/tt&gt;        &lt;value xid=&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;10&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;&gt;&lt;span class="fl"&gt;54.0&lt;/span&gt;&lt;&lt;span class="rx"&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;span class="k"&gt;value&gt;&lt;tt&gt;
&lt;/tt&gt;        &lt;value xid="11"&gt;48.7&lt;&lt;/span&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;/span&gt;value&gt;&lt;tt&gt;
&lt;/tt&gt;      &lt;&lt;span class="rx"&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;span class="k"&gt;graph&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;&lt;/span&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;/span&gt;graphs&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;&lt;span class="rx"&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;span class="k"&gt;chart&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;/span&gt;&lt;/span&gt;
</code></pre>

<p>Let's write some tests to make sure our view is ok:</p>

<p>index.xml.builder_spec.rb</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;9&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;11&lt;tt&gt;
&lt;/tt&gt;12&lt;tt&gt;
&lt;/tt&gt;13&lt;tt&gt;
&lt;/tt&gt;14&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;15&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;16&lt;tt&gt;
&lt;/tt&gt;17&lt;tt&gt;
&lt;/tt&gt;18&lt;tt&gt;
&lt;/tt&gt;19&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;20&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;21&lt;tt&gt;
&lt;/tt&gt;22&lt;tt&gt;
&lt;/tt&gt;23&lt;tt&gt;
&lt;/tt&gt;24&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;25&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;26&lt;tt&gt;
&lt;/tt&gt;27&lt;tt&gt;
&lt;/tt&gt;28&lt;tt&gt;
&lt;/tt&gt;29&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;30&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;31&lt;tt&gt;
&lt;/tt&gt;32&lt;tt&gt;
&lt;/tt&gt;33&lt;tt&gt;
&lt;/tt&gt;34&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;35&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;36&lt;tt&gt;
&lt;/tt&gt;37&lt;tt&gt;
&lt;/tt&gt;38&lt;tt&gt;
&lt;/tt&gt;39&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;40&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;41&lt;tt&gt;
&lt;/tt&gt;42&lt;tt&gt;
&lt;/tt&gt;43&lt;tt&gt;
&lt;/tt&gt;44&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;45&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;46&lt;tt&gt;
&lt;/tt&gt;47&lt;tt&gt;
&lt;/tt&gt;48&lt;tt&gt;
&lt;/tt&gt;49&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;50&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;51&lt;tt&gt;
&lt;/tt&gt;52&lt;tt&gt;
&lt;/tt&gt;53&lt;tt&gt;
&lt;/tt&gt;54&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;55&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;56&lt;tt&gt;
&lt;/tt&gt;57&lt;tt&gt;
&lt;/tt&gt;58&lt;tt&gt;
&lt;/tt&gt;59&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;60&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;61&lt;tt&gt;
&lt;/tt&gt;62&lt;tt&gt;
&lt;/tt&gt;63&lt;tt&gt;
&lt;/tt&gt;64&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;65&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;66&lt;tt&gt;
&lt;/tt&gt;67&lt;tt&gt;
&lt;/tt&gt;68&lt;tt&gt;
&lt;/tt&gt;69&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;70&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;71&lt;tt&gt;
&lt;/tt&gt;72&lt;tt&gt;
&lt;/tt&gt;73&lt;tt&gt;
&lt;/tt&gt;74&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;75&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;76&lt;tt&gt;
&lt;/tt&gt;77&lt;tt&gt;
&lt;/tt&gt;78&lt;tt&gt;
&lt;/tt&gt;79&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;80&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;81&lt;tt&gt;
&lt;/tt&gt;




require &lt;span class="co"&gt;File&lt;/span&gt;.dirname(&lt;span class="pc"&gt;__FILE__&lt;/span&gt;) + &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;/../../spec_helper&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;require &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;hpricot&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;describe &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;/averages/index.xml.builder&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  include &lt;span class="co"&gt;AveragesHelper&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;tt&gt;
&lt;/tt&gt;  before &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    average_1 = mock_model(&lt;span class="co"&gt;Average&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;    average_1.stub!(&lt;span class="sy"&gt;:month&lt;/span&gt;).and_return(&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;January&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;    average_1.stub!(&lt;span class="sy"&gt;:high&lt;/span&gt;).and_return(&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;74.5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;    average_1.stub!(&lt;span class="sy"&gt;:low&lt;/span&gt;).and_return(&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;61.5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;    average_2 = mock_model(&lt;span class="co"&gt;Average&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;    average_2.stub!(&lt;span class="sy"&gt;:month&lt;/span&gt;).and_return(&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;February&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;    average_2.stub!(&lt;span class="sy"&gt;:high&lt;/span&gt;).and_return(&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;82.5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;    average_2.stub!(&lt;span class="sy"&gt;:low&lt;/span&gt;).and_return(&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;71.5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;    assigns[&lt;span class="sy"&gt;:averages&lt;/span&gt;] = [average_1, average_2]&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  it &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;should render the months in the series&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    render &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;/averages/index.xml.builder&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    response.should have_tag(&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;January&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;    response.should have_tag(&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;February&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="c"&gt;# Same thing but with Hpricot&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    doc = &lt;span class="co"&gt;Hpricot&lt;/span&gt;.XML(response.body.to_s)&lt;tt&gt;
&lt;/tt&gt;    (doc/&lt;span class="sy"&gt;:value&lt;/span&gt;).first.inner_html.should == &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;January&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    (doc/&lt;span class="sy"&gt;:value&lt;/span&gt;)[&lt;span class="i"&gt;1&lt;/span&gt;].inner_html.should == &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;February&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;tt&gt;
&lt;/tt&gt;  it &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;should set the xid attributes for the series&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    render &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;/averages/index.xml.builder&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    response.should have_tag(&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;value[xid=0]:first-child&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;    response.should have_tag(&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;value[xid=1]:last-child&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="c"&gt;# Same thing but with Hpricot&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    doc = &lt;span class="co"&gt;Hpricot&lt;/span&gt;.XML(response.body.to_s)&lt;tt&gt;
&lt;/tt&gt;    (doc/&lt;span class="sy"&gt;:value&lt;/span&gt;).first[&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;xid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;].should == &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    (doc/&lt;span class="sy"&gt;:value&lt;/span&gt;).last[&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;xid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;].should == &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;tt&gt;
&lt;/tt&gt;  it &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;should have 2 graphs and they should have a title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    render &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;/averages/index.xml.builder&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    response.should have_tag(&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;graph[title=high]:first-child&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;    response.should have_tag(&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;graph[title=low]:last-child&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="c"&gt;# Same thing but with Hpricot&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    doc = &lt;span class="co"&gt;Hpricot&lt;/span&gt;.XML(response.body.to_s)&lt;tt&gt;
&lt;/tt&gt;    (doc/&lt;span class="sy"&gt;:graph&lt;/span&gt;).size.should == &lt;span class="i"&gt;2&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    (doc/&lt;span class="sy"&gt;:graph&lt;/span&gt;).first[&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;].should == &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;high&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    (doc/&lt;span class="sy"&gt;:graph&lt;/span&gt;).last[&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;].should == &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;low&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;tt&gt;
&lt;/tt&gt;  it &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;should have a color set by graph&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    render &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;/averages/index.xml.builder&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    response.should have_tag(&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;graph[color]:first-child&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;    response.should have_tag(&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;graph[color]:last-child&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;    response.should have_tag(&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;graph[fill_color]:last-child&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;    response.should have_tag(&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;graph[fill_alpha]:last-child&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="c"&gt;# Same thing but with Hpricot&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    doc = &lt;span class="co"&gt;Hpricot&lt;/span&gt;.XML(response.body.to_s)&lt;tt&gt;
&lt;/tt&gt;    (doc/&lt;span class="sy"&gt;:graph&lt;/span&gt;).first[&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;].should_not be_nil&lt;tt&gt;
&lt;/tt&gt;    (doc/&lt;span class="sy"&gt;:graph&lt;/span&gt;).last[&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;].should_not be_nil&lt;tt&gt;
&lt;/tt&gt;    (doc/&lt;span class="sy"&gt;:graph&lt;/span&gt;).last[&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;fill_color&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;].should_not be_nil&lt;tt&gt;
&lt;/tt&gt;    (doc/&lt;span class="sy"&gt;:graph&lt;/span&gt;).last[&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;fill_alpha&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;].should_not be_nil&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;tt&gt;
&lt;/tt&gt;  it &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;should have an xid for each graph value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    render &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;/averages/index.xml.builder&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    response.should have_tag(&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;graph &gt; value[xid=0]:first-child&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="c"&gt;# Same thing but with Hpricot&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    doc = &lt;span class="co"&gt;Hpricot&lt;/span&gt;.XML(response.body.to_s)&lt;tt&gt;
&lt;/tt&gt;    (doc/&lt;span class="sy"&gt;:graph&lt;/span&gt;/&lt;span class="sy"&gt;:value&lt;/span&gt;).first[&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;xid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;].should == &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;tt&gt;
&lt;/tt&gt;  it &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;should have the high average as values of the first graph&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    render &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;/averages/index.xml.builder&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    response.should have_tag(&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;graph &gt; value:first-child&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;74.5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="c"&gt;# Same thing but with Hpricot&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    doc = &lt;span class="co"&gt;Hpricot&lt;/span&gt;.XML(response.body.to_s)&lt;tt&gt;
&lt;/tt&gt;    (doc/&lt;span class="sy"&gt;:graph&lt;/span&gt;/&lt;span class="sy"&gt;:value&lt;/span&gt;).first.inner_html.should == &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;74.5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;tt&gt;
&lt;/tt&gt;&lt;span class="r"&gt;end&lt;/span&gt;
</code></pre>

<p>The first thing you must do (after installing the hpricot gem) is to require hpricot in your test:</p>

<pre><code>&lt;tt&gt;
&lt;/tt&gt;




  require &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;hpricot&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;
</code></pre>

<p>Now that hpricot is created we can use it to parse the response and check against our expectations.</p>

<p>(we create mock objects to pass to the view so we know exactly what to expect and we separate Model/Controller/Views tests)</p>

<p>To check against our response we have to use hpricot parser syntax. It might look at bit funny at first, but believe me it's really easy once you get it.</p>

<p>But first, let's parse the view:</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;




&lt;span class="c"&gt;# Render the mocked up data using the xml view&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;render &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;/averages/index.xml.builder&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="c"&gt;# Load and parse the view response body:&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;doc = &lt;span class="co"&gt;Hpricot&lt;/span&gt;.XML(response.body.to_s)  
</code></pre>

<p>Let's look at the first test:</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;




  it &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;should render the months in the series&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    render &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;/averages/index.xml.builder&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    doc = &lt;span class="co"&gt;Hpricot&lt;/span&gt;.XML(response.body.to_s)&lt;tt&gt;
&lt;/tt&gt;    (doc/&lt;span class="sy"&gt;:value&lt;/span&gt;).first.inner_html.should == &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;January&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    (doc/&lt;span class="sy"&gt;:value&lt;/span&gt;)[&lt;span class="i"&gt;1&lt;/span&gt;].inner_html.should == &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;February&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;
</code></pre>

<p>(doc/:value) returns all the value nodes, we take the first one and extract its content. We expect that it would match the name of the month for the first average.</p>

<p>Let's now look at another test:</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;




  it &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;should have 2 graphs and they should have a title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    render &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;/averages/index.xml.builder&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    doc = &lt;span class="co"&gt;Hpricot&lt;/span&gt;.XML(response.body.to_s)&lt;tt&gt;
&lt;/tt&gt;    (doc/&lt;span class="sy"&gt;:graph&lt;/span&gt;).size.should == &lt;span class="i"&gt;2&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    (doc/&lt;span class="sy"&gt;:graph&lt;/span&gt;).first[&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;].should == &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;high&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    (doc/&lt;span class="sy"&gt;:graph&lt;/span&gt;).last[&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;].should == &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;low&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;
</code></pre>

<p>The thing to look at here is the fact that we are checking on the node's attribute "title". Really simple syntax and clean test, isn't it?</p>

<p>Finally let's look at the last example:</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;




  it &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;should have the high average as values of the first graph&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    render &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;/averages/index.xml.builder&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    doc = &lt;span class="co"&gt;Hpricot&lt;/span&gt;.XML(response.body.to_s)&lt;tt&gt;
&lt;/tt&gt;    (doc/&lt;span class="sy"&gt;:graph&lt;/span&gt;/&lt;span class="sy"&gt;:value&lt;/span&gt;).first.inner_html.should == &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;74.5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;
</code></pre>

<p>We are checking that the content of the first value node nested inside a graph node is equal to 74.5 which is the high average for the first month.</p>

<p>In practice, you probably won't write all these tests at once, but anyway, let's look at our XML builder which will make all these tests pass:</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;9&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;11&lt;tt&gt;
&lt;/tt&gt;12&lt;tt&gt;
&lt;/tt&gt;13&lt;tt&gt;
&lt;/tt&gt;14&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;15&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;16&lt;tt&gt;
&lt;/tt&gt;17&lt;tt&gt;
&lt;/tt&gt;18&lt;tt&gt;
&lt;/tt&gt;19&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;20&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;21&lt;tt&gt;
&lt;/tt&gt;22&lt;tt&gt;
&lt;/tt&gt;23&lt;tt&gt;
&lt;/tt&gt;




xml.instruct! &lt;span class="sy"&gt;:xml&lt;/span&gt;, &lt;span class="sy"&gt;:version&lt;/span&gt;=&gt;&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;1.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="sy"&gt;:encoding&lt;/span&gt;=&gt;&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;UTF-8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;xml.chart &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  xml.series &lt;span class="r"&gt;do&lt;/span&gt;    &lt;tt&gt;
&lt;/tt&gt;    &lt;span class="iv"&gt;@averages&lt;/span&gt;.each_with_index &lt;span class="r"&gt;do&lt;/span&gt; |average, index|&lt;tt&gt;
&lt;/tt&gt;      xml.value average.month, &lt;span class="sy"&gt;:xid&lt;/span&gt; =&gt; index&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;tt&gt;
&lt;/tt&gt;  xml.graphs &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    xml.graph &lt;span class="sy"&gt;:title&lt;/span&gt; =&gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;high&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="sy"&gt;:color&lt;/span&gt; =&gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;#FF0000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="sy"&gt;:fill_alpha&lt;/span&gt; =&gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;50&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="sy"&gt;:fill_color&lt;/span&gt; =&gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;#CC0000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;      &lt;span class="iv"&gt;@averages&lt;/span&gt;.each_with_index &lt;span class="r"&gt;do&lt;/span&gt; |average, index|&lt;tt&gt;
&lt;/tt&gt;        xml.value average.high, &lt;span class="sy"&gt;:xid&lt;/span&gt; =&gt; index&lt;tt&gt;
&lt;/tt&gt;      &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;tt&gt;
&lt;/tt&gt;    xml.graph &lt;span class="sy"&gt;:title&lt;/span&gt; =&gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;low&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="sy"&gt;:color&lt;/span&gt; =&gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;#0000CC&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="sy"&gt;:fill_alpha&lt;/span&gt; =&gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;50&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="sy"&gt;:fill_color&lt;/span&gt; =&gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;#0000CC&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;      &lt;span class="iv"&gt;@averages&lt;/span&gt;.each_with_index &lt;span class="r"&gt;do&lt;/span&gt; |average, index|&lt;tt&gt;
&lt;/tt&gt;        xml.value average.low, &lt;span class="sy"&gt;:xid&lt;/span&gt; =&gt; index&lt;tt&gt;
&lt;/tt&gt;      &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;tt&gt;
&lt;/tt&gt;&lt;span class="r"&gt;end&lt;/span&gt;
</code></pre>

<p>Hpricot is a <em>really</em> nice tool which can make your BDD life much easier. And even if you don't do BDD/TDD yet, it's a great way to verify that any XML data you receive/generate is valid.</p>

<h2>Happy testing</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leopard - Autotest - Growl Notification]]></title>
    <link href="https://matt.aimonetti.net/posts/2007/10/31/leopard-autotest/"/>
    <updated>2007-10-31T00:10:00-07:00</updated>
    <id>https://matt.aimonetti.net/posts/2007/10/31/leopard-autotest</id>
    <content type="html"><![CDATA[<p><img src="http://farm3.static.flickr.com/2176/1805711983_8d7811d890.jpg?v=0" alt="mac os X leopard" /></p>

<p>As many of you know, I'm a great <a href="http://rspec.rubyforge.org/">RSpec</a> and <a href="http://www.zenspider.com/ZSS/Products/ZenTest/">autotest</a> fan.</p>

<p>Last night, I upgraded my MacBook to from Tiger to Leopard and I everything went very well... apart that Autotest stopped notifying me using Growl when my tests pass or fail :(</p>

<p>Growl itself works fine, even when using spaces.</p>

<p>However <em><a href="http://www.growl.info/documentation/growlnotify.php">growlNotify</a></em>, the <a href="http://www.growl.info/">Growl</a> plugin used by autotest <em>doesn't seem to be Leopard compatible yet</em>.</p>

<p>Just thought you guys should know that before upgrading.</p>

<p><img src="http://www.growl.info/img/growlicon.png" alt="growl" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Freelancing - tools]]></title>
    <link href="https://matt.aimonetti.net/posts/2007/10/19/freelancing-tools/"/>
    <updated>2007-10-19T08:02:00-07:00</updated>
    <id>https://matt.aimonetti.net/posts/2007/10/19/freelancing-tools</id>
    <content type="html"><![CDATA[<p>In my <a href="http://railsontherun.com/2007/10/15/freelancing">last post</a> I talked about freelancing. Somebody asked for more details about my "agile tool set" so here I am trying to explain more in details what tools I use.</p>

<h2>Environment</h2>

<p><img src="http://farm3.static.flickr.com/2204/1628322525_27ca6a2a6e_m.jpg" alt="mb" />
Most of my work is done on my 13.3" sexy black macbook</p>

<p>Tiny and powerful, this laptop is a key element to my productivity. Because of it's size, I take my MB everywhere. However when at home, the macbook is hooked up to my 22" LCD screen.</p>

<p><img src="http://farm3.static.flickr.com/2169/1628495345_aae2d8fbbb_m.jpg" alt="chair" /> I also recently acquired a great office chair that seriously makes a huge difference.</p>

<p>Wilson probably didn't that in mind when he asked about my tool set, however a great work environment will help you working better, seriously!</p>

<h2>Software</h2>

<p>In the list of more traditional tools, I use <a href="http://lighthouseapp.com">Lighthouse</a> quite a lot. Check <a href="http://railsontherun.com/2007/7/28/why-you-should-seriously-consider-using-lighthouse">this old post</a> to know why I chose to use lighthouse.</p>

<p>Iterations, user stories and acceptance criteria are managed in <a href="http://lighthouseapp.com">Lighthouse</a>.</p>

<p><img src="http://docs.google.com/images/doclist/logo_docs.gif" alt="gdocs" />
However, most of my clients have a hard time defining user stories. To help them in this process, we often end up using <a href="http://docs.google.com">Google docs</a>.
GDocs comes handy when a client tries to describe a feature and he ends up telling me: that's too complicated to explain, I'll write a document and email it to you.</p>

<p>That's usually a sign that the client can't break the feature in small chunks or that there's some confusion somewhere.
Few hours later, I receive a long Word document or Excel Spreadsheet explaining in details how things are intended to work. After a quick import in <a href="http://docs.google.com">Google Docs</a> I use my favorite feature: "Insert Comments"</p>

<p>Here is a screenshot of a comment I made on a client's document:
<img src="http://farm3.static.flickr.com/2071/1629695728_fb31d71f58_o.jpg" alt="comment" /></p>

<p>GDocs lets you have multiple people editing the same document at the same time. While I'm adding the comments, my client answers them and tries to clarify the document. The client can save any revision he wants and export it back to MS Word if he really wants.</p>

<p>I then extract user stories directly in Google Docs. Often the client quickly understands how things work and will write the user stories and acceptance criteria himself. People are familiar with the page format and often feel more comfortable in this environment. I personally move the user stories in Lighthouse and we then only deal with lighthouse (until a new set of feature requires a virtual drawing board)</p>

<h2>Communication</h2>

<p>I have a daily standup with each client. You have a variety of alarm system you can use to make sure you are not running late. I don't have any preferences, but setting up a cellphone reminder can be handy if you have a tendency to forget.</p>

<p>To call my clients I use a VOIP service. Actually I have 2 VOIP services, one for my home line and I use Skype for work. (different providers)</p>

<p><img src="http://c.skype.com/i_preairlift/logos/skype_logo.png" alt="skype" />  provides me with a local phone number, voice mail and unlimited calls in the USA and Canada for something like $90/year.</p>

<p><a href="http://skype.com">Skype</a> is also great for video conferences or simple conference calls with many people. Clients know that they can ping me via Skype if they need to. (only during work hours)  (I use skype with a Bluetooth headset so I can move around when I talk :))</p>

<h2>Time tracking</h2>

<p>I tried different solutions but I wasn't pleased. I couldn't find a simple solution properly handling time tracking <em>and</em> invoicing.
I ended up writing a custom solution perfect for my needs: when you want something done right, do it yourself :)</p>

<p><img src="http://farm3.static.flickr.com/2232/1629130839_4c89f066e7_o.jpg" alt="pt" /></p>

<p>I have simple ajax timers I can start and stop easily (I'm planning on writing a widget too).
Finally, the app generates PDF invoices (using logo etc..) which makes my life easier when it's invoice time :)</p>

<h2>Payment</h2>

<p><img src="https://checkout.google.com/buyer/images/google_checkout.gif" alt="checkout" />
Talking about invoices. I generate invoices once a week and the payment request is made via Google Checkout. Google doesn't charge for transfer fee until the end of the year. Clients might be used to paying by check but seriously it's a real pain. Checks take forever to arrive, they take forever to clear and banks mess up way too often. I personally prefer to manage my finances online and I think the small fee is worth it.</p>

<p>That's all I can think of for now. Feel free to let us know what great tool you use.</p>

<p>-Matt</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Freelancing]]></title>
    <link href="https://matt.aimonetti.net/posts/2007/10/15/freelancing/"/>
    <updated>2007-10-15T01:04:00-07:00</updated>
    <id>https://matt.aimonetti.net/posts/2007/10/15/freelancing</id>
    <content type="html"><![CDATA[<p>I've been a freelancer/consultant/contractor/mercenary for many years now. However, until now, I used to do that on the side. Few months ago, after thinking a lot about it, I finally decided that freelancing was what I wanted to do. I left my job and started my own adventure.</p>

<p>The first reason for this switch was a desire to be <em>more involved</em> with my clients' projects and accept bigger projects. Then there was the obvious <em>flexibility</em> brought by this new position (I can now work wherever I want, usually on my deck). Finally I have to admit that <em>financially</em> things are better now.</p>

<p>This post won't be about helping you deciding if you should freelance or not. I'm just curious to know how you work, how do you deal with your clients, deadlines, payments etc...
So instead of simply asking, I'll explain <em>how I do it</em> and I hope that <em>you will share your ways of doing it</em>.</p>

<h1>How do I do it?</h1>

<h2>Choose a client</h2>

<p>Clients are the heart of your business. At first, you might be worried not to find enough work and you will take any project. <em>WRONG!</em> this is the worst thing you could do. You would not take any job just because they are willing to give you a salary, would you?</p>

<p><img src="http://farm2.static.flickr.com/1112/1465525142_0f9256d5d3_m.jpg" alt="http://flickr.com/photos/14304964@N05/1465525142/" /></p>

<h2>I. find a match</h2>

<p>Personally, I believe in <a href="http://en.wikipedia.org/wiki/Agile_software_development">Agile methodologies</a>, regular code release, iteration planning, daily stand-ups, test driven development, continuous integration... This is what I call my <em>'work values'</em>.
 If I see that a potential client's <em>'work values'</em> are opposite to mine. For instance, he might like the <a href="http://en.wikipedia.org/wiki/Waterfall_model">waterfall</a> approach, writing a lot of documentation before we start coding, doesn't see the essential need for a good test suite, then I know we would not be a good match.</p>

<p>It doesn't mean that I'm right and she/he's wrong. It simply means we don't work the same way and that a work experience together might be frustrating for both of us.</p>

<p>A lot of clients don't know how to approach software development and they might not have strong 'values' yet. In this case, I explain how I work and I try to read their reaction. Sometimes, you can agree on a 'trial period'. Being freelance, you are more than likely free to quite whenever you want. However, you'll find out that is not a good experience for neither of you.</p>

<h2>II. Check on the project</h2>

<p><img src="http://farm1.static.flickr.com/32/51227603_aa2e2da9e8_m.jpg" alt="http://flickr.com/photos/scutter/51227603/" /></p>

<p>My first rule when it comes to choosing a project: <em>if it doesn't interest me, I don't take it</em>.</p>

<p>It's very simple: to do a good job, I need to be passionate. If the project is boring or simply doesn't attract me, I know I won't be able to serve my client the best I could.</p>

<p>Second rule: <em>Code review</em></p>

<p>Often, you might be contacted by people who already started a project but for some reason need you to take the project over. That happens often when a client tries to save money by taking the cheapest guys around (often overseas) and realize it doesn't work for them. Or maybe, your client's main developer had to leave and they need your help. Finally you have the case of a project growing and they simply need more people to work on it.</p>

<p>I always ask for a code review before I accept a job. Why? Simply because a CEO can tell how much he believes in Agile software development, that he has a portrait of <a href="http://www.loudthinking.com/">David Heinemeier Hansson</a> above his bed and that he knows <a href="http://gettingreal.37signals.com/">getting real</a> by heart, a quick look at the code will reveal the truth. It will also tell you a lot about the other guys who worked on the project.</p>

<ul>
<li><p><em>testing suite</em>: do they have any? Rspec? Unit test? Selenium? What's the test coverage? Do the tests pass?</p></li>
<li><p><em>test readability</em>: Did the developers try to be clever and the code is very obscure?</p></li>
<li><p><em>best practices</em>: Did the team follow most of the best practices? Why not?</p></li>
<li><p><em>reinventing the wheel</em>: Did they make a proper usage of plugins/gems.</p></li>
<li><p><em>living on the Edge</em>: Are they running on Rails Edge? Would it help?</p></li>
</ul>


<p>I usually don't worry much about how they deploy, since that can be changed easily.</p>

<p>Looking at your code review I try to evaluate few things:</p>

<ul>
<li><p>what's the team's tech level?</p></li>
<li><p>what kind of pressure the administrative people put on the tech team?</p></li>
<li><p>what do the teach value?</p></li>
<li><p>do I need to rewrite a lot of code?</p></li>
<li><p>do I seriously need to improve the test coverage?</p></li>
<li><p>is it a real mess and I'd better give up before starting?</p></li>
</ul>


<p>A few months ago, <a href="http://iamruinous.com">Jade Meskill</a> recommended I read <a href="http://www.amazon.com/Dip-Little-Book-Teaches-Stick/dp/1591841666/">"the dip"</a> from <a href="http://sethgodin.typepad.com/">Seth Godin</a>. If you haven't read it yet, get a copy. It's a very simple and obvious book but it explains very well why and when you should give up and when you keep on struggling. And that's exactly what we are trying to do. We want to evaluate the effort needed to succeed (if it's doable).</p>

<h2>III. Build a relationship</h2>

<p><img src="http://farm2.static.flickr.com/1218/1412917482_45b1a1ceaf_m.jpg" alt="http://flickr.com/photos/senor_codo/1412917482/" /></p>

<p>Business is all about relationship. Both your client and you have needs. By creating a relationship you will try to fulfill most of your needs. Let's look at an evaluation of my professional needs:</p>

<ul>
<li><p>I need to be challenged</p></li>
<li><p>I need communication</p></li>
<li><p>I need guidance</p></li>
<li><p>I need deadlines</p></li>
<li><p>I need results</p></li>
<li><p>I need to be valued</p></li>
</ul>


<p>And here is what I cam up with when I tried to estimate my client needs:</p>

<ul>
<li><p>he needs business value</p></li>
<li><p>he needs to feel special</p></li>
<li><p>he needs to be reassured</p></li>
<li><p>he needs to keep control over the finance</p></li>
<li><p>he needs to make sure he doesn't waste money/time with me</p></li>
<li><p>he needs to plan the future</p></li>
</ul>


<p>There we go, we have the base of our relationship. As long as most of our needs are fulfilled, the relationship should be strong.</p>

<p>As you can see by looking at the list above, the client needs to be convinced that I am the perfect fit they were looking for. On my side, I want them to realize that we are lucky to work together and I want them to value me.</p>

<p>Money makes the world go round, especially in a business relationship and especially in the Western world.
Your rates are a simple way to say, this is what I'm worth. If you are willing to pay my rates, you are valuing me. Obviously rates can be negotiated but be careful, somehow they will always represent your value.</p>

<p>So how do I build this relationship?</p>

<ul>
<li>be frank, open and transparent.</li>
</ul>


<p>I don't want my clients to feel that I'm hiding things from them. For instance, I'm always running two projects at the same time and I make that really clear at the beginning before I start working on a contract. My client A knows that I will work 17-20 hours a week on his project and 17-20 hours on a different project. If I have to miss one of our stand-up, I usually explain why.</p>

<p><em>Trust is very important when you are an outsider and even more when you work remotely.</em></p>

<ul>
<li>Provide visible business value on a weekly basis.</li>
</ul>


<p>At least once a week, I have a <em>quick demo</em> with my clients and if possible their co-workers. This demo is really important for a client since he can then <em>visualize</em> the business value added to his product. He will feel <em>in control</em>, <em>reassured</em> and will be able to <em>evaluate the situation</em> and <em>plan the future</em> of the product. Usually clients who worked with other developers/methodologies also <em>feel special</em> since they would usually only see business value at the end of the project. By the way, the demo is usually done on the production application so we are talking about real business value.</p>

<ul>
<li>Make the client the center of the decision making process</li>
</ul>


<p>In my usual process, we have a special meeting every monday. During this meeting, we plan the work for the coming week/iteration. I simply help the client breaking down his tasks in small chunks that we could handle in a week. During this meeting we also agree on this iteration priorities. In general we already created a queue/backlogs of tasks that need to be executed. I simply let the client make his choice to what is <em>really</em> important. In general a client wants everything done right away exactly how he has it mind. Well... the reality is <em>really</em> different. A client doesn't have to understand the concept of polymorphic association to make decisions. Actually, he doesn't care how you do it as long as it's well done. However, your client should know how to prioritize things, he probably already does that all day long.
Converting the technical details into simple concepts that make sense to both you and the client will seriously help the project. I don't have to worry about delays, I don't make these decisions, my client does that for me and he likes having control over budget/time line.</p>

<p><em>To sum-up, I believe that by choosing a client that matches my view of software development, a project that sounds interesting to me and building a strong relationship, we will have a good end result and a win-win situation.</em></p>

<h2>What about you? How do you manage your projects, clients? Do you agree with me, or do you think I'm idealist and in the real world things don't happen like that?</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sexy charts in less than 5 minutes]]></title>
    <link href="https://matt.aimonetti.net/posts/2007/10/04/sexy-charts-in-less-than-5-minutes/"/>
    <updated>2007-10-04T03:06:00-07:00</updated>
    <id>https://matt.aimonetti.net/posts/2007/10/04/sexy-charts-in-less-than-5-minutes</id>
    <content type="html"><![CDATA[<h2>NOV 04 Update: demo app now available <a href="http://railsontherun.com/assets/sexy_charts.zip">there</a>. Sexy charts BDD style presentation at the <a href="http://sdruby.com">SDRuby group</a> to be posted soon on <a href="http://podcast.sdruby.com/">video podcast</a></h2>

<p><a href="http://railsontherun.com/2007/9/27/ajax-pagination-in-less-than-5-minutes">Last time</a>, in our <em>'do it in less than 5 minutes'</em> series, we saw how to add <a href="http://railsontherun.com/2007/9/27/ajax-pagination-in-less-than-5-minutes">quickly and simply add Ajax pagination</a>.</p>

<p>This time we'll see how to add some sexy/fancy charts to your rails app.</p>

<p>The goal is to end up with something like:</p>

<p><img src="http://farm2.static.flickr.com/1322/1480241002_e67637a659_o.png" alt="chart" /></p>

<p><img src="http://farm2.static.flickr.com/1414/1479377969_805d23a55d_o.png" alt="charts2" /></p>

<h2>Various options</h2>

<p>You might have heard or even tried solution such as <a href="http://nubyonrails.com/pages/gruff">Gruff</a> or <a href="http://www.jfree.org/jfreechart/">JFreeChart</a>.</p>

<p>While these solutions are great, they are certainly a pain in the butt. Gruff requires RMagick (avoid RMagick as much as can) and creates static files (a real pain when your graphs change all the time) JFreeChart on the other hand requires Java, Java skills and I hate <a href="http://wiki.rubyonrails.org/rails/pages/HowtoGenerateJFreeCharts">the way</a> you create graphs:</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;




  &lt;span class="r"&gt;def&lt;/span&gt; &lt;span class="fu"&gt;CreateChart&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;         pipe = &lt;span class="co"&gt;IO&lt;/span&gt;.popen &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;java -cp C:&lt;/span&gt;&lt;span class="ch"&gt;\\&lt;/span&gt;&lt;span class="k"&gt;InstantRails&lt;/span&gt;&lt;span class="ch"&gt;\\&lt;/span&gt;&lt;span class="k"&gt;rails_apps&lt;/span&gt;&lt;span class="ch"&gt;\\&lt;/span&gt;&lt;span class="k"&gt;project&lt;/span&gt;&lt;span class="ch"&gt;\\&lt;/span&gt;&lt;span class="k"&gt;jfree&lt;/span&gt;&lt;span class="ch"&gt;\\&lt;/span&gt;&lt;span class="k"&gt;src;C:&lt;/span&gt;&lt;span class="ch"&gt;\\&lt;/span&gt;&lt;span class="k"&gt;InstantRails&lt;/span&gt;&lt;span class="ch"&gt;\\&lt;/span&gt;&lt;span class="k"&gt;rails_apps&lt;/span&gt;&lt;span class="ch"&gt;\\&lt;/span&gt;&lt;span class="k"&gt;project&lt;/span&gt;&lt;span class="ch"&gt;\\&lt;/span&gt;&lt;span class="k"&gt;jfree&lt;/span&gt;&lt;span class="ch"&gt;\\&lt;/span&gt;&lt;span class="k"&gt;lib&lt;/span&gt;&lt;span class="ch"&gt;\\&lt;/span&gt;&lt;span class="k"&gt;jcommon-1.0.0-rc1.jar;C:&lt;/span&gt;&lt;span class="ch"&gt;\\&lt;/span&gt;&lt;span class="k"&gt;InstantRails&lt;/span&gt;&lt;span class="ch"&gt;\\&lt;/span&gt;&lt;span class="k"&gt;rails_apps&lt;/span&gt;&lt;span class="ch"&gt;\\&lt;/span&gt;&lt;span class="k"&gt;project&lt;/span&gt;&lt;span class="ch"&gt;\\&lt;/span&gt;&lt;span class="k"&gt;jfree&lt;/span&gt;&lt;span class="ch"&gt;\\&lt;/span&gt;&lt;span class="k"&gt;lib&lt;/span&gt;&lt;span class="ch"&gt;\\&lt;/span&gt;&lt;span class="k"&gt;jfreechart-1.0.0-rc1.jar; CreateChart&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;tt&gt;
&lt;/tt&gt;         pipe.close&lt;tt&gt;
&lt;/tt&gt;         redirect_to &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;/graph/report&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;tt&gt;
&lt;/tt&gt;      &lt;span class="r"&gt;end&lt;/span&gt;
</code></pre>

<p>Anyway, none of these solutions would let us create our charts in less than 5 minutes so let's cut the story short. The best solution IMHO is to use Flash. But <em>wait</em>, you don't need to know ActionScript or to own a license of Flash or Flex, we have libraries available for us to use without any Flash knowledge :)</p>

<p><a href="http://www.maani.us/xml_charts/index.php?menu=Gallery">XML/SWF</a> is cool Flash library which should fulfill our needs, you can even find a <a href="http://ziya.liquidrail.com/">rails plugin</a> to make things easier.</p>

<h2>amCharts</h2>

<p>But, to be honest I'd like to have something a bit "cleaner/sexy/fancy" and easier to setup.  So we're going to use <a href="http://www.amcharts.com/">amCharts</a>  Don't get me wrong, XML/SWF is a great library and you can make your graphs look nice (but you have to pay for support).
Since we are running out of time let's see how to implement a nice graph using <em>my</em> favorite library.</p>

<p><img src="http://www.amcharts.com/images/logo.gif" alt="amcharts" /></p>

<p>[DISCLAIMER: amCharts is <em>NOT open source</em> and <em>NOT free</em>. But, it's <em>cheap</em> (85 euros per site) especially when you think of how much time you will save. AND there is a <em>FREE version</em>. The Free version is the same as the full version but with a link back to amcharts.com]</p>

<h2>Setup</h2>

<p>Let's go ahead and download one of the package: <a href="http://www.amcharts.com/column/download/">http://www.amcharts.com/column/download/</a> for instance.</p>

<p>Unpack the files and put them in their own folder in your public folder.
Make sure you have the .swf file (amcolumn.swf for instance), a XML settings file and the fonts folder.
(You might want to also create an empty amcharts_key.txt in the same folder since the plugin tries to load the key and you don't want to pollute your logs.)</p>

<h2>Usage</h2>

<p>Now you need to understand how amCharts works.</p>

<p>After being loaded, amCharts expects a datastream. The datastream is then parsed and displayed as a chart.
You can modify the aspect of any chart by changing its settings.
Settings are set at runtime and/or in a setting file.</p>

<p>Great! I won't cover the settings file. It's a well documented XML file you just copied in your public folder. (or check the documentation)</p>

<p>What we want to focus on, is the <em>datastream</em>. Basically we just need to create a XML file that can be parsed by amCharts.</p>

<p>Let's imagine that we have a reports_controller.rb file  We want to display the population of the cities in California.</p>

<p>let's add a new action to render our XML file:</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;




  &lt;span class="r"&gt;def&lt;/span&gt; &lt;span class="fu"&gt;population&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="iv"&gt;@cities&lt;/span&gt; = &lt;span class="co"&gt;City&lt;/span&gt;.find(&lt;span class="sy"&gt;:all&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="iv"&gt;@population_data_link&lt;/span&gt; = formatted_population_reports_url(&lt;span class="sy"&gt;:xml&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;    respond_to &lt;span class="r"&gt;do&lt;/span&gt; |format|&lt;tt&gt;
&lt;/tt&gt;      format.html&lt;tt&gt;
&lt;/tt&gt;      format.xml  { render &lt;span class="sy"&gt;:action&lt;/span&gt; =&gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;population.xml.builder&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="sy"&gt;:layout&lt;/span&gt; =&gt; &lt;span class="pc"&gt;false&lt;/span&gt; }&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;
</code></pre>

<p>(notice that I'm using rails 2.0 and that's why my XML template is not RXML)</p>

<p>As you can see, we have 2 values: @cities and @population_data_link</p>

<p>@cities contains all the City records, including their population etc..</p>

<p>@population_data_link contains the url to retrieve the datastream.</p>

<p>If you wonder how I got this url? I'm simply using a named route defined in my routes.rb:</p>

<pre><code>&lt;tt&gt;
&lt;/tt&gt;




  map.resources &lt;span class="sy"&gt;:reports&lt;/span&gt;, &lt;span class="sy"&gt;:collection&lt;/span&gt; =&gt; {&lt;span class="sy"&gt;:population&lt;/span&gt; =&gt; &lt;span class="sy"&gt;:get&lt;/span&gt;}
</code></pre>

<p>(note that you don't need to create a restful route for that, a simple named route would have worked too)</p>

<h2>Flash detection</h2>

<p>Since we are going to use Flash, we want to make sure that people have the Flash plugin installed on their browser. For that we will use <a href="http://blog.deconcept.com/swfobject/">swfobject</a>. Simply make sure to add swfobject.js (available in any amChart package) to your public/javascript folder. Then make sure you linked the javascript in your header:</p>

<pre><code>&lt;tt&gt;
&lt;/tt&gt;




  &lt;%= javascript_include_tag &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;swfobject&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;%&gt;&lt;/span&gt;&lt;/span&gt;
</code></pre>

<p>We now need to create our 2 views: <em>population.html.erb</em> and <em>population.xml.builder</em></p>

<h2>population.html.erb</h2>

<p>Basically, this view only loads amCharts and provides it with the details of the datastream:</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;9&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;11&lt;tt&gt;
&lt;/tt&gt;12&lt;tt&gt;
&lt;/tt&gt;13&lt;tt&gt;
&lt;/tt&gt;14&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;15&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;16&lt;tt&gt;
&lt;/tt&gt;




  &lt;div id=&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;population_chart&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;class&lt;/span&gt;=&lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;chart&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;strong&gt;&lt;span class="co"&gt;Text&lt;/span&gt; displayed &lt;span class="r"&gt;when&lt;/span&gt; the user doesn&lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;t have Flash. You might want to display a simple table with the population, search engines and visitor without flash would love that.&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;p&gt; To see this page properly, you need to upgrade your Flash Player, please visit the Adobe web site&lt;/p&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;/div&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;script type="text/javascript"&gt;&lt;tt&gt;
&lt;/tt&gt;    // &lt;![CDATA[    &lt;tt&gt;
&lt;/tt&gt;    var so = new SWFObject("/amcolumn/amcolumn.swf", "population_chart", "800", "380", "8", "#000000");&lt;tt&gt;
&lt;/tt&gt;    so.addVariable("path", "/amcolumn/");&lt;tt&gt;
&lt;/tt&gt;    so.addVariable("settings_file", escape("/amcolumn/column_settings.xml"));&lt;tt&gt;
&lt;/tt&gt;    so.addVariable("data_file", escape("&lt;%= @population_data_link %&gt;"));&lt;tt&gt;
&lt;/tt&gt;    so.addVariable("additional_chart_settings", "&lt;settings&gt;&lt;labels&gt;&lt;label&gt;&lt;x&gt;250&lt;/x&gt;&lt;y&gt;25&lt;/y&gt;&lt;text_size&gt;18&lt;/text_size&gt;&lt;text&gt;&lt;![CDATA[&lt;b&gt;California Population as of &lt;%= Time.now.to_s(:db) %&gt;&lt;/b&gt;]]&gt;&lt;/text&gt;&lt;/label&gt;&lt;/labels&gt;&lt;/settings&gt;");&lt;tt&gt;
&lt;/tt&gt;    so.addVariable("preloader_color", "#000000");&lt;tt&gt;
&lt;/tt&gt;    so.write("population_chart");&lt;tt&gt;
&lt;/tt&gt;    // ]]&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;/script&gt;&lt;/span&gt;&lt;/span&gt;
</code></pre>

<p>As you can see, we have a div called population_chart. This div is replaced at load time by the Flash object if the visitor has Flash setup locally. Think about providing some data in case the user doesn't have Flash.</p>

<p>The rest is simple Javascript. I unpacked the amchart column lib in mypublic/amcolumn folder and that's why I setup the path as "amcolumn"</p>

<pre><code>&lt;tt&gt;
&lt;/tt&gt;




  so.addVariable(&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;/amcolumn/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;);
</code></pre>

<p>My settings file is called column_settings.xml :</p>

<pre><code>&lt;tt&gt;
&lt;/tt&gt;




  so.addVariable(&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;settings_file&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;, escape(&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;/amcolumn/column_settings.xml&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;));
</code></pre>

<p>and the most important part:</p>

<pre><code>&lt;tt&gt;
&lt;/tt&gt;




  so.addVariable(&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;data_file&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;, escape(&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;&lt;%= @population_data_link %&gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;));
</code></pre>

<p>Finally, I added some dynamic settings just to show you how easy it is:</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;




  so.addVariable(&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;additional_chart_settings&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;,&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;&lt;settings&gt;&lt;labels&gt;&lt;label&gt;&lt;x&gt;250&lt;/x&gt;&lt;y&gt;25&lt;/y&gt;&lt;text_size&gt;18&lt;/text_size&gt;&lt;text&gt;&lt;![CDATA[&lt;b&gt;California Population as of &lt;%= Time.now.to_s(:db) %&gt;&lt;/b&gt;]]&gt;&lt;/text&gt;&lt;/label&gt;&lt;/labels&gt;&lt;/settings&gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;);
</code></pre>

<p>Ok, let's now create our XML view:</p>

<h2>population.xml.builder</h2>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;9&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;11&lt;tt&gt;
&lt;/tt&gt;12&lt;tt&gt;
&lt;/tt&gt;13&lt;tt&gt;
&lt;/tt&gt;14&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;15&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;16&lt;tt&gt;
&lt;/tt&gt;17&lt;tt&gt;
&lt;/tt&gt;18&lt;tt&gt;
&lt;/tt&gt;19&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;20&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;21&lt;tt&gt;
&lt;/tt&gt;22&lt;tt&gt;
&lt;/tt&gt;23&lt;tt&gt;
&lt;/tt&gt;24&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;25&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;26&lt;tt&gt;
&lt;/tt&gt;




  xml.instruct! &lt;span class="sy"&gt;:xml&lt;/span&gt;, &lt;span class="sy"&gt;:version&lt;/span&gt;=&gt;&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;1.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="sy"&gt;:encoding&lt;/span&gt;=&gt;&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;UTF-8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  xml.chart &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="c"&gt;# xml.message "You can broadcast any message to chart from data XML file", :bg_color =&gt; "#FFFFFF", :text_color =&gt; "#000000"&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    xml.series &lt;span class="r"&gt;do&lt;/span&gt;    &lt;tt&gt;
&lt;/tt&gt;      &lt;span class="iv"&gt;@cities&lt;/span&gt;.each_with_index &lt;span class="r"&gt;do&lt;/span&gt; |city, index|&lt;tt&gt;
&lt;/tt&gt;        xml.value city.name, &lt;span class="sy"&gt;:xid&lt;/span&gt; =&gt; index&lt;tt&gt;
&lt;/tt&gt;      &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;    xml.graphs &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;     &lt;span class="c"&gt;#the gid is used in the settings file to set different settings just for this graph&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;      xml.graph &lt;span class="sy"&gt;:gid&lt;/span&gt; =&gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;population&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;        &lt;span class="iv"&gt;@cities&lt;/span&gt;.each_with_index &lt;span class="r"&gt;do&lt;/span&gt; |city, index|&lt;tt&gt;
&lt;/tt&gt;          population = city.population&lt;tt&gt;
&lt;/tt&gt;          &lt;span class="r"&gt;case&lt;/span&gt; population&lt;tt&gt;
&lt;/tt&gt;            &lt;span class="c"&gt;# When the population is &gt; 1 million, show the bar in red/pink&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;            &lt;span class="r"&gt;when&lt;/span&gt; &gt; &lt;span class="i"&gt;100000&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;              xml.value value, &lt;span class="sy"&gt;:xid&lt;/span&gt; =&gt; index, &lt;span class="sy"&gt;:color&lt;/span&gt; =&gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;#ff43a8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="sy"&gt;:gradient_fill_colors&lt;/span&gt; =&gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;#960040,#ff43a8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="sy"&gt;:description&lt;/span&gt; =&gt; level&lt;tt&gt;
&lt;/tt&gt;            &lt;span class="r"&gt;else&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;              xml.value value, &lt;span class="sy"&gt;:xid&lt;/span&gt; =&gt; index, &lt;span class="sy"&gt;:color&lt;/span&gt; =&gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;#00C3C6&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="sy"&gt;:gradient_fill_colors&lt;/span&gt; =&gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;#009c9d,#00C3C6&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="sy"&gt;:description&lt;/span&gt; =&gt; level&lt;tt&gt;
&lt;/tt&gt;            &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;        &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;      &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;
</code></pre>

<p>Nothing fancy, we first created a series with all the city names:</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;




  xml.series &lt;span class="r"&gt;do&lt;/span&gt;    &lt;tt&gt;
&lt;/tt&gt;    &lt;span class="iv"&gt;@cities&lt;/span&gt;.each_with_index &lt;span class="r"&gt;do&lt;/span&gt; |city, index|&lt;tt&gt;
&lt;/tt&gt;      xml.value city.name, &lt;span class="sy"&gt;:xid&lt;/span&gt; =&gt; index&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;
</code></pre>

<p>Then we created another node with the values for each city.
Since it would be cool to display some bars in a different color, we used a case-switch statement:</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;9&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;11&lt;tt&gt;
&lt;/tt&gt;12&lt;tt&gt;
&lt;/tt&gt;




    xml.graph &lt;span class="sy"&gt;:gid&lt;/span&gt; =&gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;population&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;      &lt;span class="iv"&gt;@cities&lt;/span&gt;.each_with_index &lt;span class="r"&gt;do&lt;/span&gt; |city, index|&lt;tt&gt;
&lt;/tt&gt;        population = city.population&lt;tt&gt;
&lt;/tt&gt;        &lt;span class="r"&gt;case&lt;/span&gt; population&lt;tt&gt;
&lt;/tt&gt;          &lt;span class="c"&gt;# When the population is &gt; 1 million, show the bar in red/pink&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;          &lt;span class="r"&gt;when&lt;/span&gt; &gt; &lt;span class="i"&gt;100000&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;            xml.value value, &lt;span class="sy"&gt;:xid&lt;/span&gt; =&gt; index, &lt;span class="sy"&gt;:color&lt;/span&gt; =&gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;#ff43a8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="sy"&gt;:gradient_fill_colors&lt;/span&gt; =&gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;#960040,#ff43a8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="sy"&gt;:description&lt;/span&gt; =&gt; level&lt;tt&gt;
&lt;/tt&gt;          &lt;span class="r"&gt;else&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;            xml.value value, &lt;span class="sy"&gt;:xid&lt;/span&gt; =&gt; index, &lt;span class="sy"&gt;:color&lt;/span&gt; =&gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;#00C3C6&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="sy"&gt;:gradient_fill_colors&lt;/span&gt; =&gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;#009c9d,#00C3C6&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="sy"&gt;:description&lt;/span&gt; =&gt; level&lt;tt&gt;
&lt;/tt&gt;          &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;      &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="r"&gt;end&lt;/span&gt;
</code></pre>

<p>Depending on what you want to display, you might need to have different colors or a different tooltip text, or load an animation or image...  and as you can see, it's <em>REALLY</em> easy.</p>

<p>Got to http://yoursite.com/reports/population to enjoy your new fancy graph.</p>

<h2>That's it, you are done!</h2>

<p>Time to tweak your settings file to make your graph look <em>awesome</em>.
Since you now have a lot of free time, you can start re-factoring your code and make sure you have a good test coverage.</p>

<p>Good luck!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ajax Pagination in less than 5 minutes]]></title>
    <link href="https://matt.aimonetti.net/posts/2007/09/27/ajax-pagination-in-less-than-5-minutes/"/>
    <updated>2007-09-27T03:40:00-07:00</updated>
    <id>https://matt.aimonetti.net/posts/2007/09/27/ajax-pagination-in-less-than-5-minutes</id>
    <content type="html"><![CDATA[<h2>updated Nov 26 to reflect the recent low pro changes. (please use low pro 0.5 and Prototype 1.6)</h2>

<p>Recently one of my client asked me to add 'ajax' pagination to his application. His site already had a very nice pagination using the excellent <a href="http://plugins.require.errtheblog.com/browser/will_paginate">will_paginate</a> from <a href="http://www.workingwithrails.com/person/2764-mislav-marohni">Mislav</a> and the guys(PJ &amp; Chris) from <a href="http://errtheblog.com/">err the blog</a> but since my client had a special need where he had to have Ajax.</p>

<p>It took me <strong>virtually no time to convert the standard pagination into an Ajax navigation</strong> while still degrading gracefully.(it works even without Javascript)</p>

<p>I really enjoy using will_paginate, it's very well written and the authors keep up with the <a href="http://err.lighthouseapp.com/projects/466-plugins/tickets?q=tagged%3Awill_paginate">bugs</a> and <a href="http://err.lighthouseapp.com/projects/466-plugins/tickets?q=tagged%3Awill_paginate">new features</a>.</p>

<h2>Start by installing will_paginate:</h2>

<pre><code>&lt;code&gt;ruby script/plugin install svn://errtheblog.com/svn/plugins/will_paginate
&lt;/code&gt;
</code></pre>

<h2>Then go watch the <a href="http://railscasts.com/episodes/51">Railcast screencast</a> about will paginate.</h2>

<p>Once you have your pagination working, we will do some '<a href="http://en.wikipedia.org/wiki/Progressive_enhancement">progressive enhancement</a>'.</p>

<p>What we want is to <strong>add a behavior to the pagination link</strong>. The behavior would make the same call than the normal link but via an ajax(Javascript) call.</p>

<h2>Add lowpro</h2>

<p>To do that, you simply need to add the excellent <a href="http://www.danwebb.net/lowpro">'lowpro'</a> Prototype extension from <a href="http://www.danwebb.net">Dan Webb</a></p>

<p>You can get the files directly from the <a href="http://svn.danwebb.net/external/lowpro/trunk/dist/lowpro.js">lowpro's repository</a>.</p>

<p>Add <a href="http://svn.danwebb.net/external/lowpro/trunk/dist/lowpro.js">lowpro.js</a> to your public/javascript folder.</p>

<p>Don't forget to include the javascript in your page. (</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;




&lt;tt&gt;
&lt;/tt&gt;  &lt;%= javascript_include_tag &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;lowpro&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;%&gt;&lt;/span&gt;&lt;span class="k"&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;/span&gt;&lt;/span&gt;
</code></pre>

<h2>Create a behavior</h2>

<p>Now open your application.js file (or whichever Javascript file you're using) and add the following:</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;




&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="co"&gt;Event&lt;/span&gt;.addBehavior.reassignAfterAjax = &lt;span class="pc"&gt;true&lt;/span&gt;;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="co"&gt;Event&lt;/span&gt;.addBehavior({&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;div.pagination a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt; : &lt;span class="co"&gt;Remote&lt;/span&gt;.&lt;span class="co"&gt;Link&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  })&lt;tt&gt;
&lt;/tt&gt;
</code></pre>

<p>Refresh your cache, reload your page, and test the link. It will probably look like it doesn't do anything but if you are using <a href="http://www.getfirebug.com/">firebug</a> or if you are checking your logs, you'll notice something happened. The problem is that we didn't tell our action to send an Ajax response so we get the html full page all over again.</p>

<h2>Setup a response for javascript requests</h2>

<p>Got to your action handling the pagination and let's setup a response for Javascript:</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;9&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;11&lt;tt&gt;
&lt;/tt&gt;12&lt;tt&gt;
&lt;/tt&gt;




&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;def&lt;/span&gt; &lt;span class="fu"&gt;index&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="iv"&gt;@photos&lt;/span&gt; = &lt;span class="co"&gt;Photo&lt;/span&gt;.paginate(&lt;span class="sy"&gt;:all&lt;/span&gt;, &lt;span class="sy"&gt;:conditions&lt;/span&gt; =&gt; [&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;photos.user_id = ?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;, current_user.id], &lt;span class="sy"&gt;:page&lt;/span&gt; =&gt; params[&lt;span class="sy"&gt;:page&lt;/span&gt;])&lt;tt&gt;
&lt;/tt&gt;    respond_to &lt;span class="r"&gt;do&lt;/span&gt; |format|&lt;tt&gt;
&lt;/tt&gt;      format.html &lt;span class="c"&gt;# index.html.erb&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;      format.js &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;        render &lt;span class="sy"&gt;:update&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt; |page|&lt;tt&gt;
&lt;/tt&gt;          page.replace_html &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;photos&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="sy"&gt;:partial&lt;/span&gt; =&gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;photos&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;        &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;      &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;
</code></pre>

<p>Perfect! Now when a visitor clicks on my pagination links, only the photos are paginated, the rest of the page stays the same. Note that my navigation bar is inside the partial so it gets 'updated' after a visitor clicks on any pagination link.</p>

<h2>Read more and convert to UJS (unobtrusive javascript)</h2>

<p>Read more about <a href="http://jlaine.net/2007/8/3/from-rails-ajax-helpers-to-low-pro-part-i">UJS</a> and think about replacing all your nasty inline javascript snippets by pretty behaviors :) (Think about stopping using the obtrusive rails helpers)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[my Rails contribution mentioned in DHH keynote]]></title>
    <link href="https://matt.aimonetti.net/posts/2007/09/19/my-rails-contribution-mentioned-in-dhh-keynote/"/>
    <updated>2007-09-19T02:36:00-07:00</updated>
    <id>https://matt.aimonetti.net/posts/2007/09/19/my-rails-contribution-mentioned-in-dhh-keynote</id>
    <content type="html"><![CDATA[<p>That's kind of cool, I was reading a <a href="http://casperfabricius.com/blog/2007/09/18/railsconf2007-dhh/">post</a> about DHH Keynote at RailsConf Europe when I realized that DHH mentioned one of my contribution to Rails Edge.</p>

<p>"small, but to me significant improvement has also found its way to Rails 2.0: You can now create the needed databases with a rake command. By running this command, all referenced databases in your database.yml will be created"</p>

<pre><code>&lt;tt&gt;
&lt;/tt&gt;




rake db&lt;span class="sy"&gt;:create&lt;/span&gt;&lt;span class="sy"&gt;:all&lt;/span&gt;
</code></pre>

<p>I'm glad to see that my contribution is appreciated, as a reminder you also have the following options:</p>

<p>Only create your current environment database (can be useful to bootstrap your application):</p>

<pre><code>&lt;tt&gt;
&lt;/tt&gt;




rake db&lt;span class="sy"&gt;:create&lt;/span&gt;
</code></pre>

<p>Another command I use often in development is:</p>

<pre><code>&lt;tt&gt;
&lt;/tt&gt;




rake db&lt;span class="sy"&gt;:reset&lt;/span&gt;
</code></pre>

<p>It simply drops your current environment database, re create it and migrate it :)
(btw, your new database will be utf-8 by default)</p>

<p>Here is a list of the new rake tasks:</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;




rake db&lt;span class="sy"&gt;:create&lt;/span&gt;                       &lt;span class="c"&gt;# Create the local database defined in config/database.yml for the current RAILS_ENV&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;rake db&lt;span class="sy"&gt;:create&lt;/span&gt;&lt;span class="sy"&gt;:all&lt;/span&gt;                   &lt;span class="c"&gt;# Create all the local databases defined in config/database.yml&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;rake db&lt;span class="sy"&gt;:drop&lt;/span&gt;                         &lt;span class="c"&gt;# Drops the database for the current environment&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;rake db&lt;span class="sy"&gt;:reset&lt;/span&gt;                         &lt;span class="c"&gt;# Drops, creates and then migrates the database for the current environment. Target specific version with VERSION=x&lt;/span&gt;
</code></pre>

<p>Read DHH Keynote summary <a href="http://casperfabricius.com/blog/2007/09/18/railsconf2007-dhh/">there</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ambition, why should you care?]]></title>
    <link href="https://matt.aimonetti.net/posts/2007/09/16/ambition-why-should-you-care/"/>
    <updated>2007-09-16T01:51:00-07:00</updated>
    <id>https://matt.aimonetti.net/posts/2007/09/16/ambition-why-should-you-care</id>
    <content type="html"><![CDATA[<p><img src="http://errtheblog.com/static/images/ambition-tower.png" alt="ambition" /></p>

<p>By now, you should have heard about <a href="http://errtheblog.com/post/10722">ambition</a> if not <a href="http://errtheblog.com/post/11998">read the latest post from the author</a>.</p>

<p><strong>Ambition has a simple goal: making you stop writing SQL in your queries and only stick to Ruby. (who cares if you use ActiveRecord, Sequel, DataMapper or another ORM)</strong></p>

<p>I'm so used to the ActiveRecord way of querying the database that I was not fully convinced that Ambition would help me in my daily tasks. I still gave it a try:</p>

<h2>Testing Ambition</h2>

<pre><code>&lt;code&gt;$ sudo gem install ambition -y
&lt;/code&gt;
</code></pre>

<p>Started my console</p>

<pre><code>&lt;code&gt;$ script/console
&lt;/code&gt;
</code></pre>

<p>and required Ambition</p>

<pre><code>&lt;code&gt;require 'ambition'
&lt;/code&gt;
</code></pre>

<p>I started by doing a query the AR way:</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;




 &lt;span class="co"&gt;Photo&lt;/span&gt;.find(&lt;span class="sy"&gt;:all&lt;/span&gt;, &lt;span class="sy"&gt;:conditions&lt;/span&gt; =&gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;photos.title IS NULL AND photos.width &gt; 250 &lt;tt&gt;
&lt;/tt&gt;AND photos.height &gt; 200 AND users.name = 'test'&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="sy"&gt;:include&lt;/span&gt; =&gt; &lt;span class="sy"&gt;:user&lt;/span&gt;) 
</code></pre>

<p>And I converted it into an Ambition call:</p>

<pre><code>&lt;tt&gt;
&lt;/tt&gt;




&lt;span class="co"&gt;Photo&lt;/span&gt;.select {|p| p.title == &lt;span class="pc"&gt;nil&lt;/span&gt; &amp;&amp; p.width &gt; &lt;span class="i"&gt;250&lt;/span&gt; &amp;&amp; p.height &gt; &lt;span class="i"&gt;200&lt;/span&gt;  &amp;&amp; p.user.name == &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;}.entries
</code></pre>

<p>145 vs 102 keystrokes. 30% less typing with Ambition! I don't know about you, but I REALLY prefer the Ruby only query, much cleaner and much "DRYer". However, that's not always true:</p>

<pre><code>&lt;tt&gt;
&lt;/tt&gt;




&lt;span class="co"&gt;Photo&lt;/span&gt;.find_by_title(&lt;span class="pc"&gt;nil&lt;/span&gt;)
</code></pre>

<p>(24chars)</p>

<pre><code>&lt;tt&gt;
&lt;/tt&gt;




&lt;span class="co"&gt;Photo&lt;/span&gt;.detect{|p| p.title == &lt;span class="pc"&gt;nil&lt;/span&gt;}
</code></pre>

<p> (32 chars)</p>

<p>But what's going on behind the scene? Do we have the exact same SQL query sent to our DB?</p>

<p>Well, Ambition doesn't generate any SQL, it uses AR to do so. You want to make sure Ambition is not messing with you, try that:</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;




 &gt;&gt; &lt;span class="co"&gt;Photo&lt;/span&gt;.select {|p| p.title == &lt;span class="pc"&gt;nil&lt;/span&gt; &amp;&amp; p.width &gt; &lt;span class="i"&gt;250&lt;/span&gt; &amp;&amp; p.height &gt; &lt;span class="i"&gt;200&lt;/span&gt;  &amp;&amp; p.user.name == &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;}.to_hash&lt;tt&gt;
&lt;/tt&gt; =&gt; {&lt;span class="sy"&gt;:conditions&lt;/span&gt;=&gt;&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;(photos.`title` IS NULL AND (photos.`width` &gt; 250 AND (photos.`height` &gt; 200 AND users.name = 'test')))&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="sy"&gt;:include&lt;/span&gt;=&gt;[&lt;span class="sy"&gt;:user&lt;/span&gt;]}
</code></pre>

<p>That's pretty hot. Especially when you have to use eager loading!</p>

<p>Obviously you can still do stuff like that:</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;




&lt;span class="co"&gt;Photo&lt;/span&gt;.select {|p| p.title == &lt;span class="pc"&gt;nil&lt;/span&gt; &amp;&amp; p.width &gt; &lt;span class="i"&gt;250&lt;/span&gt; &amp;&amp; p.height &gt; &lt;span class="i"&gt;200&lt;/span&gt;  &amp;&amp; p.user.name == &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;}.each &lt;span class="r"&gt;do&lt;/span&gt; |photo|&lt;tt&gt;
&lt;/tt&gt; puts photo.filename&lt;tt&gt;
&lt;/tt&gt;&lt;span class="r"&gt;end&lt;/span&gt;
</code></pre>

<p>(note the query will only be made once)</p>

<p>Another cool thing, is to do simple sorting:</p>

<pre><code>&lt;tt&gt;
&lt;/tt&gt;




&gt;&gt; &lt;span class="co"&gt;Photo&lt;/span&gt;.select {|p| p.title == &lt;span class="pc"&gt;nil&lt;/span&gt; &amp;&amp; p.user.name == &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;}.sort_by { |p| [p.created_at, -p.size] }
</code></pre>

<p>creates the following:</p>

<pre><code>&lt;tt&gt;
&lt;/tt&gt;




=&gt; {&lt;span class="sy"&gt;:order&lt;/span&gt;=&gt;&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;photos.created_at, photos.size DESC&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="sy"&gt;:conditions&lt;/span&gt;=&gt;&lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;(photos.`title` IS NULL AND users.name = 'test')&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="sy"&gt;:include&lt;/span&gt;=&gt;[&lt;span class="sy"&gt;:user&lt;/span&gt;]}
</code></pre>

<p>or</p>

<pre><code>&lt;tt&gt;
&lt;/tt&gt;




=&gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;SELECT * FROM photos JOIN user WHERE (photos.`title` IS NULL AND users.name = 'test') ORDER BY photos.created_at, photos.size DESC&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;
</code></pre>

<p>That's cool, and you can still sort on relationships:</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;




&gt;&gt; &lt;span class="co"&gt;Photo&lt;/span&gt;.select {|p| p.title == &lt;span class="pc"&gt;nil&lt;/span&gt; }.sort_by { |p| p.user.name }&lt;tt&gt;
&lt;/tt&gt;=&gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;SELECT * FROM photos JOIN user WHERE photos.`title` IS NULL ORDER BY users.name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;&lt;span class="rx"&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;span class="k"&gt;macro:code &gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;tt&gt;
&lt;/tt&gt;Or directly on the model:&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;macro:code lang="ruby"&gt;&gt;&gt; Photo.sort_by(&amp;:title)&lt;tt&gt;
&lt;/tt&gt;=&gt; "SELECT * FROM photos ORDER BY photos.title"&lt;/span&gt;&lt;/span&gt;
</code></pre>

<p>To finish, another detail which makes Ambition a great library</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;




&gt;&gt; &lt;span class="co"&gt;Photo&lt;/span&gt;.any? {|p| p.title =~ &lt;span class="rx"&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;span class="k"&gt;ambition&lt;/span&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;/span&gt; }&lt;tt&gt;
&lt;/tt&gt;=&gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;SELECT count(*) AS count_all FROM photos WHERE (photos.`title` REGEXP 'ambition')&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;tt&gt;
&lt;/tt&gt;=&gt; &lt;span class="pc"&gt;true&lt;/span&gt;
</code></pre>

<p>And if you were worried that it wouldn't work with utf8, check this out:</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;




&gt;&gt; &lt;span class="co"&gt;Photo&lt;/span&gt;.any? {|p| p.title == &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;ÃÂ©cole&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;}&lt;tt&gt;
&lt;/tt&gt;=&gt; &lt;span class="co"&gt;SET&lt;/span&gt; &lt;span class="co"&gt;NAMES&lt;/span&gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;utf8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;=&gt; &lt;span class="co"&gt;SET&lt;/span&gt; &lt;span class="co"&gt;SQL_AUTO_IS_NULL&lt;/span&gt;=&lt;span class="i"&gt;0&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;=&gt; &lt;span class="co"&gt;SHOW&lt;/span&gt; &lt;span class="co"&gt;FIELDS&lt;/span&gt; &lt;span class="co"&gt;FROM&lt;/span&gt; photos&lt;tt&gt;
&lt;/tt&gt;=&gt; &lt;span class="co"&gt;SELECT&lt;/span&gt; count(*) &lt;span class="co"&gt;AS&lt;/span&gt; count_all &lt;span class="co"&gt;FROM&lt;/span&gt; photos &lt;span class="co"&gt;WHERE&lt;/span&gt; (photos.`title&lt;span class="sh"&gt;&lt;span class="dl"&gt;`&lt;/span&gt;&lt;span class="k"&gt; = 'ÃÂ©cole') &lt;tt&gt;
&lt;/tt&gt;=&gt; false&lt;/span&gt;&lt;/span&gt;
</code></pre>

<h2>Limitations</h2>

<p>The only limitation I found in Ambition is that Ruby code won't work in the block, for instance:</p>

<pre><code>&lt;tt&gt;
&lt;/tt&gt;




&gt;&gt; &lt;span class="co"&gt;Photo&lt;/span&gt;.select {|p| p.title == &lt;span class="pc"&gt;nil&lt;/span&gt; &amp;&amp; p.created_at &lt; &lt;span class="i"&gt;1&lt;/span&gt;.week.ago &amp;&amp; p.user.name == &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;}.entries
</code></pre>

<p>won't work at the moment. To inspect what's going simply try:</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;




&gt;&gt; &lt;span class="co"&gt;Photo&lt;/span&gt;.select {|p| p.title == &lt;span class="pc"&gt;nil&lt;/span&gt; &amp;&amp; p.created_at &lt; &lt;span class="i"&gt;1&lt;/span&gt;.week.ago &amp;&amp; p.user.name == &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;}.to_sql&lt;tt&gt;
&lt;/tt&gt;=&gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;SELECT * FROM photos JOIN user WHERE (photos.`title` IS NULL AND (photos.`created_at` &lt; 1.`week`.`ago` AND users.name = 'test'))&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;
</code></pre>

<p>You can see that <strong>photos.<code>created_at</code> &lt; 1.<code>week</code>.<code>ago</code></strong>  is the problem.</p>

<p>The recommended way to achieve the same result is to use variables:</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;




&gt;&gt; date = &lt;span class="i"&gt;1&lt;/span&gt;.week.ago&lt;tt&gt;
&lt;/tt&gt;&gt;&gt; &lt;span class="co"&gt;Photo&lt;/span&gt;.select {|p| p.title == &lt;span class="pc"&gt;nil&lt;/span&gt; &amp;&amp; p.created_at &lt; date &amp;&amp; p.user.name == &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;}.to_sql&lt;tt&gt;
&lt;/tt&gt;=&gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;SELECT * FROM photos JOIN user WHERE (photos.`title` IS NULL AND (photos.`created_at` &lt; '2007-09-08 19:38:48' AND users.name = 'test'))&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;
</code></pre>

<p>However, note that method calls will work just fine:</p>

<pre><code>1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;




&gt;&gt; &lt;span class="r"&gt;def&lt;/span&gt; &lt;span class="fu"&gt;time_now_please&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&gt;&gt; &lt;span class="co"&gt;Time&lt;/span&gt;.now&lt;tt&gt;
&lt;/tt&gt;&gt;&gt; &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;tt&gt;
&lt;/tt&gt;&gt;&gt; &lt;span class="co"&gt;Photo&lt;/span&gt;.select {|p| p.title == &lt;span class="pc"&gt;nil&lt;/span&gt; &amp;&amp; p.created_at &lt; time_now_please &amp;&amp; p.user.name == &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;}.to_sql&lt;tt&gt;
&lt;/tt&gt;=&gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="k"&gt;SELECT * FROM photos JOIN user WHERE (photos.`title` IS NULL AND (photos.`created_at` &lt; '2007-09-15 19:41:37' AND users.name = 'test'))&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;/span&gt;   
</code></pre>

<h2>Conclusion</h2>

<p>For now, Ambition is still just wrapping ActiveRecord::Base#find but the plan is to actually generate SQL. Hopefully we'll also be able to use Ruby code from within an Ambition block. Kickers methods are very interesting and could become a really nice way of speeding up your app and keep your code clean.</p>

<p>Ambition is a great query library, I think I'll start using it whenever I have "find" calls with multiple conditions especially if my conditions are related to another model. However I still didn't figure out how to use an inner join with Ambition.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Edge: more clean up]]></title>
    <link href="https://matt.aimonetti.net/posts/2007/09/11/edge-more-clean-up/"/>
    <updated>2007-09-11T05:55:00-07:00</updated>
    <id>https://matt.aimonetti.net/posts/2007/09/11/edge-more-clean-up</id>
    <content type="html"><![CDATA[<p>As <a href="http://railsontherun.com/2007/9/10/dhh-and-team-busy-cleaning-up-edge">posted yesterday</a> Rails slimmed down during the last few days.</p>

<p>This time, <strong>acts as_tree</strong> <a href="http://dev.rubyonrails.org/browser/plugins/acts%20as_tree">has been moved into a plugin</a>    <a href="http://dev.rubyonrails.org/changeset/7454">7454</a> as well as <a href="http://dev.rubyonrails.org/browser/plugins/acts_as_nested_set"><strong>acts as nested set</strong> </a>  <a href="http://dev.rubyonrails.org/changeset/7453">7453</a> and <a href="http://dev.rubyonrails.org/browser/plugins/auto_complete"><strong>auto_complete</strong></a>  <a href="http://dev.rubyonrails.org/changeset/7450">7450</a></p>

<p>Here are the <a href="http://dev.rubyonrails.org/browser/plugins">official plugins</a>. Don't worry if you were using Edge, you simply need to use <a href="http://piston.rubyforge.org/usage.html">piston</a> and install what you need in your project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DHH and team busy cleaning up Edge]]></title>
    <link href="https://matt.aimonetti.net/posts/2007/09/10/dhh-and-team-busy-cleaning-up-edge/"/>
    <updated>2007-09-10T15:12:00-07:00</updated>
    <id>https://matt.aimonetti.net/posts/2007/09/10/dhh-and-team-busy-cleaning-up-edge</id>
    <content type="html"><![CDATA[<p><a href="http://www.loudthinking.com/">DHH</a> and <a href="http://www.koziarski.net/">nzkoz</a> have been busy this week end cleaning up Edge and   pushing some features to plugins.</p>

<ul>
<li><p>acts_as_list became a <a href="http://dev.rubyonrails.org/browser/plugins/acts_as_list">plugin</a> ( <a href="http://dev.rubyonrails.org/changeset/7443">7443</a> / <a href="http://dev.rubyonrails.org/changeset/7444">7444</a> )</p></li>
<li><p>in_place editing was also moved out as a <a href="http://dev.rubyonrails.org/browser/plugins/in_place_editing">plugin</a> ( <a href="http://dev.rubyonrails.org/changeset/7441">7441</a> / <a href="http://dev.rubyonrails.org/changeset/7442">7442</a> )</p></li>
<li><p>Scaffold is gone ( <a href="http://dev.rubyonrails.org/changeset/7429">7429</a> ) ( <a href="http://tuples.us/2007/09/09/scaffold-is-gone/">Jordan McKible post</a> )</p></li>
</ul>


<p>The Rails core team is trying to keep the core light and agile and I believe it's a good thing. Hopefully we are getting closer to a 2.0 release.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Globalite Major update]]></title>
    <link href="https://matt.aimonetti.net/posts/2007/09/02/globalite-major-update/"/>
    <updated>2007-09-02T22:21:00-07:00</updated>
    <id>https://matt.aimonetti.net/posts/2007/09/02/globalite-major-update</id>
    <content type="html"><![CDATA[<h2><em>I'm glad to announce a major update of Globalite.</em></h2>

<p>First off I'd like to thank all the translators who helped with this release.</p>

<ul>
<li><p>Globalite now support its <strong>first Asian language: Chinese!</strong>
Ivan Chang did an awesome job creating a localization file in Chinese for Taiwan, Hong Kong and Main Land China. I'm really glad thinking that Globalite will make the Rails experience much nicer for a lot of Chinese people.</p></li>
<li><p>Ivan also pushed me to add a new feature that people had asked about: a <strong>better ActiveRecord error message support</strong>.</p></li>
</ul>


<p>You know how Rails has a nice way of displaying your Model errors:</p>

<p><img src="http://farm2.static.flickr.com/1052/1306879608_e60431d214_o.png" alt="AR_error" /></p>

<p>Well, now that's automatically translated in your locale. (as long as the new localization files are up to date. Feel free to contact me if you want to improve the locale file in your own language)</p>

<ul>
<li>I also added support for pluralization directly in the translation file. (pluralization doesn't always make sense in some languages) I'm planning on adding a better Inflector support later on.</li>
</ul>


<p>for now, in your translation file simply use:</p>

<p><code>horse_count: we have pluralize curly_brace curly_brace count curly_brace, horse curly_brace in the
ranch</code></p>

<p>In your view use the localization with arguments to pass the count:</p>

<p><code>
&lt;%= :horse_count.l_with_args({:count => @horse.count}) %>
</code></p>

<p>See <a href="http://code.google.com/p/globalite/wiki/PluralizationSupport">the wiki</a> for more information about pluralization.</p>

<ul>
<li>Finally the <a href="http://globalite.googlecode.com/svn/sample/ui/">demo app</a> has been updated with an example of how to grab the acceptable locale from the header. (thanks to Emmanuel Bouton)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New version of Globalite is coming up]]></title>
    <link href="https://matt.aimonetti.net/posts/2007/08/29/new-version-of-globalite-is-coming-up/"/>
    <updated>2007-08-29T14:10:00-07:00</updated>
    <id>https://matt.aimonetti.net/posts/2007/08/29/new-version-of-globalite-is-coming-up</id>
    <content type="html"><![CDATA[<p>I'm almost ready to update Globalite with 2 major changes:</p>

<ul>
<li><p>Support for Chinese (Taiwan, Hong Kong and main land China) thanks to Ivan Chang</p></li>
<li><p>Better support for Active Record error messages in forms (based on contribution from Ivan)</p></li>
</ul>


<p>I'm writing more tests and updating the sample app before releasing the updated version. It should be out in the next few days.</p>

<p>[Globalite page @ Google Code](http://code.google.com/p/globalite/</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Different way of working]]></title>
    <link href="https://matt.aimonetti.net/posts/2007/08/25/differently-way-of-working/"/>
    <updated>2007-08-25T03:44:00-07:00</updated>
    <id>https://matt.aimonetti.net/posts/2007/08/25/differently-way-of-working</id>
    <content type="html"><![CDATA[<p><a href="http://joshknowles.com">Josh Knowles</a> shared with me a great video about working methodologies, client relationship and project management.</p>

<p>Check it out, it's really worth it.</p>

<p><a href="http://unspace.ca/innovation/speak"><img src="http://farm2.static.flickr.com/1216/1228290366_271e6a2509_o.png" alt="video" /></a></p>
]]></content>
  </entry>
  
</feed>

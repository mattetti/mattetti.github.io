<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JavaScript | Matt Aimonetti]]></title>
  <link href="https://matt.aimonetti.net/articles/categories/javascript/atom.xml" rel="self"/>
  <link href="https://matt.aimonetti.net/"/>
  <updated>2017-05-25T23:27:26-07:00</updated>
  <id>https://matt.aimonetti.net/</id>
  <author>
    <name><![CDATA[Matt Aimonetti]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Automate iTunes with JS to wake up in music]]></title>
    <link href="https://matt.aimonetti.net/posts/2015/09/02/automate-itunes-with-js/"/>
    <updated>2015-09-02T20:46:00-07:00</updated>
    <id>https://matt.aimonetti.net/posts/2015/09/02/automate-itunes-with-js</id>
    <content type="html"><![CDATA[<p>Last week, my daughter started Kindergarten. I'm very happy for her,
especially because she's going to an <a href="http://www.edison.smmusd.org/">awesome public school</a>.
As someone who didn't grow up in the US, I heard a lot of stories about the American school
system but one thing I didn't know is that kids start so early. My
daughter starts at 8:10am! We had to find a way to turn our
sleeping-in family members into morning people.</p>

<p>I found a solution to help us: coding and music!</p>

<p>My goal: to wake up my daughter with a custom music playlist starting a
few minutes before I go see her.</p>

<p>We have an old Mac Mini at home that I recently upgraded it to run Yosemite.
This recent version of OS X added JavaScript as an alternative to <a href="https://en.wikipedia.org/wiki/AppleScript">AppleScript</a>.
My goal is to write a little script that will play a given playlist and
then I want to schedule this script to play every school morning. The
Mac Mini is connected to an Airport Express with usb speakers located in
my daughter's bedroom.</p>

<h2>JavaScript for Automation</h2>

<p>Apple has some <a href="https://developer.apple.com/library/mac/releasenotes/InterapplicationCommunication/RN-JavaScriptForAutomation/">documentation</a> about how to use JS to automate different tasks. To be honest the documentation isn't really good in comparison to their usual doc.
Also, the technical implementation is pretty hacky/buggy but that won't
prevent us to have a bit of fun.</p>

<p>The code to start iTunes and play our playlist if very straight forward:</p>

<p>```javascript
app = Application('iTunes')
app.activate()
app.stop()
playlist = app.sources["Library"].userPlaylists["morning"]
try {</p>

<pre><code>playlist.play()
</code></pre>

<p>}
catch(err) {</p>

<pre><code>console.log("The playlist probably doesn't exist", err)
</code></pre>

<p>}
```</p>

<p>As you probably guessed, this script loads iTunes and then uses its
scripting API to load the main library and look for a playlist called
"morning".
I'm not proud of the ugly try/catch, but playlist is an instance of
<code>ObjectSpecifier</code> which isn't evaluated until a method is called on it.
You can think of it as a lazy container. The problem is that if we try
to call <code>play()</code> on a playlist we didn't find, then an error is thrown.
I didn't find a way to check if the underlying value is null so I had to
catch the error.</p>

<p>Once we have the above code, we have two options, put it in a script or
convert it into an app. When developing your automation, it's highly
recommended to use <code>Script Editor.app</code> which ships with the OS.
From within the app, you can run your script and test / "debug" it.
Script Editor also allows you to export your script as script, script
bundle and app. The easiest way is to export our code as an app:</p>

<p><img src="/images/jxa_app.jpg" alt="Export JS as an app" /></p>

<p>Note that you can also write a script and create a <code>osascript</code> shebang,
or even evalute your automation JS in the terminal:</p>

<p><code>
$ say "you are listening to" `osascript -l JavaScript -e 'Application("iTunes").currentTrack.name()'`
</code></p>

<p>So we have a script to start iTunes if needed and play our morning
playlist. Now we need to schedule our app to start every school day:</p>

<h2>Launchctl</h2>

<p>OS X has a builtin scheduling system called <a href="http://launchd.info/">launchd</a>. It's kind of like a cron scheduler but with more options.
Unfortunately figuring something as simple as scheduling a recurring
script is much harder than it should. So here is my plist file:</p>

<p>```xml
&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict></p>

<pre><code>&lt;key&gt;Label&lt;/key&gt;
&lt;string&gt;morning.playlist.itunes&lt;/string&gt;
&lt;key&gt;ProgramArguments&lt;/key&gt;
&lt;array&gt;
    &lt;string&gt;/usr/bin/open&lt;/string&gt;
    &lt;string&gt;-a&lt;/string&gt;
    &lt;string&gt;wakeup.app&lt;/string&gt;
&lt;/array&gt;
&lt;key&gt;RunAtLoad&lt;/key&gt;
&lt;false/&gt;
&lt;key&gt;StandardErrorPath&lt;/key&gt;
&lt;string&gt;/tmp/morning.playlist.itunes.stderr&lt;/string&gt;
&lt;key&gt;StandardOutPath&lt;/key&gt;
&lt;string&gt;/tmp/morning.playlist.itunes.stdout&lt;/string&gt;
&lt;key&gt;StartCalendarInterval&lt;/key&gt;
&lt;array&gt;
    &lt;dict&gt;
        &lt;key&gt;Hour&lt;/key&gt;
        &lt;integer&gt;6&lt;/integer&gt;
        &lt;key&gt;Minute&lt;/key&gt;
        &lt;integer&gt;55&lt;/integer&gt;
        &lt;key&gt;Weekday&lt;/key&gt;
        &lt;integer&gt;1&lt;/integer&gt;
    &lt;/dict&gt;
    &lt;dict&gt;
        &lt;key&gt;Hour&lt;/key&gt;
        &lt;integer&gt;6&lt;/integer&gt;
        &lt;key&gt;Minute&lt;/key&gt;
        &lt;integer&gt;55&lt;/integer&gt;
        &lt;key&gt;Weekday&lt;/key&gt;
        &lt;integer&gt;2&lt;/integer&gt;
    &lt;/dict&gt;
    &lt;dict&gt;
        &lt;key&gt;Hour&lt;/key&gt;
        &lt;integer&gt;6&lt;/integer&gt;
        &lt;key&gt;Minute&lt;/key&gt;
        &lt;integer&gt;55&lt;/integer&gt;
        &lt;key&gt;Weekday&lt;/key&gt;
        &lt;integer&gt;3&lt;/integer&gt;
    &lt;/dict&gt;
    &lt;dict&gt;
        &lt;key&gt;Hour&lt;/key&gt;
        &lt;integer&gt;6&lt;/integer&gt;
        &lt;key&gt;Minute&lt;/key&gt;
        &lt;integer&gt;55&lt;/integer&gt;
        &lt;key&gt;Weekday&lt;/key&gt;
        &lt;integer&gt;4&lt;/integer&gt;
    &lt;/dict&gt;
    &lt;dict&gt;
        &lt;key&gt;Hour&lt;/key&gt;
        &lt;integer&gt;6&lt;/integer&gt;
        &lt;key&gt;Minute&lt;/key&gt;
        &lt;integer&gt;55&lt;/integer&gt;
        &lt;key&gt;Weekday&lt;/key&gt;
        &lt;integer&gt;5&lt;/integer&gt;
    &lt;/dict&gt;
&lt;/array&gt;
</code></pre>

<p></dict>
</plist>
```</p>

<p><a href="https://gist.github.com/mattetti/75fd52c653b9144f303e">Gist</a></p>

<p>Note that I called my app <code>wakeup.app</code> and I put it in my Applications
folder. My launch agent starts the app when it's called, but it doesn't
do that when the system loads the service (<code>RunAtLoad</code> is set to false).
I'm also logging out stdout and stderr to tmp files so I can debug if
something goes wrong. Finally the schedule is defined in the <code>StartCalendarInterval</code>
key with a daily entry Monday to Friday at 6:55am.</p>

<p>Save the plist file as <code>wakeup.playlist.itunes.plist</code> and drop it in <code>~/Library/LaunchAgents/</code>
and load it via <code>launchctl</code>:</p>

<p><code>
$ launchctl load -w ~/Library/LaunchAgents/wakeup.playlist.itunes.plist
</code></p>

<p>That's it, everything should work fine, however if you want to make sure
it will, you might want to unload the plist, edit it so <code>RunAtLoad</code> is
set to true and reload it. At this point, your playlist should play. If
it doesn't, then check the log files to see what happened.
When everything is good, unload, go back to the original version and
reload.</p>

<p>There is plenty more you can do with JS Automation for Mac, if like me
you are listening to a lot of music while coding, you might be
interested in knowing that <strong>Spotify</strong> and <strong>VLC</strong> are scriptable (and
so are most browsers).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PulsoConf 2012 - Tour of programming languages]]></title>
    <link href="https://matt.aimonetti.net/posts/2012/10/05/pulsoconf-tour-of-programming-languages/"/>
    <updated>2012-10-05T15:09:00-07:00</updated>
    <id>https://matt.aimonetti.net/posts/2012/10/05/pulsoconf-tour-of-programming-languages</id>
    <content type="html"><![CDATA[<p>During <a href="http://pulsoconf.co/">PulsoConf 2012</a> in Bogot√°, Colombia Matt
Aimonetti gave a talk entitled <em>Tower of
Babel: a tour of programming languages</em>.</p>

<h2>Description of the talk:</h2>

<p>Programming languages affect the way one looks and solves problems. But
comparing programming languages isn't as simple as drawing a table
comparing features.</p>

<p><img src="/images/matt_aimonetti_languages_table.jpg" alt="Matt Aimonetti compares programming languages" /></p>

<p>In his talk, Matt shows what he likes, dislikes, the philosophy and concrete example of how to use 7 programming
languages:</p>

<ul>
<li>Ruby</li>
<li>JavaScript</li>
<li>CoffeeScript</li>
<li>Objective-C</li>
<li>Clojure</li>
<li>Scala</li>
<li>Go</li>
</ul>


<h2>Slides</h2>

<script async class="speakerdeck-embed" data-id="50662c32244a9d000202ba53" data-ratio="1.299492385786802" src="https://matt.aimonetti.net//speakerdeck.com/assets/embed.js"></script>


<p>The slides are available on <a href="https://speakerdeck.com/u/matt_aimonetti/p/tower-of-babel-a-tour-of-programming-languages">Matt's SpeakerDeck</a> and can be <a href="">downloaded here</a>.</p>

<h2>Video</h2>

<p>TBD</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First step in scaling a web site: HTTP caching]]></title>
    <link href="https://matt.aimonetti.net/posts/2011/07/11/first-step-in-scaling-a-web-site-http-caching/"/>
    <updated>2011-07-11T10:21:02-07:00</updated>
    <id>https://matt.aimonetti.net/posts/2011/07/11/first-step-in-scaling-a-web-site-http-caching</id>
    <content type="html"><![CDATA[<p>Today my friend <a href="http://twitter.com/mokolabs">Patrick Crowley</a> and I were talking about scaling his website: <a href="http://cinematreasures.org/">http://cinematreasures.org</a>¬†since an article covering his work will soon be published in a very popular newspaper.¬†Patrick's site is hosted on <a href="http://www.heroku.com/">Heroku</a> which comes by default with <a href="https://www.varnish-cache.org/">Varnish caching</a> enabled.</p>

<p>The challenge is that a lot of people using the Rails framework are used to doing page caching instead of relying on HTTP caching, even though this feature was added a long time ago. The major problem with page caching is that it doesn't scale that well as soon as you run more than one server. Indeed you would need to store the page content to a shared drive between your servers or use memcached and do some work to avoid hitting your app every single time. On the other hand, HTTP caching is extremely easy to handle at the application level and it will dramatically reduce the amount of requests hitting your app. Let me explain a little more about HTTP caching.</p>

<p>Ryan Tomako wrote an <a href="http://tomayko.com/writings/things-caches-do">excellent post</a> about the details of caching, I strongly recommend you <a href="http://tomayko.com/writings/things-caches-do">read it</a>. In a nutshell, the HTTP caching layer (usually) seats before your application layer and allows you, the developer to store some responses that can be send back to the users based on optional conditions. That might still seem vague, let's take a concrete example. If you look at <a href="http://cinematreasures.org">http://cinematreasures.org</a>'s home page you can see that it's an agglomerate of various information:</p>

<p><a href="http://cinematreasures.org"><img src="https://img.skitch.com/20110709-dnxjhikxr14tdr7e35n97madhn.jpg" alt="CinemaTreasures homepage" /></a></p>

<p>And the bottom of the page contains even more dynamic data such as the popular movie theater photos, latest movie theater videos and latest tweets. One might look at that and say that this page can't really be cached and that the caching should be done at the model layer (i.e. cache the data coming from the database). I would certainly agree that caching the data layer is probably a good idea, but you shouldn't start by that. In fact without caching, this page renders fast enough. The problem is when someone like <a href="http://rogerebert.suntimes.com/">Roger Ebert</a> tweets about <a href="http://twitter.com/#!/ebertchicago/status/85912164648497152">CinemaTreasures</a> the load on the app peaks significantly. At the point, the amount of concurrent connections your app can handle gets put to the challenge. Even though your page load is "fast enough", requests will queue up and some will eventually time out. That's actually a perfect case of HTTP caching.</p>

<p>What we want to do in that case is to cache a version of the home page in Varnish for 60 seconds. During that time, all requests coming to the site, will be served by Varnish and will all get the same cached content. That allows our servers to handle the non cached requests and therefore increase our throughput. What's even better, is that if a user refreshes the home page in his/her browser during the first 60 seconds the requests won't even make it all the way to our servers. All of that thanks to conditions set on the response. The first user hitting the HTTP cache layer (Varnish in this case) won't find a fresh cached response, so varnish will forward the request to our application layer which will send back the homepage to varnish and tell Varnish that this content is good for a full minute so please don't ask for it again until a minute from now. Varnish serves this response to the users' browser and let the browser know that the server said that the response was good enough for a minute so don't bother asking for it again. But now, if during these 60 seconds another user comes in, he will hit Varnish and Varnish will have the cached response from the first user and because the cache is still fresh (it's not been 60 seconds since the first request) and the cache is public, then the same response will be sent to the second user.</p>

<p>As you can see, the real strength of HTTP caching is the fact that it's a conditional caching. It's based on the request's URL and some "flags" set in the request/response headers.</p>

<p>Setting these conditions in your app is actually very simple since you just need to set the response's headers. If you are using a Ruby framework you will more than likely have access to the request object via the "request" method and you can set the headers directly like that: "response.headers['Cache-Control'] = 'public, max-age=60'".
In Rails, you can actually use a helper method instead: expires_in 1.minute, :public => true.</p>

<p>You might have a case where you HAVE TO serve fresh content if available and can't serve stale cached content even for a few seconds. In this case, you can rely on the Etag header value. The Etag is meant to validate the freshness of a cached response. Think of it as a signature (unique ID) that is set on the response and used by the client (or cache layer) to see if the server response has changed or not. The way it works is that the client keeps track of the Etag received for each request (attached to the cached response) and then sends it with the next requests. The HTTP layer or application sees the Etag in the request and can check if it is still valid and the content didn't change. If that's the case, an empty response can be sent with a special HTTP status code (304) to let know the client that the old cached value is still good to be used. ¬†Rails has a helper called "stale?" that helps you do the Etag/last modified check and allows you to not fetch all the objects from the database by doing a cheap check on an attribute (For instance you can check the updated_at value and use that as a condition to pull an object and its relationships).</p>

<p>So I explain HTTP caching, I often hear people telling me: "that's great Matt, but you know what, that won't work for us because we have custom content that we display specifically to our users". So in that case, you can always set the Cache-Control header to private which will only cache the response in the client's browser and not the cache layer. That's good to some extent, but it can definitely be improved by rethinking a bit your view layer. In most web apps, the page content is rendered by server side code (Rails, Django, node.js, PHP..) and sent to the user all prepared for him. There are a few challenges with this approach, the biggest one is that the server has to wait until everything is ready (all data fetched, view rendered etc...) before sending back a response and before the client's browser can start rendering (there are ways to chunk the response but that's besides the scope of this post). The other is that the same expensive content has to be calculated/rendered for two different users because you might be inserting the username of the current user at the top of the page for instance. A classic way to deal with that is often to use fragment caching, where the expensive rendering is cached and reused by different requests. That's good but if the only reason to do that is because we are displaying some user specific data, there is a simpler way: async page rendering. The concept is¬†extremely¬†simple: remove all user specific content from the rendered page and then inject the user content in a second step once the page is displayed. The advantage is that now the full page can be cached in Varnish (or Squid or whatever you use for HTTP caching). To inject the user content, the easiest way is to use JavaScript.</p>

<p>Let's stay on CinemaTreasures, when you're logged in, the username is shown on the top of each page:</p>

<p>[caption id="" align="aligncenter" width="574" caption="Once logged in, the username is displayed on all pages"]<img src="https://img.skitch.com/20110710-mh5tqxuw1txf9kppn1smkkarrs.jpg" alt="" />[/caption]</p>

<p>The only things that differs from the page rendered when the user is not logged in and when he is, are these 2 links and an avatar. So let's write some code to inject that after rendering the page.</p>

<p>In Rails, in the sessions controller or whatever code logs you in, you need to create a new cookie containing the username:</p>

<p>``` ruby
cookies[:username] = {</p>

<pre><code>     :value =&gt; session[:username],
     :expires =&gt; 2.days.from_now,
     :domain =&gt; ".cinematreasures.org"
   }
</code></pre>

<p>```</p>

<p>As you can see, we don't store the data in the session cookie and the data won't be encrypted. You need to be careful that someone changing his cookie value can't access data he/should shouldn't. But that's a different discussion. Now that the cookie is set, we can read it from JavaScript when the page is loaded.</p>

<p>``` javascript
document.observe("dom:loaded", function() {
  displayLoggedinUserLinks();
});</p>

<p>function readCookie(name) {</p>

<pre><code> var nameEQ = name + "=";
 var ca = document.cookie.split(';');
 for(var i=0;i &lt; ca.length;i++) {
      var c = ca[i];
      while (c.charAt(0)==' ') c = c.substring(1,c.length);
      if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
 }
 return null;
</code></pre>

<p>}</p>

<p>function displayLoggedinUserLinks() {
  var username            = readCookie('username');
  var loginLink           = $('login');
  var logout              = $('logout');
  if (username == null){</p>

<pre><code>loginLink.show();
logout.hide();
</code></pre>

<p>  }else{</p>

<pre><code>// user is logged in and we have his/her username
loginLink.hide();
if(userGreetings){ userGreetings.update("&lt;span id="username"&gt;username&lt;/span&gt;"); }
logout.show();
showAvatar(username);
</code></pre>

<p>  };
  return true;
}
```</p>

<p>The code above doesn't do much, once the DOM is loaded, the displayLoggedinUserLinks() function gets trigger. This function reads the cookie via the readCookie() function and if a username is found, the login link is hidden, the user name is displayed, as well as the logout link and the avatar. (You can also use a jQuery cookie plugin to handle the cookie, but this is an old example using Prototype, replace the code accordingly)
When the user logs out, we just need to delete the username cookie and the cached page will be rendered properly. In Rails, you would do delete the cookie like that: cookies.delete('username').
Quite often you might even want to make an Ajax call to get some information such as the number of user messages or notifications. Using jQuery or whatever JS framework you fancy you can do that once the page is rendered. Here is an example, on this page, you can see the learderboards for MLB The Show. The leaderboards don't change that often, especially the overall leaderboards so they can be cached for a little while, however the player's presence can change anytime. The smart way to deal with that, would be to cache the ¬†leaderboards for a few seconds/minutes and make an ajax call to a presence service passing it a list of user ids collected from the DOM. The service called via Ajax could also be cached ¬†depending on the requirements.</p>

<p>Now there is one more problem that people using might encouter: flash notices. For those of you not familiar with Rails, flash notices are messages set in the controller and passed to the view via the session (at least last time I checked). The problem happens if I'm the home page isn't cached anymore and I logged in which redirects me to the home page with a flash message like so:</p>

<p><img src="https://img.skitch.com/20110710-1u6dn8rrc6r62rsg6niphhd2pi.jpg" alt="" /></p>

<p>The problem is that the message is part of the rendered page and now for 60 seconds, all people hitting the home page will get the same message. This is why you would want to write a helper that would put this message in a custom cookie that you'd pull JS and then delete once displayed. You could use a helper like that to set the cookie:</p>

<p>``` ruby
def flash_notice_cookie(msg, expiration=nil)
  cookies[:flash_notice] = {</p>

<pre><code>:value =&gt; msg,
:expires =&gt; expiration || 1.minutes.from_now,
:domain =&gt; ".cinematreasures.com"
</code></pre>

<p>   }
end
```</p>

<p>And then add a function called when the DOM is ready which loads the message and injects it in the DOM. Once the cookie read, delete it so the message isn't displayed again.</p>

<p>¬†</p>

<p>So there you have it, if you follow these few steps, you should be able to handle easily 10x more traffic without increasing hardware or making any type of crazy code change. Before you start looking into memcached, redis, cdns or whatever, consider HTTP caching and async DOM manipulation. Finally, note that if you can't use Varnish or Squid, you can very easily setup <a href="http://rtomayko.github.com/rack-cache/">Rack-Cache</a> locally and share the cache via memcached. It's also a great way to test locally.</p>

<hr />

<p><strong>Update:</strong> CinemaTreasures was updated to use HTTP caching as described above. The hosting cost is now half of what it used to be and the throughput is actually higher which offers a better protection against peak traffic.</p>

<hr />

<p>¬†</p>

<p>External resources:</p>

<ul>
<li><p><a href="http://tomayko.com/writings/things-caches-do">http://tomayko.com/writings/things-caches-do</a></p></li>
<li><p><a href="http://devcenter.heroku.com/articles/http-caching">HTTP Caching at Heroku</a></p></li>
<li><p><a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html">W3 caching protocol¬†</a></p></li>
<li><p><a href="http://rtomayko.github.com/rack-cache/">Rack-Cache middleware</a></p></li>
<li><p><a href="http://www.nolanevans.com/2011/03/optimizing-your-rails-site-with-http.html">Blog post covering HTTP Caching/Varnish/Rails</a></p></li>
<li><p><a href="http://plugins.jquery.com/project/Cookie">jQuery cookie plugin</a></p></li>
</ul>

]]></content>
  </entry>
  
</feed>

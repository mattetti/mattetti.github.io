<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mruby | Matt Aimonetti]]></title>
  <link href="https://matt.aimonetti.net/articles/categories/mruby/atom.xml" rel="self"/>
  <link href="https://matt.aimonetti.net/"/>
  <updated>2017-04-04T18:49:19-07:00</updated>
  <id>https://matt.aimonetti.net/</id>
  <author>
    <name><![CDATA[Matt Aimonetti]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Aloha RubyConf - mmm..mruby or why yet another Ruby implementation]]></title>
    <link href="https://matt.aimonetti.net/posts/2012/10/09/mmm-dot-mruby-or-why-yet-another-ruby-implementation/"/>
    <updated>2012-10-09T20:14:00-07:00</updated>
    <id>https://matt.aimonetti.net/posts/2012/10/09/mmm-dot-mruby-or-why-yet-another-ruby-implementation</id>
    <content type="html"><![CDATA[<p>During <a href="http://aloharubyconf.com/">Aloha RubyConf 2012</a> in Honolulu, Hawaii Matt
Aimonetti gave a talk entitled <strong>mmm..mruby or why yet another Ruby implementation</strong>.</p>

<h2>Description of the talk:</h2>

<p>mruby is Matz’ new Ruby implementation, it’s not cooler than node.js, it doesn’t natively support Hypstermedia,
 it looks just like the good old Ruby. So why should we, as a community care?</p>

<p>Matt's talk is divided in two parts, an introduction of mruby (embedded
Ruby) and and revisiting Ruby.</p>

<p><img src="https://speakerd.s3.amazonaws.com/presentations/50752712f8a4020002043005/slide_10.jpg?1350068026" alt="Matt Aimonetti talks about mruby" /></p>

<h2>Slides</h2>

<script async class="speakerdeck-embed" data-id="50752712f8a4020002043005" data-ratio="1.2994923857868" src="https://matt.aimonetti.net//speakerdeck.com/assets/embed.js"></script>


<p>The slides are available on [Matt's SpeakerDeck page]https://speakerdeck.com/matt_aimonetti/mmmm-dot-mruby-everywhere-and-revisiting-ruby) and can be <a href="">downloaded here</a>.</p>

<h2>Video</h2>

<iframe width="640" height="360" src="http://www.youtube.com/embed/eZYRd86OTbk" frameborder="0" allowfullscreen></iframe>


<h2>Presentation website</h2>

<p>Matt's presentation was filmed by <a href="http://confreaks.com">Confreaks</a> and posted <a href="http://confreaks.com/videos/1252-aloharuby2012-mmm-mruby-or-why-yet-another-ruby-implementation">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting started with mruby]]></title>
    <link href="https://matt.aimonetti.net/posts/2012/04/25/getting-started-with-mruby/"/>
    <updated>2012-04-25T10:59:00-07:00</updated>
    <id>https://matt.aimonetti.net/posts/2012/04/25/getting-started-with-mruby</id>
    <content type="html"><![CDATA[<p>mruby is the latest Ruby implementation in an already quite long list:</p>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Ruby_MRI">MRI</a></li>
<li><a href="http://www.rubyenterpriseedition.com/">REE</a></li>
<li><a href="http://jruby.org/">JRuby</a></li>
<li><a href="http://rubini.us/">Rubinius</a></li>
<li><a href="http://macruby.org">MacRuby</a></li>
<li><a href="http://maglev.github.com/">Maglev</a></li>
<li><a href="http://www.ironruby.net/">IronRuby</a></li>
</ul>


<p>And many other less known implementations.</p>

<p>This time, the main man behind the project is the Ruby creator
himself: <a href="http://en.wikipedia.org/wiki/Yukihiro_Matsumoto">Yukihiro 'Matz' Matsumoto</a>.
I already covered the <a href="http://matt.aimonetti.net/posts/2012/04/20/mruby-and-mobiruby/">announcement, you can read more about it there</a>.</p>

<h2>Why mruby?</h2>

<p>Following my previous <a href="http://matt.aimonetti.net/posts/2012/04/20/mruby-and-mobiruby/">article on mruby</a>, some people seemed to be confused by the "raison d'être"/purpose of the project and the difference between <a href="http://en.wikipedia.org/wiki/Ruby_MRI">MRI</a> and mruby.</p>

<p>mruby is designed to be modular and to be embedded, which means that
it's expected to live inside other software applications. In other words
mruby's goal is to make Ruby an embedded language. mruby is library that you link in other applications.</p>

<p>When talking about embedded languages, <a href="http://www.lua.org/">Lua</a> is
probably the most well known interpreted language.
<a href="http://www.lua.org/">Lua</a> is usually used for the purpose of offering a
higher level language (scripting language) inside a software written in a low level language
(usually C/C++). This is why <a href="http://www.lua.org/">Lua</a> is very popular
in the game industry to allow a scriptable interface and have parts of
the code interpreted instead of requiring to recompile the code base
against the target platform. According to <a href="http://www.satori.org/2009/03/the-engine-survey-general-results/">this survey from 2009</a>,
Lua was by far the most popular scripting language for game developers.</p>

<p><img src="http://www.satori.org/images/GE1/9Scripting.gif" alt="Lua vs other scripting languages" /></p>

<p>Of course, Lua is also popular outside of the game industry and the
reasons are simple to understand:</p>

<ul>
<li>very easily embedded (simple and well documented API)</li>
<li>small footprint</li>
<li>portable (runs almost everywhere)</li>
</ul>


<p>That gives you an idea of what mruby is trying to be. As a matter of
fact, this definition of Lua applies very well to mruby:</p>

<blockquote><p>"Lua is dynamically typed, runs by interpreting bytecode for a register-based virtual machine, and has automatic memory management with incremental garbage collection, making it ideal for configuration, scripting, and rapid prototyping."</p></blockquote>

<h2>Why not Lua?</h2>

<p>This is a matter of taste and requirements. It should eventually boil
down to the difference in the language designs.</p>

<p><img src='https://matt.aimonetti.net/images/lua_logo.gif' alt='Lua logo, Matt Aimonetti site' style='margin:auto;display:block;width:100px' class='no-caption'/></p>

<blockquote><p>Lua combines simple procedural syntax with powerful data description constructs based on associative arrays and extensible semantics.</p></blockquote>

<p></br>
 <img src='https://matt.aimonetti.net/images/ruby_logo.png' alt='Ruby logo, Matt Aimonetti site' style='margin:auto;display:block;width:100px'class='no-caption' /></p>

<blockquote><p>Ruby is a dynamic, open source programming language with a focus on simplicity and productivity. It has an elegant syntax that is natural to read and easy to write.</p></blockquote>

<br style="clear:both">


<p>So on one hand you have a very simple language with a focus on
functional programming and on the other, a <a href="http://www.ruby-lang.org/en/about/">richer language</a> (albeit more
complex) with a
main focus on Object Oriented programming.</p>

<p>If you don't know Lua, it's quite close to JavaScript in the sense that
it's a prototype based language and you can therefore write code that is
Object Oriented.</p>

<p>Ruby being a full OO and richer language, you can organize your code
differently and write more of your complex logic in a scriptable language.
One could even potentially leverage the language to create its own
Domain Specific Language in pure Ruby and create a "Rails like" experience
within its application.</p>

<p>To be honest, I don't think that Ruby via mruby will just replace Lua,
but I do believe it will become a very interesting alternative for some
use cases. Especially if mruby manages to perform as well as Lua with the
same type of footprint. There is also the fact that mruby being
a sponsored project from the Japanese government, I wouldn't be
surprised to see big Japanese companies experiment with embedding Ruby
in their devices. After all, software is being added in every object we
own, rapid development and being first to market is more critical than
ever which makes mruby is a very attractive solution.</p>

<h2>Getting started</h2>

<p>I wrote a simple hello world example to give you a place to start:</p>

<p>```c</p>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;stdio.h></h1>

<p>/<em> Include the mruby header </em>/</p>

<h1>include &lt;mruby.h></h1>

<h1>include &lt;mruby/compile.h></h1>

<p>int main(void)
{
  mrb_state *mrb = mrb_open();
  char code[] = "p 'hello world!'";
  printf("Executing Ruby code with mruby!\n");</p>

<p>  mrb_load_string(mrb, code);
  return 0;
}
```</p>

<p>Or the longer/more complex version:</p>

<p>```c</p>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;stdio.h></h1>

<p>/<em> Include the mruby headers </em>/</p>

<h1>include &lt;mruby.h></h1>

<h1>include &lt;mruby/proc.h></h1>

<h1>include &lt;mruby/data.h></h1>

<h1>include &lt;mruby/compile.h></h1>

<p>int main(int argc, const char * argv[])
{
  struct mrb_parser_state <em>p;
  mrb_state </em>mrb = mrb_open();
  char code[] = "p 'hello world!'";
  printf("Executing code with mruby!\n");</p>

<p>  p = mrb_parse_string(mrb, code);
  int n;
  n = mrb_generate_code(mrb, p);
  mrb_run(mrb, mrb_proc_new(mrb, mrb->irep[n]), mrb_top_self(mrb));
  if (mrb->exc) {</p>

<pre><code>  mrb_p(mrb, mrb_obj_value(mrb-&gt;exc));
</code></pre>

<p>  }</p>

<pre><code>return 0;
</code></pre>

<p>}
```</p>

<p>To compile and link the code:</p>

<p><code>
$ gcc -Iinclude hello.c lib/libmruby.a -lm -o hello.out
</code></p>

<p>To execute it:</p>

<p><code>
$ ./hello.out
Executing Ruby code with mruby!
"hello world!"
</code></p>

<p>To get started, you just need the <a href="https://github.com/mruby/mruby">mruby source code</a> and a compiler. (I haven't tried to compile mruby or my sample on Windows for this code, but I assume it would work just fine with Visual C++).</p>

<p>The above example is very trivial and takes a line of Ruby code:
<code>ruby
p 'hello world!'
</code>
that the linked mruby lib interprets.
You can take the compiled file and use it on other machines using the
same platform and the code will run fine, just like normal C code.</p>

<p>For a more complete example, take a look at the <a href="https://github.com/mruby/mruby/blob/master/tools/mruby/mruby.c">mruby's standalone
interpreter</a></p>

<h2>Future</h2>

<p>It's a bit too early to know if mruby will be successful or not. There are few things I will keep my
eyes on.</p>

<h3>Performance</h3>

<p>To be a true alternative to Lua, mruby will have to interpret Ruby code
much faster than what MRI is able to do right now. It will also need to
keep the memory footprint really tiny. Ruby being a more complicated
language than Lua, it might be tricky, but we'll see.</p>

<h3>Documentation</h3>

<p>While the idea of using Ruby has a macro language might get a lot of
people excited, if documentation lacks or if the process is painful, the very same people might
fallback to another language.
Historically speaking, the MRI team has had issues with documentation
and communication due to various factors. I hope that thanks to Matz
experience and to the strong Ruby community, mruby will become a easy
and efficient alternative to Lua or people wanting to embed one of the
greatest interpreted languages.</p>

<h3>Ruby outside of Rails</h3>

<p>While <a href="http://rubyonrails.org">Ruby on Rails</a> really made Ruby popular,
I'm always a bit dissapointed when I see how many popular projects the
Ruby community has outside of Rails. Think about it, we have some
awesome implementation such as JRuby and MacRuby which allow you to use
an amazing amount of libraries to do the craziest thing one could
imagine using the language they like the most. But yet, Rails is still
by far the #1 Ruby project. Of course, there are many non-Rails related
projects out there, but they don't benefit from Rails' aura.</p>

<p>What I hope with mruby is that it will allow developers to leverage the
beauty of Ruby and to create other niches for people to have fun.
Some people already started:</p>

<h4>MobiRuby</h4>

<p><a href="https://github.com/masuidrive">Yuichiro MASUI</a>
is working on having Ruby available on iOS and Android.</p>

<h4>Ruby for Node.js</h4>

<p><a href="http://mattn.kaoriya.net/">Yasuhiro Matsumoto</a> is working on <a href="https://github.com/mattn/mruby-uv">mruby-uv</a> an interface for <a href="https://github.com/joyent/libuv">libuv</a> Node.js' platform layer.</p>

<h4>mod_mruby</h4>

<p><a href="http://blog.matsumoto-r.jp/">MATSUMOTO Ryosuke</a> is working on an Apache
module for mruby called <a href="https://github.com/matsumoto-r/mod_mruby">mod_mruby</a> which would
be comparable to <a href="http://httpd.apache.org/docs/2.3/mod/mod_lua.html">mod_lua</a></p>

<h4>mruby REPL</h4>

<p><a href="">Frank Celler</a> started working and blogging about writing a REPL for
mruby, go check out <a href="http://www.avocadodb.org/category/mruby">his excellent blog posts</a> on the shell he's working on and other stuff he's doing with mruby.</p>

<p>But there is plenty more to do, <a href="http://antirez.com/post/scripting-branch-released.html">redis</a> for instance now has/is about to be scriptabled via Lua, what about trying to use mruby to also support Ruby?
What about scripting game logic and even full games in Ruby?
What about mruby on a <a href="http://www.raspberrypi.org/">Raspberry pi</a>?
Ruby on my TV, fridge, car, AC, solar panel controller...</p>

<p>I will certainly be looking forward to people trying to reproduce the success
of Rails in a different domain thanks to the Ruby language.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mruby and MobiRuby]]></title>
    <link href="https://matt.aimonetti.net/posts/2012/04/20/mruby-and-mobiruby/"/>
    <updated>2012-04-20T12:32:00-07:00</updated>
    <id>https://matt.aimonetti.net/posts/2012/04/20/mruby-and-mobiruby</id>
    <content type="html"><![CDATA[<p>Today, two big Ruby news came directly from Japan:</p>

<ul>
<li>The Open Source release of <a href="http://en.wikipedia.org/wiki/Yukihiro_Matsumoto">Matz'</a> <a href="https://github.com/mruby/mruby">mruby on GitHub</a>.</li>
<li>The announce of <a href="http://mobiruby.org/">MobiRuby</a>, an upcoming solution
to develop iOS and Android applications using Ruby.</li>
</ul>


<p>Probably due to my involvement with the <a href="http://macruby.org/">MacRuby</a>
project, people have been asking me what I thought of these news.</p>

<h2>mruby</h2>

<p>mruby is far from being a new project. It's based on the RiteVM which is a
sponsored project by the <a href="http://www.meti.go.jp/english/">Japanese ministry of Economy, Trade and Industry</a> and lead by Ruby's creator: <a href="http://en.wikipedia.org/wiki/Yukihiro_Matsumoto">Yukihiro "Matz" Matsumoto</a> and was explained in details during <a href="http://www.slideshare.net/yukihiro_matz/rubyconf-2010-keynote-by-matz">Matz's RubyConf 2010 keynote</a>.</p>

<p>Back in November 2011 Matz also explained mruby. His talk was recorded
and he explains very well the current Ruby ecosystem and why mruby makes
sense.</p>

<div class="video-container">
<iframe width="560" height="315" src="http://www.youtube.com/embed/sB-IifjyeLI" frameborder="0" allowfullscreen></iframe></div>


<p>As explained, the main goal of mruby is to have a Ruby version that can
be embedded and therefore have a smaller footprint, be compiled and
linked within another application.</p>

<p>Hiroshi Nakamura gave a great 1 line definition of mruby:</p>

<p><img src="/images/mruby_def.jpg" alt="mruby" /></p>

<p>mruby targets game developers (to use instead of Lua), embedded
application developers (devices, TV, phones..) and small memory
footprint server applications (instead of JS for instance).</p>

<p>I'm personally quite excited by mruby, it's not there yet and there is
still a lot of work to do to prove the value of the project but it's
certainly a great step in the right direction. What's also really nice
is that the project is released under an OSS license allowing for all of
us to contribute and companies to improve the implementation based on
their own needs.</p>

<p><strong>Summary:</strong> mruby is a promising project even if it is still in its infancy.
Besides being yet another Ruby implementation, the fact that the
target audience and the project scope are well defined and that the project is lead
by Ruby's author and sponsored by the Japanese government makes me want to believe that it can be a successful project. That said Lua is a simpler language and it is already well implemented in the targeted market, so hopefuly Matz, his team and the Japanese government have a plan to advocate and champion this new technology. Good luck to them and I'll keep an attentive eye on the project.</p>

<p><strong>
Update: I wrote a <a href="http://matt.aimonetti.net/posts/2012/04/25/getting-started-with-mruby/">getting started with mruby</a> guide.
</strong></p>

<h2>MobiRuby</h2>

<p><a href="http://mobiruby.org/">MobiRuby</a> is being developed by <a href="https://github.com/masuidrive">Yuichiro MASUI</a> who works for <a href="http://www.appcelerator.com/">Appcelerator</a> the company behind the popular <a href="http://www.appcelerator.com/platform/titanium-sdk">Titanium platform</a> to write native iOS, Android apps in JS.</p>

<p>MobiRuby is built on top of mruby making it the first demonstration of
what motivated developers can do with Matz new implementation. Very much
like mruby, MobiRuby will be released under an OSS license but unlike
mruby, the <a href="http://www.apache.org/licenses/LICENSE-2.0.html">Apache license</a> was chosen.</p>

<p>So far this was just an announcement with a code sample and a
screenshot. That was enough to make the front page of <a href="http://news.ycombinator.com/item?id=3866418">HackerNews</a>. Apparently the author is planning on releasing a first version in a few months.</p>

<p> <img src="http://mobiruby.org/screenshot1.jpg" title="MobiRuby screenshot" alt="MobiRuby" /></p>

<p>It might surprise some, but I'm quite glad to see this kind of projects
even though, they compete to some extent against MacRuby. It proves two
things:</p>

<ul>
<li>there is a strong interest in having Ruby on mobile devices.</li>
<li>it's technically possible to do so.</li>
</ul>


<p>Now, this is not something new either, Lua developers have been able to
write iOS apps for a while, yet the majority of the iOS developers still
use Objective-C. What are the challenges facing implementations trying
to replace Objective-C?</p>

<h3>The replacement language might not fit the Cocoa design.</h3>

<p>Developing an iOS/OS X app means that you spend your time using provided
libraries (called frameworks in Apple's jargon). These frameworks have
specific patterns, a well defined syntax and usually work in a very
consistent/constraining way. Or your language is quite similar (like Ruby) and the
transition is easy, or you need to start writing and maintaining
wrappers (titanium).</p>

<h3>Bridged runtimes.</h3>

<p>Having 2 runtimes running at the same time is quite challenging and not
efficient. That's one of the reasons why Apple pushed MacRuby to move from <a href="http://en.wikipedia.org/wiki/RubyCocoa">RubyCocoa</a> being a bridge and to have a Ruby implementation running in Objective-C runtime itself.
This allows something else, in MacRuby all objects are actually
Objective-C objects which means you don't need to convert anything and
Cocoa APIs can be extended from Ruby code by just reopening them.</p>

<h3>Support.</h3>

<p>This one is critical for many. Often, you don't want to have your next big
project rely on a technology that doesn't have a good backing and
support. What happens if you build your app using an alternate
implementation and all a sudden the developer(s) get bored and move on,
or take another job?
What about the updates needed as Apple/Google update their platforms?
It might not be the best reason to not choose an alternative, but it's
a reasonable reason especially for companies who want to be "safe".</p>

<h3>Cocoa</h3>

<p>Cocoa APIs represent probably 90% of the challenge when writing iOS/OS X
applications. The APIs, while powerful and efficient, are often a pain
to get used to and to learn.</p>

<p>You have the challenge of the documentation and the examples that
are only in Objective-C, requiring that someone <a href="http://www.amazon.com/gp/product/1449380379/ref=as_li_ss_tl?ie=UTF8&amp;tag=merbist-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1449380379">writes a book</a> and/or that
you convert and maintain an enormous amount of documentation.</p>

<p>You also have all the tools provided by Apple which, you often can't
fully use because you aren't using their toolchain.</p>

<p>To be honest, after so many years using MacRuby, I think that the real
value of such a project isn't in the easier syntax but instead in the
fact that you can easily build wrappers and higher level interfaces
around repetitive tasks. Having a mix of a well designed DSL and yet
access to the native object is something extremely powerful.</p>

<h3>Objective-C is evolving.</h3>

<p>Objective-C is evolving, with the introduction of <a href="http://developer.apple.com/library/ios/#releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html">ARC</a>, memory management became much easier. The latest version of clang also granted Objective-C with a nicer syntax thanks to new literals and object subscripting (<a href="http://clang.llvm.org/docs/ObjectiveCLiterals.html">read more</a>). As a matter of fact, Objective-C's syntax is getting closer and closer to Ruby's making the choice to use an alternate much harder.</p>

<p>``` objective-c
// character literals.
NSNumber *theLetterZ = @'Z';          // equivalent to [NSNumber numberWithChar:'Z']</p>

<p>// integral literals.
NSNumber *fortyTwo = @42;             // equivalent to [NSNumber numberWithInt:42]</p>

<p>// floating point literals.
NSNumber *piDouble = @3.1415926535;   // equivalent to [NSNumber numberWithDouble:3.1415926535]</p>

<p>// BOOL literals.
NSNumber *yesNumber = @YES;           // equivalent to [NSNumber numberWithBool:YES]</p>

<p>// Container literals
NSArray *array = @[ @"Hello", NSApp, [NSNumber numberWithInt:42] ];
id value = array[idx];</p>

<p>NSDictionary *dictionary = @{
  @"name" : NSUserName(),
  @"date" : [NSDate date],
  @"processInfo" : [NSProcessInfo processInfo]
};
id oldObject = dictionary[key];
dictionary[key] = newObject;    // replace oldObject with newObject
```</p>

<h3>Performance.</h3>

<p>Even though devices are more and more powerful, performance is often
critical and Apple optimized the performance of their solution for their
language. If you have ever developed a Titanium app, you know that it
can be an issue and you might have to find workarounds to get decent
performance.</p>

<p><strong>Summary:</strong> Based on all these things, once MobiRuby will be released, I will be
able to make a better judgement. But based on what I have seen so far,
I'm quite concerned by the syntax and the performance we will get out of
the box. But time will tell and things can always be improved.
Ruby on iOS/Android is something exciting and I'm looking forward to
testing the first betas.</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Matt Aimonetti]]></title>
  <link href="https://matt.aimonetti.net/atom.xml" rel="self"/>
  <link href="https://matt.aimonetti.net/"/>
  <updated>2019-01-12T15:21:14-08:00</updated>
  <id>https://matt.aimonetti.net/</id>
  <author>
    <name><![CDATA[Matt Aimonetti]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Being the co-founder of a VC backed startup]]></title>
    <link href="https://matt.aimonetti.net/posts/2019/01/12/being-the-co-founder-of-a-vc-backed-startup/"/>
    <updated>2019-01-12T15:16:00-08:00</updated>
    <id>https://matt.aimonetti.net/posts/2019/01/12/being-the-co-founder-of-a-vc-backed-startup</id>
    <content type="html"><![CDATA[<p>Read this article about <a href="https://medium.com/@mattetti/being-the-co-founder-of-a-vc-backed-startup-9709dab8c218">being the co-founder of a VC backed startup on Medium</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maintaining confidence while scaling an Engineering team]]></title>
    <link href="https://matt.aimonetti.net/posts/2018/07/02/building-confidence-as-a-cto/"/>
    <updated>2018-07-02T15:14:00-07:00</updated>
    <id>https://matt.aimonetti.net/posts/2018/07/02/building-confidence-as-a-cto</id>
    <content type="html"><![CDATA[<p>I recently spent some time writing <a href="https://medium.com/@mattetti/building-confidence-as-a-cto-267e1c745552">an article</a> I wish someone else wrote a few years back. I made lots of mistakes as a CTO dealing with a development phase I didn&#8217;t yet have experience with. In this blog post I wrote <a href="https://medium.com/@mattetti/building-confidence-as-a-cto-267e1c745552">about Maintaining confidence while scaling an Engineering team</a>.</p>

<p><a href="https://medium.com/@mattetti/building-confidence-as-a-cto-267e1c745552">Read more here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I found compassion and hope…]]></title>
    <link href="https://matt.aimonetti.net/posts/2017/02/27/i-found-compassion-and-hope-dot-dot-dot/"/>
    <updated>2017-02-27T18:43:00-08:00</updated>
    <id>https://matt.aimonetti.net/posts/2017/02/27/i-found-compassion-and-hope-dot-dot-dot</id>
    <content type="html"><![CDATA[<p>I wrote about <a href="https://medium.com/@mattetti/found-compassion-and-hope-in-prison-f9408bf30f81">my experience going to jail for a day</a>, and how it affected me personally.</p>

<p><a href="https://medium.com/@mattetti/found-compassion-and-hope-in-prison-f9408bf30f81">Read more here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[When to hire a VP of engineering]]></title>
    <link href="https://matt.aimonetti.net/posts/2016/09/27/when-to-hire-a-vp-of-engineering/"/>
    <updated>2016-09-27T12:05:00-07:00</updated>
    <id>https://matt.aimonetti.net/posts/2016/09/27/when-to-hire-a-vp-of-engineering</id>
    <content type="html"><![CDATA[<p>As a follow up of my <a href="https://medium.com/@mattetti/wtf-is-a-cto-24b9ad4d6e50">WTF is a CTO</a> post,
I wrote about <a href="https://medium.com/@mattetti/when-to-a-hire-a-vp-of-engineering-5f510dfad0a2">when is the right time to hire a VP of engineering</a>.</p>

<p><a href="https://medium.com/@mattetti/when-to-a-hire-a-vp-of-engineering-5f510dfad0a2">Read more here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WTF is a CTO]]></title>
    <link href="https://matt.aimonetti.net/posts/2016/09/13/wtf-is-a-cto/"/>
    <updated>2016-09-13T11:58:00-07:00</updated>
    <id>https://matt.aimonetti.net/posts/2016/09/13/wtf-is-a-cto</id>
    <content type="html"><![CDATA[<p>I wrote about <a href="https://medium.com/@mattetti/wtf-is-a-cto-24b9ad4d6e50#.xsc2hq4ys">what it means to be a CTO in a growing startup</a>, especially when you get to the point
where you hire a VP of engineering. Defining the roles a &#8220;full time CTO&#8221; vs a VP of engineering is something
I had to work on and hopefully sharing my experience will help other.</p>

<p><a href="https://medium.com/@mattetti/wtf-is-a-cto-24b9ad4d6e50#.xsc2hq4ys">Read more here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go is for everyone]]></title>
    <link href="https://matt.aimonetti.net/posts/2016/07/28/go-is-for-everyone/"/>
    <updated>2016-07-28T23:45:00-07:00</updated>
    <id>https://matt.aimonetti.net/posts/2016/07/28/go-is-for-everyone</id>
    <content type="html"><![CDATA[<p>I started writing on <a href="https://medium.com/@mattetti/latest">Medium</a> which is more convenient than writing in my own blog.
This <a href="https://medium.com/@mattetti/go-is-for-everyone-b4f84be04c43">new post</a> got quite a lot of traction.</p>

<p>In this article, I&#8217;m questioning the fact that the Go community looks too elitist from the outside and hard to get into.
This is probably mainly due to a lack of documentation targeting new developers and the fact
that we haven&#8217;t yet valued enough new developers. If you consider novices are the future of our community
then you quickly realize it&#8217;s critical to be able to properly welcome them.</p>

<p>Finally, I discuss the reasons why Go is a great first programming language.</p>

<p><a href="https://medium.com/@mattetti/go-is-for-everyone-b4f84be04c43#.psaed2r70">Read more here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DockerCon 2016 Keynote]]></title>
    <link href="https://matt.aimonetti.net/posts/2016/06/27/dockercon-2016-keynote/"/>
    <updated>2016-06-27T23:45:00-07:00</updated>
    <id>https://matt.aimonetti.net/posts/2016/06/27/dockercon-2016-keynote</id>
    <content type="html"><![CDATA[<p>I was invited to take part in this year&#8217;s Docker keynote to discuss how we use Docker at Splice
and how our two companies share the same philosophy. I wrote <a href="https://blog.docker.com/2016/06/docker-for-mac-splice/">a summary blog post</a> of my talk.
And you can read the official <a href="https://blog.docker.com/2016/06/dockercon-general-session-video/">Docker blog post about the keynote</a></p>

<h2>Video</h2>

<iframe width="720" height="480" src="https://www.youtube.com/embed/vE1iDPx6-Ok?start=2770" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to manage Slack constant interruptions – EOD emails]]></title>
    <link href="https://matt.aimonetti.net/posts/2016/01/18/how-to-manage-slack-constant-interruptions-eod-emails/"/>
    <updated>2016-01-18T19:29:00-08:00</updated>
    <id>https://matt.aimonetti.net/posts/2016/01/18/how-to-manage-slack-constant-interruptions-eod-emails</id>
    <content type="html"><![CDATA[<p>Ever since I started <a href="https://splice.com">Splice</a>, I&#8217;ve been really eager to experiment and adapt our process
to be able to be as efficient as possible while still pleasant.
Setting up a process that works is hard because it depends on the size of your company, the team members
and the leadership style. We tried many things as we grew and lots of these things
didn&#8217;t stick, however a few did. One of those is our End of Day email aka EOD email.</p>

<p>In this <a href="https://splice.com/blog/managing-slack-interruptions/">blog post about team communication</a> at Splice,
I go into more details about synchronous vs asynchronous communication, the pros and cons and the process we explicitly defined.</p>

<p>I don&#8217;t know other companies using the EOD email approach yet but unless you&#8217;re a one man show, I can&#8217;t think of a reason not to do it.
I also can&#8217;t stress enough that you need be mindful of others focus when using communication tools such as <a href="https://slack.com/">Slack</a>.</p>

<p><a href="https://splice.com/blog/managing-slack-interruptions/"><img src="https://splice.com/blog/wp-content/uploads/2016/01/You_Waste_A_Lot_Of_Time_At_Work-298x300.png" alt="Interruptions" style="
    display: block;
    margin: auto;
"></a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Audio DSP demystified: Sampling]]></title>
    <link href="https://matt.aimonetti.net/posts/2015/12/15/audio-dsp-demystified-sampling/"/>
    <updated>2015-12-15T08:45:00-08:00</updated>
    <id>https://matt.aimonetti.net/posts/2015/12/15/audio-dsp-demystified-sampling</id>
    <content type="html"><![CDATA[<p> Through this post and the following ones, I will do my best to provide you with the basic knowledge you need to
 understand and implement digital audio signal processing.
 The idea came from a conversation with my friend <a href="http://chadfowler.com/">Chad Fowler</a> who&#8217;s a well-known software developer,
 leader but also a well accomplished musician. Chad was interested in learning the basics of DSP and I can only
 assume he doesn&#8217;t have time to 42 books on the topic, white papers, PHD thesis and try to decipher complex math equations.
 Most DSP code out there is written in C, Assembly or C++ due to the fact that latency is really problematic for real-time audio processing
 applications (<a href="https://en.wikipedia.org/wiki/Field-programmable_gate_array">FPGAs</a> &amp; chipsets with DSP specific instructions are also used).
 There are also a lot of great/old libraries already available for those languages.
 But my goal here isn&#8217;t to teach how to use existing libraries, but to teach how they work so you can implement your own or make educated choices.
I should note that I&#8217;m not an expert in the matter, I have never implemented complex real-time DSP and this series is only meant
as an introduction to the topic.</p>

<p>TL;DR intro series teaching programmers the basic audio DSP concepts in a practical manner. No DSP knowledge is expected.</p>

<h2>Analog to Digital conversion</h2>

<p>To be able to access and manipulate audio data via our code, an audio signal needs to be converted from analog to digital.
This is not something you usually implement yourself, in most cases it is done at the sound card level. Sound cards do the job of converting the
signal, in other words, they are <a href="https://en.wikipedia.org/wiki/Analog-to-digital_converter">analog to digital converters (ADC)</a>.</p>

<p><img src="https://upload.wikimedia.org/wikipedia/commons/f/f0/ADC_Symbol.svg" alt="ADC" /></p>

<p>It&#8217;s very important to understand how the conversion is done because it has direct repercussions on what we will do.</p>

<p>We have a <a href="https://en.wikipedia.org/wiki/Continuous_signal">continuous signal</a> (the audio signal) and we need to convert it into numerical values.
The numerical values needs to represent the sampled analog signal as closely as possible.
To do that, a <a href="https://en.wikipedia.org/wiki/Discrete-time_signal">discrete signal</a> needs to be created. A discrete signal
is a fancy name for a time series representing the sampled signal. In other words, we measure the signal at a certain frequency
(let&#8217;s say 44,100 times a second) and each value (an integer or a floating-point we call a sample) is added to our series. (This article assumes
we are using <a href="https://en.wikipedia.org/wiki/Pulse-code_modulation">PCM</a> representation).</p>

<p><img src="http://www.radio-electronics.com/info/rf-technology-design/digital-signal-processing/waveform_sampling.gif" alt="waveform sampling illustration from http://www.radio-electronics.com/info/rf-technology-design/digital-signal-processing/dsp-basics-tutorial.php" /></p>

<h3>Sampling rate</h3>

<p>The amount of time per second we take a sample from our analog signal is called the <a href="https://en.wikipedia.org/wiki/Sampling_(signal_processing">sampling rate</a>#Sampling_rate).
Common audio sampling rates are 44.1kHz, 48kHz and sometimes 96kHz.</p>

<p>There is a very important explanation about why we need to sample at a value greater than 40kHz.</p>

<p>The human hearing range falls into a frequency range of 20Hz to 20,000 H (that said you probably don&#8217;t hear very much above 17kHz).
A requirement for our analog to digital conversion is that we can capture and then later on recreate an analog signal that will cover
the entire frequency range we are interested in.</p>

<p>The reason we need to sample at a rate greater than 40kHz is due to the findings of <a href="https://en.wikipedia.org/wiki/Harry_Nyquist">Harry Nyquist</a>.
Nyquist, studied and wrote about <a href="https://en.wikipedia.org/wiki/Harry_Nyquist">conversion of continuous to discrete signals</a>.
One of the discoveries he made is called the <a href="https://en.wikipedia.org/wiki/Nyquist_rate">Nyquist rate</a> and simply put it says
that you need to sample at at a greater frequency than twice the bandwidth you want. Since we are trying to sample a range of 20,000Hz
we need to sample at <code>2x20000 = 40000</code> to cover the entire frequency range.</p>

<p>Fun fact, the default 44.1kHZ sampling rate comes Sony setting the standard by recording audio content on video equipment
and wanting to have a system that was PAL/NTSC compatible (PAL runs at 25fps, NTSC at 30fps). They were able to store
the exact same amount of 44,100 samples per seconds using different amounts of lines/frames.</p>

<h3>Bit rate</h3>

<p>The precision of the numerical value we use to store the sample is called the <a href="https://en.wikipedia.org/wiki/Audio_bit_depth">bit depth</a>.
The bit depth will change the range of values we capture, take for instance the sampling example below.</p>

<p><img src="https://upload.wikimedia.org/wikipedia/commons/b/bf/Pcm.svg" alt="4 bit sampling" /></p>

<p>The analog signal in red is being sampled at a 4-bit bit depth meaning that each sample is represented by an integer taking 4 bits in memory.
4 bits give us a maximum range of 16 integer values <code>(4*4)</code> Our sample value will be between 0 and 15. 4-bit precision really isn&#8217;t enough
to properly represent the reach dynamic range of audio signals.
Most audio content is sampled at 16 or 24 bit (8, 20 and 32 bit depths are also sometime used). A 16-bit integer resolution
offers a dynamic range of 96 dB (which can be improved using <a href="https://en.wikipedia.org/wiki/Dither">dithering</a> but that&#8217;s outside of the scope of this article).</p>

<p>Too low of a resolution and you are missing auditive information (and getting extra noise), too high of a resolution and it&#8217;s a waste.
32 floating-point bit depth is often used later on in the audio chain when doing complex audio processing.
This process allows for greater precision when
manipulating audio data and rounding can have a negative effect on the output (<a href="https://en.wikipedia.org/wiki/Digital_audio_workstation">DAWs</a>,
synthesizers, effects&#8230;).
The data is usually converted back to the source bit depth making things easier/transparent to the caller.</p>

<p>Fun fact: The famous TR-909 drum machine only used a bit depth of 6-bit!</p>

<p><img src="https://www.amazona.de/wp-content/uploads/2010/01/1_TR-909_Total.jpg" alt="TR-909" /></p>

<h2>File formats: WAV &amp; AIFF</h2>

<p>Now that we learned how the audio signal is being converted to a digital stream, it&#8217;s interesting to see how it&#8217;s being stored.
The 2 main uncompressed <a href="https://en.wikipedia.org/wiki/Pulse-code_modulation">PCM</a> formats are <a href="https://en.wikipedia.org/wiki/WAV">WAV</a> and <a href="https://en.wikipedia.org/wiki/Audio_Interchange_File_Format">AIFF</a>.
These formats store the same data slightly differently and provides valuable information of the stream content via file headers and
data chunks. To be able to do any kind of offline processing, we need to be able to read and write such formats.
In a future post, we will write a coder/decoder that explains how these file formats work (and get a sneak peek into lossy compression formats such as MP3).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Applied Concurrency in Go]]></title>
    <link href="https://matt.aimonetti.net/posts/2015/12/02/dotgo-applied-concurrency-in-go/"/>
    <updated>2015-12-02T08:20:00-08:00</updated>
    <id>https://matt.aimonetti.net/posts/2015/12/02/dotgo-applied-concurrency-in-go</id>
    <content type="html"><![CDATA[<p><img src="https://farm6.staticflickr.com/5688/22350810834_20caad1e11_k_d.jpg" class=""></p>

<p>Back in November I was in Paris for <a href="http://www.dotgo.eu/">dotGo</a>, one of my favorite Golang conferences.
I was invited to speak and wanted to share something concrete with the audience, something based on my
experience with <a href="http://golang.org">Go</a> at <a href="https://splice.com">Splice</a>. Go is designed for simplicity
with only one way of doing one thing. That makes preparing talks pretty challenging since a lot has already been said
and there is not much more to add. A lot of us pick Go because it&#8217;s has concurrency built-in, but it doesn&#8217;t mean that
writing efficient concurrent code is instinctive or obvious.</p>

<p>I walked the audience through the parallelization of code execution and all the mistakes we usually make.
Using an Arduino and a set of LEDs, I show how goroutines operate and how to write working Go code.</p>

<p><a href="http://www.thedotpost.com/2015/11/matt-aimonetti-applied-concurrency-in-go">Official post about the talk</a></p>

<h2>Video</h2>

<iframe width="720" height="480" src="https://www.youtube.com/embed/TI8OW22WZvQ" frameborder="0" allowfullscreen></iframe>


<h2>Slides</h2>

<script async class="speakerdeck-embed" data-id="c55aca1f604545abbbc143ca65171ec7" data-ratio="1.77777777777778" src="https://matt.aimonetti.net//speakerdeck.com/assets/embed.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[10 years of Ruby]]></title>
    <link href="https://matt.aimonetti.net/posts/2015/10/17/10-years-of-ruby/"/>
    <updated>2015-10-17T23:24:00-07:00</updated>
    <id>https://matt.aimonetti.net/posts/2015/10/17/10-years-of-ruby</id>
    <content type="html"><![CDATA[<p><img src="https://www.evernote.com/shard/s2/sh/cf6c5b2f-bc44-48ec-a9f5-9ccb8b6b1e42/ae4139a8a1a09bc2/res/b99812f5-7c62-422d-81d2-dd1012aa41f8/skitch.jpg?resizeSmall&width=832" class=""></p>

<p>I chose the beautiful city of Medellin, Colombia to say my final goodbye to the awesome Ruby community.
10 years of being part of a community isn&#8217;t nothing and I took time to reflect on my personal
experience and discuss the future of the language and its community.</p>

<h2>Video</h2>

<iframe width="720" height="480" src="https://www.youtube.com/embed/IWIPLzjIhTI" frameborder="0" allowfullscreen></iframe>


<h2>Slides</h2>

<iframe src="https://docs.google.com/presentation/d/1BsFx5Hop8WlATQWIEoYLmlaOfCTsa65ZR9o94Lzz9Jw/embed?start=false&loop=false&delayms=3000" frameborder="0" width="960" height="569" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automate iTunes with JS to wake up in music]]></title>
    <link href="https://matt.aimonetti.net/posts/2015/09/02/automate-itunes-with-js/"/>
    <updated>2015-09-02T20:46:00-07:00</updated>
    <id>https://matt.aimonetti.net/posts/2015/09/02/automate-itunes-with-js</id>
    <content type="html"><![CDATA[<p>Last week, my daughter started Kindergarten. I&#8217;m very happy for her,
especially because she&#8217;s going to an <a href="http://www.edison.smmusd.org/">awesome public school</a>.
As someone who didn&#8217;t grow up in the US, I heard a lot of stories about the American school
system but one thing I didn&#8217;t know is that kids start so early. My
daughter starts at 8:10am! We had to find a way to turn our
sleeping-in family members into morning people.</p>

<p>I found a solution to help us: coding and music!</p>

<p>My goal: to wake up my daughter with a custom music playlist starting a
few minutes before I go see her.</p>

<p>We have an old Mac Mini at home that I recently upgraded it to run Yosemite.
This recent version of OS X added JavaScript as an alternative to <a href="https://en.wikipedia.org/wiki/AppleScript">AppleScript</a>.
My goal is to write a little script that will play a given playlist and
then I want to schedule this script to play every school morning. The
Mac Mini is connected to an Airport Express with usb speakers located in
my daughter&#8217;s bedroom.</p>

<h2>JavaScript for Automation</h2>

<p>Apple has some <a href="https://developer.apple.com/library/mac/releasenotes/InterapplicationCommunication/RN-JavaScriptForAutomation/">documentation</a> about how to use JS to automate different tasks. To be honest the documentation isn&#8217;t really good in comparison to their usual doc.
Also, the technical implementation is pretty hacky/buggy but that won&#8217;t
prevent us to have a bit of fun.</p>

<p>The code to start iTunes and play our playlist if very straight forward:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span> <span class="o">=</span> <span class="nx">Application</span><span class="p">(</span><span class="s1">&#39;iTunes&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">activate</span><span class="p">()</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">stop</span><span class="p">()</span>
</span><span class='line'><span class="nx">playlist</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">sources</span><span class="p">[</span><span class="s2">&quot;Library&quot;</span><span class="p">].</span><span class="nx">userPlaylists</span><span class="p">[</span><span class="s2">&quot;morning&quot;</span><span class="p">]</span>
</span><span class='line'><span class="k">try</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">playlist</span><span class="p">.</span><span class="nx">play</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;The playlist probably doesn&#39;t exist&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you probably guessed, this script loads iTunes and then uses its
scripting API to load the main library and look for a playlist called
&#8220;morning&#8221;.
I&#8217;m not proud of the ugly try/catch, but playlist is an instance of
<code>ObjectSpecifier</code> which isn&#8217;t evaluated until a method is called on it.
You can think of it as a lazy container. The problem is that if we try
to call <code>play()</code> on a playlist we didn&#8217;t find, then an error is thrown.
I didn&#8217;t find a way to check if the underlying value is null so I had to
catch the error.</p>

<p>Once we have the above code, we have two options, put it in a script or
convert it into an app. When developing your automation, it&#8217;s highly
recommended to use <code>Script Editor.app</code> which ships with the OS.
From within the app, you can run your script and test / &#8220;debug&#8221; it.
Script Editor also allows you to export your script as script, script
bundle and app. The easiest way is to export our code as an app:</p>

<p><img src="https://matt.aimonetti.net/images/jxa_app.jpg" alt="Export JS as an app" /></p>

<p>Note that you can also write a script and create a <code>osascript</code> shebang,
or even evalute your automation JS in the terminal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">say</span> <span class="s2">&quot;you are listening to&quot;</span> <span class="err">`</span><span class="nx">osascript</span> <span class="o">-</span><span class="nx">l</span> <span class="nx">JavaScript</span> <span class="o">-</span><span class="nx">e</span> <span class="s1">&#39;Application(&quot;iTunes&quot;).currentTrack.name()&#39;</span><span class="err">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>So we have a script to start iTunes if needed and play our morning
playlist. Now we need to schedule our app to start every school day:</p>

<h2>Launchctl</h2>

<p>OS X has a builtin scheduling system called <a href="http://launchd.info/">launchd</a>. It&#8217;s kind of like a cron scheduler but with more options.
Unfortunately figuring something as simple as scheduling a recurring
script is much harder than it should. So here is my plist file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span>
</span><span class='line'><span class="nt">&lt;plist</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;dict&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>Label<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;string&gt;</span>morning.playlist.itunes<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>ProgramArguments<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;array&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>/usr/bin/open<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>-a<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>wakeup.app<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/array&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>RunAtLoad<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;false/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>StandardErrorPath<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;string&gt;</span>/tmp/morning.playlist.itunes.stderr<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>StandardOutPath<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;string&gt;</span>/tmp/morning.playlist.itunes.stdout<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>StartCalendarInterval<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;array&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dict&gt;</span>
</span><span class='line'>          <span class="nt">&lt;key&gt;</span>Hour<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>          <span class="nt">&lt;integer&gt;</span>6<span class="nt">&lt;/integer&gt;</span>
</span><span class='line'>          <span class="nt">&lt;key&gt;</span>Minute<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>          <span class="nt">&lt;integer&gt;</span>55<span class="nt">&lt;/integer&gt;</span>
</span><span class='line'>          <span class="nt">&lt;key&gt;</span>Weekday<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>          <span class="nt">&lt;integer&gt;</span>1<span class="nt">&lt;/integer&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dict&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dict&gt;</span>
</span><span class='line'>          <span class="nt">&lt;key&gt;</span>Hour<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>          <span class="nt">&lt;integer&gt;</span>6<span class="nt">&lt;/integer&gt;</span>
</span><span class='line'>          <span class="nt">&lt;key&gt;</span>Minute<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>          <span class="nt">&lt;integer&gt;</span>55<span class="nt">&lt;/integer&gt;</span>
</span><span class='line'>          <span class="nt">&lt;key&gt;</span>Weekday<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>          <span class="nt">&lt;integer&gt;</span>2<span class="nt">&lt;/integer&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dict&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dict&gt;</span>
</span><span class='line'>          <span class="nt">&lt;key&gt;</span>Hour<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>          <span class="nt">&lt;integer&gt;</span>6<span class="nt">&lt;/integer&gt;</span>
</span><span class='line'>          <span class="nt">&lt;key&gt;</span>Minute<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>          <span class="nt">&lt;integer&gt;</span>55<span class="nt">&lt;/integer&gt;</span>
</span><span class='line'>          <span class="nt">&lt;key&gt;</span>Weekday<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>          <span class="nt">&lt;integer&gt;</span>3<span class="nt">&lt;/integer&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dict&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dict&gt;</span>
</span><span class='line'>          <span class="nt">&lt;key&gt;</span>Hour<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>          <span class="nt">&lt;integer&gt;</span>6<span class="nt">&lt;/integer&gt;</span>
</span><span class='line'>          <span class="nt">&lt;key&gt;</span>Minute<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>          <span class="nt">&lt;integer&gt;</span>55<span class="nt">&lt;/integer&gt;</span>
</span><span class='line'>          <span class="nt">&lt;key&gt;</span>Weekday<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>          <span class="nt">&lt;integer&gt;</span>4<span class="nt">&lt;/integer&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dict&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dict&gt;</span>
</span><span class='line'>          <span class="nt">&lt;key&gt;</span>Hour<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>          <span class="nt">&lt;integer&gt;</span>6<span class="nt">&lt;/integer&gt;</span>
</span><span class='line'>          <span class="nt">&lt;key&gt;</span>Minute<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>          <span class="nt">&lt;integer&gt;</span>55<span class="nt">&lt;/integer&gt;</span>
</span><span class='line'>          <span class="nt">&lt;key&gt;</span>Weekday<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>          <span class="nt">&lt;integer&gt;</span>5<span class="nt">&lt;/integer&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dict&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/array&gt;</span>
</span><span class='line'><span class="nt">&lt;/dict&gt;</span>
</span><span class='line'><span class="nt">&lt;/plist&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://gist.github.com/mattetti/75fd52c653b9144f303e">Gist</a></p>

<p>Note that I called my app <code>wakeup.app</code> and I put it in my Applications
folder. My launch agent starts the app when it&#8217;s called, but it doesn&#8217;t
do that when the system loads the service (<code>RunAtLoad</code> is set to false).
I&#8217;m also logging out stdout and stderr to tmp files so I can debug if
something goes wrong. Finally the schedule is defined in the <code>StartCalendarInterval</code>
key with a daily entry Monday to Friday at 6:55am.</p>

<p>Save the plist file as <code>wakeup.playlist.itunes.plist</code> and drop it in <code>~/Library/LaunchAgents/</code>
and load it via <code>launchctl</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>$ launchctl load -w ~/Library/LaunchAgents/wakeup.playlist.itunes.plist
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s it, everything should work fine, however if you want to make sure
it will, you might want to unload the plist, edit it so <code>RunAtLoad</code> is
set to true and reload it. At this point, your playlist should play. If
it doesn&#8217;t, then check the log files to see what happened.
When everything is good, unload, go back to the original version and
reload.</p>

<p>There is plenty more you can do with JS Automation for Mac, if like me
you are listening to a lot of music while coding, you might be
interested in knowing that <strong>Spotify</strong> and <strong>VLC</strong> are scriptable (and
so are most browsers).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Go challenge - binary decoding]]></title>
    <link href="https://matt.aimonetti.net/posts/2015/03/03/first-go-challenge-binary-decoding/"/>
    <updated>2015-03-03T23:24:00-08:00</updated>
    <id>https://matt.aimonetti.net/posts/2015/03/03/first-go-challenge-binary-decoding</id>
    <content type="html"><![CDATA[<p>I&#8217;m very glad to have had the chance to be involved with the very first
<a href="http://golang.org">Go</a> challenge. My challenge is related to something we do at <a href="https://splice.com">Splice</a>: binary decoding.</p>

<p>Read more on the <a href="http://golang-challenge.com/go-challenge1/">Go Challenge website</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pattern_1.splice
</span><span class='line'>Saved with HW Version: 0.808-alpha
</span><span class='line'>Tempo: 120
</span><span class='line'>(0) kick     |x---|x---|x---|x---|
</span><span class='line'>(1) snare    |----|x---|----|x---|
</span><span class='line'>(2) clap     |----|x-x-|----|----|
</span><span class='line'>(3) hh-open  |--x-|--x-|x-x-|--x-|
</span><span class='line'>(4) hh-close |x---|x---|----|x--x|
</span><span class='line'>(5) cowbell  |----|----|--x-|----|</span></code></pre></td></tr></table></div></figure>


<p><img src="https://matt.aimonetti.net/images/hex.png" alt="Splice challenge hex" /></p>

<p>The challenge is going on for 2 weeks until March 15, a new challenge
will be posted on April first. Prizes and conditions available on the
website. Comments and discussions available on
<a href="https://news.ycombinator.com/item?id=9125480">HackerNews</a></p>

<p>Note that I also wrote <a href="https://github.com/splicers/sm-808">another challenge</a> that we usually give our
frontend candidates. If you&#8217;re not into Go and prefer JS, you might like
this challenge better.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding &amp; sharing Rails sessions]]></title>
    <link href="https://matt.aimonetti.net/posts/2014/09/13/understanding-and-sharing-rails-sessions/"/>
    <updated>2014-09-13T10:15:00-07:00</updated>
    <id>https://matt.aimonetti.net/posts/2014/09/13/understanding-and-sharing-rails-sessions</id>
    <content type="html"><![CDATA[<p>In September 2014, I gave this talk at <a href="http://www.baruco.org/">Baruco</a>
in Barcelona, Spain. The talk focuses on:</p>

<ul>
<li>how session authentication works in Ruby on Rails,</li>
<li>the crypto used to protect the data,</li>
<li>the security implications and</li>
<li>how to share the session with applications written in other languages than Ruby (with an example in <a href="http://golang.org">Go</a>).</li>
</ul>


<p>To illustrate this pretty dry topic, I told the story of Alice and Bob,
two entrepreneurs building a succesful web application and facing some serious challenges.</p>

<h2>Video</h2>

<iframe width="640" height="480" src="https://matt.aimonetti.net//www.youtube.com/embed/vC5xR5CgThM" frameborder="0" allowfullscreen></iframe>


<h2>Slides</h2>

<script async class="speakerdeck-embed" data-slide="5" data-id="9260300033980132573d121bd1ded631" data-ratio="1.33333333333333" src="https://matt.aimonetti.net//speakerdeck.com/assets/embed.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go at Splice (Google I/O 2014)]]></title>
    <link href="https://matt.aimonetti.net/posts/2014/06/23/go-at-splice-google-i-slash-o-2014/"/>
    <updated>2014-06-23T10:48:00-07:00</updated>
    <id>https://matt.aimonetti.net/posts/2014/06/23/go-at-splice-google-i-slash-o-2014</id>
    <content type="html"><![CDATA[<p>The week of June 23rd was a good week for gophers in San Francisco. Go was a big part of Google I/O on Wednesday and Thursday, and on Monday Google run a Go SummerFest, a special instance of the GoSF meetup.</p>

<p>I gave a talk at Go SummerFest and then later on another one during I/O. For more
information about the events, see <a href="http://blog.golang.org/io2014">this blog post from the Go team</a>.</p>

<h2>Slides</h2>

<script async class="speakerdeck-embed" data-id="fb7887b033aa0132ef480af01cce597a" data-ratio="1.33333333333333" src="https://matt.aimonetti.net//speakerdeck.com/assets/embed.js"></script>


<p><a href="https://docs.google.com/a/golang.org/file/d/0B-nws9GU_6qVZklnNnJITlhSbXc/edit">Full screen slides</a></p>

<h2>Video</h2>

<p>My talk was recorded but it is not yet online.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go, Robots and code refactoring]]></title>
    <link href="https://matt.aimonetti.net/posts/2014/04/28/refactoring-go-code/"/>
    <updated>2014-04-28T10:45:00-07:00</updated>
    <id>https://matt.aimonetti.net/posts/2014/04/28/refactoring-go-code</id>
    <content type="html"><![CDATA[<p><a href="http://golang.org/">Go</a> aka golang is an amazing language but also a language that
is really easy to learn due to its small scope.
If you have some coding experience, you will be able to have fully working code
in a matter of minutes otherwise you might want to read <a href="http://www.golangbootcamp.com/">my free book</a> (WIP).</p>

<div style="text-align:center; padding:2em 0">
  <a href="http://www.golangbootcamp.com/"><img src="https://matt.aimonetti.net/images/matt_aimonetti-go_bootcamp.png" alt="Go Bootcamp free book (golang)"></a>
</div>


<p>Very much like with many other programming languages, a challenging part
of Go is to learn how to write idiomatic code.
The good news is that Go makes refactoring easy (and already has a lot
of conventions).
I strongly recommend <a href="http://peter.bourgon.org/go-in-production/">this post</a> from Peter Bourgon about Go at SoundCloud and
the extra conventions they follow (<a href="https://splice.com">Splice</a> also
follows the same conventions).</p>

<p>One of my favorite Go projects is the <a href="http://gobot.io">gobot</a> project
by <a href="http://hybridgroup.com/">HybridGroup</a>.</p>

<div style="text-align:center; padding:2em 0">
<a href="http://gobot.io/"><img src="https://matt.aimonetti.net/images/gobotio.png" alt="Gobot"></a>
</div>


<p>The Gobot project is pretty young and I noticed a few things that
could be improved so I offered my help to <a href="https://twitter.com/deadprogram">Ron</a>,
<a href="https://twitter.com/adzankich">Adrian</a> and the rest of the team.
Our discussion quickly turned into a fun group refactoring
session (featuring <a href="https://twitter.com/kytrinyx">@kytrinyx</a>,
<a href="https://twitter.com/deadprogram">@deadprogram</a>,
<a href="https://twitter.com/codegangsta">@codegangsta</a>,
<a href="https://twitter.com/jnbeck">@jnbeck</a>,
<a href="https://twitter.com/adzankich">@adzankich</a> )</p>

<div style="text-align:center; padding:2em 0">
  <img src="https://matt.aimonetti.net/images/matt_aimonetti-go_refactoring.jpg" alt="Go refactoring at GopherCon">
</div>


<h2>Packages</h2>

<p>Gobot is split into multiple packages, a core and a few other packages.
The gobot team, out of habit chose to put a package per repo.
After further discussions, we chose to bring all official packages
inside the same repo to keep things easier and to keep the import paths
clean and logical.</p>

<p>So instead of having:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>github.com/hybridgroup/gobot
</span><span class='line'>github.com/hybridgroup/gobot-sphero
</span><span class='line'>github.com/hybridgroup/gobot-...</span></code></pre></td></tr></table></div></figure>


<p>All the none-core packages are moved to subdirectories:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>github.com/hybridgroup/gobot
</span><span class='line'>github.com/hybridgroup/gobot/sphero
</span><span class='line'>github.com/hybridgroup/gobot/...</span></code></pre></td></tr></table></div></figure>


<p>This also allowed us to fix the package names
<code>gobot-sphero</code> is now simply <code>sphero</code></p>

<p>Which also allowed us to simplify the following code:</p>

<p>From:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">type</span> <span class="n">SpheroAdaptor</span> <span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">gobot</span><span class="p">.</span><span class="n">Adaptor</span>
</span><span class='line'>  <span class="n">sp</span> <span class="n">io</span><span class="p">.</span><span class="n">ReadWriteCloser</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">type</span> <span class="n">Adaptor</span> <span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">gobot</span><span class="p">.</span><span class="n">Adaptor</span>
</span><span class='line'>  <span class="n">sp</span> <span class="n">io</span><span class="p">.</span><span class="n">ReadWriteCloser</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We did that with a few other types and methods all over the packages.</p>

<p>We had a discussion about what lead to the multiple repos vs
one repo. There are legitimate cases for both approaches but in this
situation, the decision was based on a misunderstanding. The author
thought that by importing the top package, all sub packages would
also be somewhat included in the build, making the binary bigger than
needed. Since Go only compiles and links packages imported, moving all
packages within the same repo wouldn&#8217;t change the binary output.
Note that this is not because in this specific case we have all packages
in the same repo that this is the right thing to do every single time.</p>

<h2>doc.go</h2>

<p>By conventions, package should contain a <code>doc.go</code> file that contains
an overview of the package and often some information so the developer
trying to use the library can find the right entry points.</p>

<p>As usual, the standard libraries are a good example,
<a href="http://golang.org/src/pkg/net/http/doc.go">here is the net/http <code>doc.go</code> file</a>.</p>

<h2>Using a constructor</h2>

<p>We spent some time refactoring <code>master.go</code> which is the file implementing
the code handling one or multiple robots (which can each have multiple devices).</p>

<p>The original function code looked like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">func</span> <span class="n">GobotMaster</span><span class="p">()</span> <span class="p">*</span><span class="n">Master</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">m</span> <span class="p">:=</span> <span class="nb">new</span><span class="p">(</span><span class="n">Master</span><span class="p">)</span>
</span><span class='line'>  <span class="n">m</span><span class="p">.</span><span class="n">NumCPU</span> <span class="p">=</span> <span class="n">runtime</span><span class="p">.</span><span class="n">NumCPU</span><span class="p">()</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">m</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are a few things that aren&#8217;t really idiomatic in this code.
The first thing is that by convention, constructors are usually called <code>New&lt;Type&gt;</code>.
Secondly, the <a href="http://peter.bourgon.org/go-in-production/">community seems to follow</a> the following stylistic choice:
only use <code>new</code> and <code>make</code> when you need to set the capacity (<code>make([]string,3)</code>)
Finally we don&#8217;t need to allocate a variable. Here is the refactored code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">func</span> <span class="n">NewMaster</span><span class="p">()</span> <span class="p">*</span><span class="n">Master</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">&amp;</span><span class="n">Master</span><span class="p">{</span><span class="n">NumCPU</span><span class="p">:</span> <span class="n">runtime</span><span class="p">.</span><span class="n">NumCPU</span><span class="p">()}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Cleanup package vars</h2>

<p>In the original code, we had a variable called <code>trap</code> which was
a function living at the top level of the package:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">var</span> <span class="n">trap</span> <span class="p">=</span> <span class="k">func</span><span class="p">(</span><span class="n">c</span> <span class="k">chan</span> <span class="n">os</span><span class="p">.</span><span class="n">Signal</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">signal</span><span class="p">.</span><span class="n">Notify</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">os</span><span class="p">.</span><span class="n">Interrupt</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The func was then used to handle signals. The author
chose to use a variable so he could mutate it in the test suite and
avoid sending an interrupt when testing.
We realized we could avoid having this function variable at the top of the package by moving
it as a field on the <code>Master</code> type and setting the default func in the constructor.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">func</span> <span class="n">NewMaster</span><span class="p">()</span> <span class="p">*</span><span class="n">Master</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">&amp;</span><span class="n">Master</span><span class="p">{</span>
</span><span class='line'>      <span class="n">NumCPU</span><span class="p">:</span> <span class="n">runtime</span><span class="p">.</span><span class="n">NumCPU</span><span class="p">(),</span>
</span><span class='line'>      <span class="n">trap</span><span class="p">:</span> <span class="k">func</span><span class="p">(</span><span class="n">c</span> <span class="k">chan</span> <span class="n">os</span><span class="p">.</span><span class="n">Signal</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">signal</span><span class="p">.</span><span class="n">Notify</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">os</span><span class="p">.</span><span class="n">Interrupt</span><span class="p">)</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code still behaves the same and we can still overwrite the trap function in our tests
(since the tests are part of the same packge, the non exported field is available)
but we got rid of a top level var.</p>

<h2>Reading from a channel</h2>

<p>The following code was ranging over a predefined channel (<code>c</code>) of signals.
and when a signal would arrive, all robots belonging to the master
would be halted and disconnected.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">for</span> <span class="n">_</span> <span class="p">=</span> <span class="k">range</span> <span class="n">c</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">r</span> <span class="p">:=</span> <span class="k">range</span> <span class="n">m</span><span class="p">.</span><span class="n">Robots</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">m</span><span class="p">.</span><span class="n">Robots</span><span class="p">[</span><span class="n">r</span><span class="p">].</span><span class="n">haltDevices</span><span class="p">()</span>
</span><span class='line'>      <span class="n">m</span><span class="p">.</span><span class="n">Robots</span><span class="p">[</span><span class="n">r</span><span class="p">].</span><span class="n">finalizeConnections</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">break</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code above works well but could be cleaned up a little:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// waiting on something coming on the channel</span>
</span><span class='line'><span class="p">&lt;-</span> <span class="n">c</span>
</span><span class='line'><span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">r</span> <span class="p">:=</span> <span class="k">range</span> <span class="n">m</span><span class="p">.</span><span class="n">Robots</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">r</span><span class="p">.</span><span class="n">haltDevices</span><span class="p">()</span>
</span><span class='line'>  <span class="n">r</span><span class="p">.</span><span class="n">finalizeConnections</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code does the same thing but simpler.
We are trying to read from the channel which will block
(we don&#8217;t care about the result so we don&#8217;t capture or could have used an underscore).
Then we loop through each robot and stop them.
We managed to remove a for loop on the channel (with an odd break)
and made the code intent clearer.</p>

<h2>Chainable functions and typed nils</h2>

<p>Next, we tackled the following method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">func</span> <span class="p">(</span><span class="n">m</span> <span class="p">*</span><span class="n">Master</span><span class="p">)</span> <span class="n">FindRobotDevice</span><span class="p">(</span><span class="n">name</span> <span class="nb">string</span><span class="p">,</span> <span class="n">device</span> <span class="nb">string</span><span class="p">)</span> <span class="p">*</span><span class="n">device</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">robot</span> <span class="p">:=</span> <span class="n">m</span><span class="p">.</span><span class="n">FindRobot</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">robot</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">robot</span><span class="p">.</span><span class="n">GetDevice</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">nil</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The funny thing about this method is that it&#8217;s not needed.
We could get the same result by calling:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="n">m</span><span class="p">.</span><span class="n">FindRobot</span><span class="p">(</span><span class="s">&quot;bot name&quot;</span><span class="p">).</span><span class="n">GetDevice</span><span class="p">(</span><span class="s">&quot;laser&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>When I said that, someone suggested that it might be a bad idea
since <code>FindRobot()</code> might return <code>nil</code> and now we would be calling
<code>GetDevice()</code> on <code>nil</code> and bad things would happen.
Looking at the code, it was actually easy to fix.</p>

<p>Here is the original code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">func</span> <span class="p">(</span><span class="n">r</span> <span class="p">*</span><span class="n">Robot</span><span class="p">)</span> <span class="n">GetDevice</span><span class="p">(</span><span class="n">name</span> <span class="nb">string</span><span class="p">)</span> <span class="p">*</span><span class="n">device</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">device</span> <span class="p">:=</span> <span class="k">range</span> <span class="n">r</span><span class="p">.</span><span class="n">devices</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">device</span><span class="p">.</span><span class="n">Name</span> <span class="p">==</span> <span class="n">name</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">device</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">nil</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is the refactored version:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">func</span> <span class="p">(</span><span class="n">r</span> <span class="p">*</span><span class="n">Robot</span><span class="p">)</span> <span class="n">GetDevice</span><span class="p">(</span><span class="n">name</span> <span class="nb">string</span><span class="p">)</span> <span class="p">*</span><span class="n">device</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">r</span> <span class="p">==</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">nil</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">device</span> <span class="p">:=</span> <span class="k">range</span> <span class="n">r</span><span class="p">.</span><span class="n">devices</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">device</span><span class="p">.</span><span class="n">Name</span> <span class="p">==</span> <span class="n">name</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">device</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">nil</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Did you spot the difference? We just added a check to see if the pointer (<code>r</code>)
was nil, if it is, we just return <code>nil</code>.
When I added the code above, the person who was worried
about calling <code>GetDevice()</code> on <code>nil</code> was scratching his head.</p>

<p>Golang does something very interesting (and a bit surprising if you come
from a dynamic language),
it returns a nil pointer of the type we defined as return type.
Let&#8217;s walk through the code by rewriting it slightly differently:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">var</span> <span class="n">bot</span> <span class="p">*</span><span class="n">Robot</span>
</span><span class='line'><span class="n">bot</span> <span class="p">=</span> <span class="n">m</span><span class="p">.</span><span class="n">FindRobot</span><span class="p">(</span><span class="s">&quot;unknown name&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point if <code>FindRobot()</code> didn&#8217;t find a robot, <code>bot</code> is still
of type <code>*Robot</code> but the pointer is nil.
Because we defined a method <code>GetDevice()</code> on <code>*Robot</code>, we
can call:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="n">bot</span><span class="p">.</span><span class="n">GetDevice</span><span class="p">(</span><span class="s">&quot;x-ray&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>GetDevice()</code> method will execute and will return <code>nil</code> right
away because we check if the pointer is <code>nil</code>.</p>

<p>The fact that nil pointers have types has 2 important implications,
the first one is that you can nicely chain methods without
checking at the caller site if the returned value is <code>nil</code>.
The second is that your methods should expect to be potentially
called on a nil pointer and should properly handle such cases.</p>

<p><strong>Note</strong>: Go team member <a href="https://twitter.com/enneff">Andrew Gerrand</a>
suggested on <a href="https://news.ycombinator.com/item?id=7667554">Hacker News</a>
to name the method <code>Device</code> instead of <code>GetDevice</code>. The word <code>Get</code> is almost always redundant.
In the same chain of thoughts, maybe we should rename <code>FindRobot</code> just <code>Robot</code>.</p>

<h2>Collection types / type aliasing</h2>

<p>I&#8217;m writing this post on my way back from GopherCon and there
was one more thing I wanted to clean up and share with you.
This is a nice pattern I use often to simplify my code.</p>

<p>Our <code>Robot</code> type has a <code>connections</code> field and a <code>devices</code> field:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">type</span> <span class="n">Robot</span> <span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// .. fields removed to simplify the example</span>
</span><span class='line'>  <span class="n">devices</span>       <span class="p">[]*</span><span class="n">device</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To avoid always having to manually loop through the slice, a method is defined on
pointers to <code>Robot</code>. This method iterates over
the devices and halts them:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">func</span> <span class="p">(</span><span class="n">r</span> <span class="p">*</span><span class="n">Robot</span><span class="p">)</span> <span class="n">haltDevices</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">device</span> <span class="p">:=</span> <span class="k">range</span> <span class="n">r</span><span class="p">.</span><span class="n">devices</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">device</span><span class="p">.</span><span class="n">Halt</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code is totally fine but from an API design perspective, wouldn&#8217;t it be nicer
to use?:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="n">r</span><span class="p">.</span><span class="n">devices</span><span class="p">().</span><span class="n">Halt</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>One of the nice things with this approach is that the concept of halting, which
really belongs to the devices, doesn&#8217;t need to leak into the <code>Robot</code> world.</p>

<p>To implement the suggested API change, we need to define a <a href="http://www.golangbootcamp.com/book/methods_and_interfaces#uid90">type alias</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">type</span> <span class="n">DeviceCollection</span> <span class="p">[]*</span><span class="n">device</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can now define methods on our new type:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">func</span> <span class="p">(</span><span class="n">c</span> <span class="n">DeviceCollection</span><span class="p">)</span> <span class="n">Halt</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">device</span> <span class="p">:=</span> <span class="k">range</span> <span class="n">c</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">device</span><span class="p">.</span><span class="n">Halt</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We then need to update our <code>Robot</code> type:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">type</span> <span class="n">Robot</span> <span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// .. fields removed to simplify the example</span>
</span><span class='line'>  <span class="n">devices</span>       <span class="n">DeviceCollection</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And we are done with our refactoring.</p>

<p>One last note, since we might need to call different methods on our collection
we could create an iterator method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">func</span> <span class="p">(</span><span class="n">c</span> <span class="n">DeviceCollection</span><span class="p">)</span> <span class="n">Each</span><span class="p">(</span><span class="n">f</span> <span class="k">func</span><span class="p">(*</span><span class="n">device</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">d</span> <span class="p">:=</span> <span class="k">range</span> <span class="n">c</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">f</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// which can be called like so</span>
</span><span class='line'><span class="n">r</span><span class="p">.</span><span class="n">devices</span><span class="p">.</span><span class="n">Each</span><span class="p">(</span><span class="k">func</span><span class="p">(</span><span class="n">d</span> <span class="p">*</span><span class="n">device</span><span class="p">){</span>
</span><span class='line'>  <span class="n">d</span><span class="p">.</span><span class="n">Halt</span><span class="p">()</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>Needless to say that we had fun. The refactoring went much further
and we removed the use of reflections, some sleeps and much more.
The code is going through a nice cleanup before reaching 1.0 and
I can only encourage everybody to play with <a href="http://gobot.io">Gobot</a>,
there are very few things as fun as Go and Robots!
(The code is open sourced, look at it, add new drivers, send PRs!)</p>

<p>I&#8217;d like to thank <a href="https://twitter.com/deadprogram">Ron Evans</a> and the <a href="http://hybridgroup.com/">Hybrid Group</a>
for  open sourcing their code and sharing the fun with all of us.
I can&#8217;t wait for the next LA Go + Robot hack night.</p>

<p>Finally, <a href="https://splice.com">Splice</a> is hiring, our stack uses a lot of
different technologies but our backend is all in Go and we are always
looking for talented engineers. Drop me a line if interested.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Books to read in 2014]]></title>
    <link href="https://matt.aimonetti.net/posts/2013/12/31/books-to-read-in-2014/"/>
    <updated>2013-12-31T09:00:00-08:00</updated>
    <id>https://matt.aimonetti.net/posts/2013/12/31/books-to-read-in-2014</id>
    <content type="html"><![CDATA[<p>I like to read and I have a great community on Twitter so I asked them
what they think others and myself should read in 2014.
Here is the compiled list of the recommended books.
The good news is that most of these books are under $10, so why not
picking a couple for the new year?</p>

<p>A big thanks to all the people who recommended these books, I&#8217;m looking
forward to 2014!</p>

<table>
  <thead>
  <tr>
    <th style="width:20%; text-align:center"> Cover  </th>
    <th style="width:30%; text-align:center"> Title </th>
    <th style="width:20%; text-align:center"> Type </th>
    <th style="width:30%; text-align:center"> Recommended by</th>
  </tr>
  </thead>
  <tbody>

  <tr>
    <td><a href="http://www.amazon.com/gp/product/B008U4HH54/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B008U4HH54&linkCode=as2&tag=merbist-20"><img src="https://images-na.ssl-images-amazon.com/images/I/51rwkxlzOQL._SL160_.jpg" alt="The Interestings" border="0" style="padding-top:10px"></a></td>
    <td><a href="http://www.amazon.com/gp/product/B008U4HH54/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B008U4HH54&linkCode=as2&tag=merbist-20" target="_blank">The Interestings</a></td>
    <td>Novel</td>
    <td><a title="@aweissman" href="https://twitter.com/aweissman" target="_blank"> <img src='https://pbs.twimg.com/profile_images/344513261581924513/b3735cda4529be5530c9d29b6f8e148e_bigger.jpeg' ><br /> Andrew Weissman<br />@aweissman</a></a></td>
  </tr>

  <tr>
    <td><a href="http://www.amazon.com/gp/product/B00AEBETMK/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B00AEBETMK&linkCode=as2&tag=merbist-20"><img src="https://images-na.ssl-images-amazon.com/images/I/51mquDqvXDL._SL160_.jpg" alt="Lexicon" border="0" style="padding-top:10px"></a></td>
    <td><a href="http://www.amazon.com/gp/product/B00AEBETMK/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B00AEBETMK&linkCode=as2&tag=merbist-20" target="_blank">Lexicon</a></td>
    <td>Novel</td>
    <td><a title="@Adkron" href="https://twitter.com/Adkron" target="_blank"> <img src='https://pbs.twimg.com/profile_images/3485440049/a0f1a8fd26883c905443be6b17091a43_bigger.jpeg' ><br /> Amos King<br />@Adkron</a></a></td>
  </tr>

  <tr>
    <td><a href="https://www.amazon.com/dp/B004X6PRO6?tag=merbist-20&camp=0&creative=0&linkCode=as4&creativeASIN=B004X6PRO6&adid=040WG8W6HCZ9D7GW6FCZ&"><img src="https://images-na.ssl-images-amazon.com/images/I/416VaBI-AnL._SL160_.jpg" alt="The Orphan Master's Son (Pulitzer Prize for Fiction)" border="0" style="padding-top:10px"></a></td>
    <td><a href="https://www.amazon.com/dp/B004X6PRO6?tag=merbist-20&camp=0&creative=0&linkCode=as4&creativeASIN=B004X6PRO6&adid=040WG8W6HCZ9D7GW6FCZ&" target="_blank">The Orphan Master&#8217;s Son (Pulitzer Prize for Fiction)</a></td>
    <td>Novel</td>
    <td><a title="@bryanwoods" href="https://twitter.com/bryanwoods" target="_blank"> <img src='https://pbs.twimg.com/profile_images/378800000586125380/e28de02be744272035a9b5509d5ab576_bigger.jpeg' ><br /> Bryan Woods<br />@bryanwoods</a></a></td>
  </tr>

  <tr>
    <td><a href="http://www.amazon.com/gp/product/B008J4NBHI/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B008J4NBHI&linkCode=as2&tag=merbist-20"><img src="https://images-na.ssl-images-amazon.com/images/I/510e7pW7-YL._SL160_.jpg" alt="The Flamethrowers" border="0" style="padding-top:10px"></a></td>
    <td><a href="http://www.amazon.com/gp/product/B008J4NBHI/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B008J4NBHI&linkCode=as2&tag=merbist-20" target="_blank">The Flamethrowers</a></td>
    <td>Novel</td>
    <td><a title="@aweissman" href="https://twitter.com/aweissman" target="_blank"> <img src='https://pbs.twimg.com/profile_images/344513261581924513/b3735cda4529be5530c9d29b6f8e148e_bigger.jpeg' ><br /> Andrew Weissman<br />@aweissman</a></a></td>
  </tr>

  <tr>
    <td><a href="http://www.amazon.com/gp/product/B008FPOIT6/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B008FPOIT6&linkCode=as2&tag=merbist-20"><img src="https://images-na.ssl-images-amazon.com/images/I/51uYnHtUXLL._SL160_.jpg" alt="Mr. Penumbra's 24-Hour Bookstore" border="0" style="padding-top:10px"></a></td>
    <td><a href="http://www.amazon.com/gp/product/B008FPOIT6/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B008FPOIT6&linkCode=as2&tag=merbist-20" target="_blank">Mr. Penumbra&#8217;s 24-Hour Bookstore</a></td>
    <td>Novel</td>
    <td><a title="@conrey" href="https://twitter.com/conrey" target="_blank"> <img src='https://pbs.twimg.com/profile_images/378800000197700668/7625b773ea917bcd87aa8c2a0be8588f_bigger.jpeg' ><br /> Chris Conrey<br />@conrey</a></a></td>
  </tr>

  <tr>
    <td><a href="http://www.amazon.com/gp/product/B000FBJF8C/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B000FBJF8C&linkCode=as2&tag=merbist-20"><img src="https://images-na.ssl-images-amazon.com/images/I/41HZER4774L._SL160_.jpg" alt="Lying Awake" border="0" style="padding-top:10px"></a></td>
    <td><a href="http://www.amazon.com/gp/product/B000FBJF8C/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B000FBJF8C&linkCode=as2&tag=merbist-20" target="_blank">Lying Awake</a></td>
    <td>Novel</td>
    <td><a title="@aweissman" href="https://twitter.com/aweissman" target="_blank"> <img src='https://pbs.twimg.com/profile_images/344513261581924513/b3735cda4529be5530c9d29b6f8e148e_bigger.jpeg' ><br /> Andrew Weissman<br />@aweissman</a></a></td>
  </tr>

  <tr>
    <td><a href="http://www.amazon.com/gp/product/B000FBFO8C/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B000FBFO8C&linkCode=as2&tag=merbist-20"><img src="https://images-na.ssl-images-amazon.com/images/I/31kDOO-T2lL._SL160_.jpg" alt="Perdido Street Station" border="0" style="padding-top:10px"></a></td>
    <td><a href="http://www.amazon.com/gp/product/B000FBFO8C/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B000FBFO8C&linkCode=as2&tag=merbist-20" target="_blank">Perdido Street Station</a></td>
    <td>Novel</td>
    <td><a title="@olg" href="https://twitter.com/olg" target="_blank"> <img src='https://pbs.twimg.com/profile_images/204337634/935afae3375820ecc0bfbe5288d9b411-2_bigger.jpeg' ><br /> Olivier Gutknecht<br />@olg</a></a></td>
  </tr>

  <tr>
    <td><a href="http://www.amazon.com/gp/product/B004CFA91Y/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B004CFA91Y&linkCode=as2&tag=merbist-20"><img src="https://images-na.ssl-images-amazon.com/images/I/51MCnQRKCyL._SL160_.jpg" alt="The Sisters Brothers" border="0" style="padding-top:10px"></a></td>
    <td><a href="http://www.amazon.com/gp/product/B004CFA91Y/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B004CFA91Y&linkCode=as2&tag=merbist-20" target="_blank">The Sisters Brothers</a></td>
    <td>Novel</td>
    <td><a title="@aweissman" href="https://twitter.com/aweissman" target="_blank"> <img src='https://pbs.twimg.com/profile_images/344513261581924513/b3735cda4529be5530c9d29b6f8e148e_bigger.jpeg' ><br /> Andrew Weissman<br />@aweissman</a></a></td>
  </tr>

  <tr>
    <td><a href="http://www.amazon.com/gp/product/B000OZ0NXA/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B000OZ0NXA&linkCode=as2&tag=merbist-20"><img src="https://images-na.ssl-images-amazon.com/images/I/51zzGBqKVPL._SL160_.jpg" alt="Killing Floor (Jack Reacher, No. 1)" border="0" style="padding-top:10px"></a></td>
    <td><a href="http://www.amazon.com/gp/product/B000OZ0NXA/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B000OZ0NXA&linkCode=as2&tag=merbist-20" target="_blank">Killing Floor (Jack Reacher, No. 1)</a></td>
    <td>Novel</td>
    <td><a title="@drnic" href="https://twitter.com/drnic" target="_blank"> <img src='https://pbs.twimg.com/profile_images/2243751587/drnic_by_jeff_casimir_at_railsconf2010_-_thumbnail_bigger.png' ><br /> Dr Nic<br />@drnic</a></a></td>
  </tr>

  <tr>
    <td><a href="http://www.amazon.com/gp/product/B003RRXXMA/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B003RRXXMA&linkCode=as2&tag=merbist-20"><img src="https://images-na.ssl-images-amazon.com/images/I/51KOAfltTRL._SL160_.jpg" alt="Jonathan Strange and Mr Norrell" border="0" style="padding-top:10px"></a></td>
    <td><a href="http://www.amazon.com/gp/product/B003RRXXMA/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B003RRXXMA&linkCode=as2&tag=merbist-20" target="_blank">Jonathan Strange and Mr Norrell</a></td>
    <td>Novel</td>
    <td><a title="@olg" href="https://twitter.com/olg" target="_blank"> <img src='https://pbs.twimg.com/profile_images/204337634/935afae3375820ecc0bfbe5288d9b411-2_bigger.jpeg' ><br /> Olivier Gutknecht<br />@olg</a></a></td>
  </tr>

  <tr>
    <td><a href="https://www.amazon.com/dp/B00555X8OA?tag=merbist-20&camp=0&creative=0&linkCode=as4&creativeASIN=B00555X8OA&adid=0PMMZTW1D2GZ2JYSBZ7S&"><img src="https://images-na.ssl-images-amazon.com/images/I/41shZGS-G%2BL._SL160_.jpg" alt="Thinking, Fast and Slow" border="0" style="padding-top:10px"></a></td>
    <td><a href="https://www.amazon.com/dp/B00555X8OA?tag=merbist-20&camp=0&creative=0&linkCode=as4&creativeASIN=B00555X8OA&adid=0PMMZTW1D2GZ2JYSBZ7S&" target="_blank">Thinking, Fast and Slow</a></td>
    <td>Psychology / Business Decision-Making</td>
    <td><a title="@atduskgreg" href="https://twitter.com/atduskgreg" target="_blank"> <img src='https://pbs.twimg.com/profile_images/413083183471538176/pxJfy0v1_bigger.png' ><br /> Greg Borenstein<br />@atduskgreg</a></a></td>
  </tr>

  <tr>
    <td><a href="http://www.amazon.com/gp/product/B007V65R54/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B007V65R54&linkCode=as2&tag=merbist-20"><img src="https://images-na.ssl-images-amazon.com/images/I/51ag2JxaFxL._SL160_.jpg" alt="The Signal and the Noise: Why So Many Predictions Fail-but Some Don't" border="0" style="padding-top:10px"></a></td>
    <td><a href="http://www.amazon.com/gp/product/B007V65R54/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B007V65R54&linkCode=as2&tag=merbist-20" target="_blank">The Signal and the Noise: Why So Many Predictions Fail-but Some Don&#8217;t</a></td>
    <td>Business Planning & Forecasting</td>
    <td><a title="@roidrage" href="https://twitter.com/roidrage" target="_blank"> <img src='https://pbs.twimg.com/profile_images/2938540224/9ffc554b0eabb077a915cfe0d56f3c1f_bigger.jpeg' ><br /> Mathias Meyer<br />@roidrage</a></a></td>
  </tr>

  <tr>
    <td><a href="http://www.amazon.com/gp/product/B001S59CP0/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B001S59CP0&linkCode=as2&tag=merbist-20"><img src="https://images-na.ssl-images-amazon.com/images/I/41ukeeK16zL._SL160_.jpg" alt="The Life You Can Save: Acting Now to End World Poverty" border="0" style="padding-top:10px"></a></td>
    <td><a href="http://www.amazon.com/gp/product/B001S59CP0/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B001S59CP0&linkCode=as2&tag=merbist-20" target="_blank">The Life You Can Save: Acting Now to End World Poverty</a></td>
    <td>Philanthropy & Charity</td>
    <td><a title="@tpdubs2" href="https://twitter.com/tpdubs2" target="_blank"> <img src='https://pbs.twimg.com/profile_images/1875371426/IMG_1963_bigger.jpg' ><br /> Theresa Preston-Werner<br />@tpdubs2</a></a></td>
  </tr>

  <tr>
    <td><a href="http://www.amazon.com/gp/product/B005VSRFEA/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B005VSRFEA&linkCode=as2&tag=merbist-20"><img src="https://images-na.ssl-images-amazon.com/images/I/51LhBKtrCZL._SL160_.jpg" alt="Thinking in Systems: A Primer" border="0" style="padding-top:10px"></a></td>
    <td><a href="http://www.amazon.com/gp/product/B005VSRFEA/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B005VSRFEA&linkCode=as2&tag=merbist-20" target="_blank">Thinking in Systems: A Primer</a></td>
    <td>Problem Solving</td>
    <td><a title="@roidrage" href="https://twitter.com/roidrage" target="_blank"> <img src='https://pbs.twimg.com/profile_images/2938540224/9ffc554b0eabb077a915cfe0d56f3c1f_bigger.jpeg' ><br /> Mathias Meyer<br />@roidrage</a></a></td>
  </tr>

  <tr>
    <td><a href="https://www.amazon.com/dp/B00FM0OC4S?tag=merbist-20&amp;camp=0&amp;creative=0&amp;linkCode=as4&amp;creativeASIN=B00FM0OC4S&amp;adid=01GQ5KB9AGZ9M02BFA7B&amp;"><img src="https://images-na.ssl-images-amazon.com/images/I/51S0zRDsbtL._SL160_.jpg" alt="High Performance Browser Networking" border="0" style="padding-top:10px"></a></td>
    <td><a href="https://www.amazon.com/dp/B00FM0OC4S?tag=merbist-20&amp;camp=0&amp;creative=0&amp;linkCode=as4&amp;creativeASIN=B00FM0OC4S&amp;adid=01GQ5KB9AGZ9M02BFA7B&amp;" target="_blank">High Performance Browser Networking</a></td>
    <td>Technical</td>
    <td><a title="@kstewart" href="https://twitter.com/kstewart" target="_blank"> <img src='https://pbs.twimg.com/profile_images/411994393231372288/fiPif7_Q_bigger.jpeg' ><br /> Kevin Stewart<br />@kstewart</a></a></td>
  </tr>

  <tr>
    <td><a href="http://www.amazon.com/gp/product/B009NF6Z2K/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B009NF6Z2K&linkCode=as2&tag=merbist-20"><img src="https://images-na.ssl-images-amazon.com/images/I/51KxC4wQCsL._SL160_.jpg" alt="NOS4A2" border="0" style="padding-top:10px"></a></td>
    <td><a href="http://www.amazon.com/gp/product/B009NF6Z2K/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B009NF6Z2K&linkCode=as2&tag=merbist-20" target="_blank">NOS4A2</a></td>
    <td>Novel</td>
    <td><a title="@diminish7" href="https://twitter.com/diminish7" target="_blank"> <img src='https://pbs.twimg.com/profile_images/1434299830/jason_on_grays_and_torreys_climb_bigger.jpg' ><br /> Jason Rush<br />@diminish7</a></a></td>
  </tr>

  <tr>
    <td><a href="http://www.amazon.com/gp/product/B0047T86CO/ref=as_li_ss_il?ie=UTF8&camp=1789&creative=390957&creativeASIN=B0047T86CO&linkCode=as2&tag=merbist-20"><img src="https://images-na.ssl-images-amazon.com/images/I/31c63zBdD6L._SL160_.jpg" alt="Basic Economics: A Common Sense Guide to the Economy, 4th Edition" border="0" style="padding-top:10px"></a></td>
    <td><a href="http://www.amazon.com/gp/product/B0047T86CO/ref=as_li_ss_il?ie=UTF8&camp=1789&creative=390957&creativeASIN=B0047T86CO&linkCode=as2&tag=merbist-20" target="_blank">Basic Economics: A Common Sense Guide to the Economy, 4th Edition</a></td>
    <td>Economics</td>
    <td><a title="@rubiety" href="https://twitter.com/rubiety" target="_blank"> <img src='https://pbs.twimg.com/profile_images/2909781099/17f882cfce30ac2a938d072c85251d55_bigger.png' ><br /> Ben Hughes<br />@rubiety</a></a></td>
  </tr>

  </tbody>
</table>


<p>If you want more, you can check the <a href="http://merbist.com/2011/12/30/books-to-read-in-2012-recommended-to-me-by-twitter/">previous book recommendation list</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sharing Rails Sessions with Non-Ruby Apps]]></title>
    <link href="https://matt.aimonetti.net/posts/2013/11/30/sharing-rails-sessions-with-non-ruby-apps/"/>
    <updated>2013-11-30T12:01:00-08:00</updated>
    <id>https://matt.aimonetti.net/posts/2013/11/30/sharing-rails-sessions-with-non-ruby-apps</id>
    <content type="html"><![CDATA[<p>I wanted to share sessions between my Rails and Go applications. I wanted to let an authenticated Rails user make JavaScript API calls to an endpoint written in Go. How hard could it be?</p>

<p>Since I own both apps, I thought it would be as simple as sharing the secret session key and re-implementing Rails crypto process in Go. It turned out to be a lot more interesting.</p>

<p>In a nutshell, here is what I discovered:</p>

<ul>
<li> It&#8217;s totally doable! Here is my <a href="http://godoc.org/github.com/mattetti/goRailsYourself/crypto">Go package</a>.</li>
<li> If you are using a version of Rails older than 4.0, you’d better upgrade ASAP!</li>
<li> Rails has been criticized for security issues, but the current solution has been vetted by many experts.</li>
<li> Rails serializes session data using Ruby Marshal which means that someone with the secret key can <em>inject arbitrary code in the session</em> and it will execute server side. Switch to JSON, MessagePack or other safe serialization formats.</li>
<li> Security is (still) hard.</li>
</ul>


<h2>Rails Cookies are Dangerous</h2>

<p>Because Rails serializes and deserializes the session and any encrypted/signed cookies using Ruby&#8217;s Marshal library, someone with the app secret can wreak havoc. They can embed arbitrary Ruby code into the cookie, submit it with a request, and the server-side deserialization will execute that code without you noticing. Granted, this requires the attacker to have the app secret, but since 99% of the apps out there have the shared secret in their source code, anyone with access to the source code has this data. It’s not data you can easily rotate when employees leave or when you are done working with contractors. Anybody with the shared secret is a potential attacker. Start by moving this data out of the code base and into an environment variable.</p>

<p>Rails doesn’t let you change the default serializer directly. But Rails relies on ActiveSupport for its crypto work and AS supports swapping the serializer. Some people in the community are aware of this issue and monkey patch Rails to serialize their sessions using JSON or another alternative. Here is an <a href="http://nerds.airbnb.com/upgrading-from-ree-187-to-ruby-193/">Airbnb article</a> and
<a href="https://gist.github.com/jeffyip/4091166">Rails 3 patch</a>. <a href="https://gist.github.com/mattetti/7624413">Here is my Rails 4 monkey patch</a> to switch the serialization to JSON. I&#8217;m using it in production with Rails 4, but it&#8217;s untested on Rails 3.</p>

<p>You can modify either solution to use <a href="http://msgpack.org/">MessagePack</a> instead of JSON if you want to fit more data in the 4K cookie size.</p>

<h2>Understanding Rails Session Encryption</h2>

<p>Once I addressed the serialization issue, I had to reimplement the crypto work done by Rails to encode and/or sign the data.</p>

<p>Most of us just rely on our frameworks/libraries to do the right thing, but we rarely look under the hood. I ported the logic to Golang which has an amazing support for crypto (albeit lower level than Ruby). My <a href="http://godoc.org/github.com/mattetti/goRailsYourself/crypto">Go package</a> contains an explanation of the code logic and <a href="http://godoc.org/github.com/mattetti/goRailsYourself/crypto#pkg-examples">the examples</a> needed to decode/verify as well as encode/sign sessions that are compatible with Rails.</p>

<p>Here is a high level summary of what Rails does when it encodes and signs your session data:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">key_generator</span> <span class="o">=</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">CachingKeyGenerator</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">ActiveSupport</span><span class="o">::</span><span class="no">KeyGenerator</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">app_secret_key</span><span class="p">,</span> <span class="n">iterations</span><span class="p">:</span> <span class="mi">1000</span><span class="p">))</span>
</span><span class='line'><span class="n">derived_secret</span> <span class="o">=</span> <span class="n">key_generator</span><span class="o">.</span><span class="n">generate_key</span><span class="p">(</span><span class="s2">&quot;encrypted cookie&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">sign_secret</span> <span class="o">=</span> <span class="n">key_generator</span><span class="o">.</span><span class="n">generate_key</span><span class="p">(</span><span class="s2">&quot;signed encrypted cookie&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">encryptor</span> <span class="o">=</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">MessageEncryptor</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">secret</span><span class="p">,</span> <span class="n">sign_secret</span><span class="p">)</span>
</span><span class='line'><span class="n">session_content</span> <span class="o">=</span> <span class="n">encryptor</span><span class="o">.</span><span class="n">encrypt_and_sign</span><span class="p">({</span><span class="n">hello</span><span class="p">:</span> <span class="s2">&quot;world&quot;</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>session_content</code> string is then set as the session cookie value.
Note that you could do that in any Ruby app using <code>ActiveSupport</code>, making it easy to share sessions between Ruby applications (like Rails &amp; Sinatra).</p>

<p>Technically, there are a lot of things going on. To avoid using the same secret to sign and encode data, Rails relies on derived keys using <a href="http://en.wikipedia.org/wiki/PBKDF2">PBKDF2</a> (password based key derivation function).
It treats the app secret as a password and applies a pseudorandom function 1000 times (Rails default) using a default salt. The result is a derived key so the original password isn’t shared. The derived key can be regenerated identically if the salt and secret are known (because the function is pseudorandom).</p>

<p>The two derived keys are then passed to the <a href="https://github.com/rails/rails/blob/master/activesupport/lib/active_support/message_encryptor.rb"><code>MessageEncryptor</code></a> class which uses <a href="https://github.com/rails/rails/blob/master/activesupport/lib/active_support/message_verifier.rb"><code>MessageVerifier</code></a> to do the signing. The generated keys are 64 bytes long. One key goes to the encryptor while the other goes to the verifier.</p>

<p>The verification is done via <a href="http://en.wikipedia.org/wiki/Hash-based_message_authentication_code">HMAC (SHA1)</a> and it uses the full 64 byte key.
The encoding is done via <a href="http://en.wikipedia.org/wiki/Advanced_Encryption_Standard">AES 256 CBC</a> only using the first 32 bytes of the encryption derived key. Rails will only generate a 32-byte key since that&#8217;s the expected key length.</p>

<p>The session data is serialized (using Marshal by default) then encoded via AES. Both the encoded string and the <a href="http://en.wikipedia.org/wiki/Initialization_vector">IV</a> are encoded using base64 and joined in a string using a predefined format.</p>

<p>At this point, the session is encoded but it could be tampered with. To avoid that, Rails signs the encoded data using the verifier (HMAC) and appends the base 64 encoded signature to the encoded data.</p>

<p>To decode and verify the data, Rails repeats the process in reverse using the serializer to deserialize the data.</p>

<p>Note that you can also rely on the the same crypto process to safely encode/sign <em>any</em> data you want to share. If you&#8217;re ok with the data being user-readable, sign it to make sure it isn&#8217;t tampered with along the way. If you don&#8217;t want it to be user-readable, encrypt it first then sign the encrypted data.</p>

<h2>Sharing the Session with Non-Ruby Apps</h2>

<p>Many apps are moving to an SOA approach. That often means multiple languages living together in production. Sharing a web session can be very useful, especially until you switch to a SSO solution.</p>

<p>The key is to start by having the session data serialized in a format that is available in all your relevent languages. JSON, XML MessagePack, and protobuf are good examples.</p>

<p>The second step is to reimplement the crypto dance I just explained above. The good news is that I’ve already done it for Go. Using that example, you should be able to port it to other languages (Node, Scala/Clojure/Java, Rust, Elixir, Python or whatever you fancy).</p>

<p>https://github.com/mattetti/goRailsYourself/tree/master/crypto</p>

<p>Even though the test suite isn’t perfect (yet), it should greatly help you through the porting process. To be honest the hardest part was understanding the process, not writing the code. Most languages have decent crypto libraries to do the hard parts for you. But for Go I had to implement lower level pieces like the PKCS7 padding for the AES CBC encryption/decryption.</p>

<p>Hopefully this article was helpful and you now better understand how Rails does its session encryption. Once you understand the process Rails uses, you can implement it in any language.</p>

<p><strong> Finally, if you interested in working on interesting and challenging
problems like these ones, consider joining the <a href="https://splice.com">Splice</a> team! </strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bad code doesn't exist]]></title>
    <link href="https://matt.aimonetti.net/posts/2013/10/14/bad-code-doesnt-exist/"/>
    <updated>2013-10-14T09:08:00-07:00</updated>
    <id>https://matt.aimonetti.net/posts/2013/10/14/bad-code-doesnt-exist</id>
    <content type="html"><![CDATA[<p>I just give a talk at <a href="http://wickedgoodruby.com/">Wicked Good Ruby Conf</a> in Boston. I&#8217;m sure the talk will be online soon, but I figured it would be interesting to discuss it a bit further in a blog post.</p>

<p>The format was a bit different than usual, I had a 40 minute slot and
divided in 2, I made my points for 20 minutes and invited two special
guests on stage to discuss the topic. The reason for this format is
because I think we all learn better by looking at things from different
perspectives. I can&#8217;t thank enough <a href="http://www.sandimetz.com/">Sandi Metz</a> and <a href="http://kytrinyx.com/">Katrina Owen</a> for their contributions.</p>

<p>Here are a few points that I think are interesting and
that we discussed during the talk.</p>

<h2>There isn&#8217;t such thing as bad code</h2>

<p>Bad code doesn&#8217;t exist, you have code that can be interpreted/compiled and code that doesn&#8217;t.
&#8220;Good&#8221; and &#8220;bad&#8221; are moralistic designations, not scientific ones.
Let&#8217;s try to stop using these terms to refer to talk. Let&#8217;s be more
precise when arguing about code, &#8220;what do you mean by bad?&#8221; Is it
hard to maintain, hard to understand, slow etc.. ?
Always refer to the context in which the code was written. Don&#8217;t use it
as an excuse to defend anybody&#8217;s potentially hurt ego, but instead to
explain why the code was written caring about certain values instead of
others. Most code turns emo after a little while, being able to
understand the context, helps a lot the devision process when facing
such code.</p>

<p><img src="https://matt.aimonetti.net/images/matt_aimonetti-code_apology.jpg" alt="Bad code" /></p>

<h2>It&#8217;s all about expected outcome and context</h2>

<p>As developers, we aren&#8217;t paid to write code, we are paid to build
products, to convert ideas into something &#8220;concrete&#8221;. When I use my
favorite app, I don&#8217;t care that the code is beautiful, I care that it
works, that it&#8217;s stable and provides me with what I need. If the code is
written in Go, Pascal, Erlang, VB or Ruby doesn&#8217;t matter at all. That the
code has full test coverage and was written in an agile manner using
weekly scrums and TDD is probably as important as knowing the Pantone
color of a company&#8217;s logo: it only matters to the people deeply
involved.</p>

<p>Don&#8217;t focus on how to build, focus on why you build things. Then the how
will come as you learn from others, experiment and discover &#8220;how&#8221; to build
the &#8220;why&#8221;. The &#8220;why&#8221; is often the constant, the &#8220;how&#8221; keeps on changing
as we collect more information.</p>

<h2>We love rules</h2>

<p>When you learn, rules are easier. Katrina made a very good point during
our discussion. When she teaches, she needs to have very strong rules
that she can justify. That said, her rules can change, and as you become
better, you can start challenging the rules. Rules are somewhere between
training wheels and a guard-rail. They are very useful but shouldn&#8217;t be
used to attack other people.</p>

<p>Ruby has a language doesn&#8217;t enforce many rules, as a matter of fact,
Matz designed a language so you can set your own rules, or barely have
any rules.
This fact probably explains why so many people are after solid rules
they can rely on. Rules are easy to follow and are a good reference.
The Ruby language doesn&#8217;t have enough rules to some, so the community is
helping by coming together to define them.
This is by the way, the biggest difference with Python and Go where
these 2 languages explicitly want to only have 1 way of doing one thing.</p>

<h2>Communication and team work</h2>

<p>The key to building a good product (which is what we are paid to do) is
communication. Unfortunately, us developers, are on average, pretty
terrible at that.
We need to do a better job communicating with the rest of the
organization (i.e: anybody who&#8217;s not an engineer). It usually starts by
the designers. The expected outcome of the product should be clear, well
understood by all and easily evaluable.
Within the engineering team, coding values should be set explicitly.
Not everyone will agree but when we write code, we should all care about
the same overall values so our work is consistent. When something
happens and we have a disagreement, it&#8217;s easier to refer to our values
to decide what solution to pick.</p>

<h2>Slides</h2>

<script async class="speakerdeck-embed" data-id="f325aee016620131a63906e09cf22df5" data-ratio="1.33333333333333" src="https://matt.aimonetti.net//speakerdeck.com/assets/embed.js"></script>


<h2>Video</h2>

<iframe width="640" height="480" src="https://matt.aimonetti.net//www.youtube.com/embed/VO-NvnZfMA4" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What technology should my startup use?]]></title>
    <link href="https://matt.aimonetti.net/posts/2013/08/27/what-technology-should-my-startup-use/"/>
    <updated>2013-08-27T22:10:00-07:00</updated>
    <id>https://matt.aimonetti.net/posts/2013/08/27/what-technology-should-my-startup-use</id>
    <content type="html"><![CDATA[<p>Over the years many people have asked me the same question:</p>

<blockquote><p>I&#8217;m starting this new project, what technology do you think I should use?</p></blockquote>

<p>Often these people fit in one of two categories:</p>

<ul>
<li>Technologists who&#8217;ve already made up their mind</li>
<li>Non-technologist entrepreneurs who need to be reassured</li>
</ul>


<p>At the end of the day, I doubt that many of these people actually cared
about my answers. They probably just wanted to know if we were on the same page or wanted to be reassured.</p>

<p>To be honest, as an engineer, I believe <strong>a great idea can be built with almost any
technology</strong>. They all have their pros/cons. No matter what stack you choose, you&#8217;ll pay a
certain price for whatever advantages it offers. But really, the success or failure of your project has more to do with vision, leadership, execution, and market than technological choices.</p>

<p>Now that I&#8217;m an entrepreneur, I make technical decisions daily. When I choose
a specific technology, I need to be able to justify the decision to myself, my
partners/employees and potential investors. I make technical choices based on the project and company&#8217;s vision.</p>

<p>For a project to be successful you must have a strong vision.
If you can convert your <strong>vision</strong> into a set of <strong>values</strong> to benchmark every decision, your path will be clear and it&#8217;ll be easier to find the right people to join you.</p>

<p>Besides the vision, a lot of startups focus on culture.
It is commonly said that the culture is defined by the founders, the first few employees, and
the product itself.
However, what isn&#8217;t often mentioned is that <strong>the technical
decisions will have a direct effect on the company culture</strong>.</p>

<p>Whether your new startup is based on J2EE/Oracle, Perl, PHP, Rails, Node.js or
.NET, the team&#8217;s engineers will have different expectations, different
values, and different concerns. None of these technologies are intrinsically bad. Great things have been built with each. But they do come with a culture.</p>

<p>A couple years ago, I met an entrepreneur who chose to
build his application in Node.js. Curious, I asked why he chose Node.
The response was simple:
* smart engineers are excited about it so I can more easily recruit
* people are willing to contribute for free because it builds their
  experience</p>

<p>This decision clearly set the engineering culture and defined the team of people
who could work or be interested in working on the project.</p>

<h2>Asking a Different Question</h2>

<p>So maybe instead of asking what technology I should use, we should ask ourselves:</p>

<blockquote><p>Does this technology fit my company&#8217;s core values?</p></blockquote>

<p>That&#8217;s a much harder question because you need to actually <em>understand</em> your
core values. That understanding is key to building a successful product.</p>

<p>You can&#8217;t blindly copy a tech stack in the same way you can&#8217;t copy a business plan. It&#8217;s a part of your company&#8217;s identity. Your core values, your objectives, your team and your
expectations are different.</p>

<p>The whole <em>&#8220;it worked for X&#8221;</em> argument is
rarely valid. Look, Facebook uses PHP, it &#8220;worked for them&#8221;. Does that mean we should all use PHP?</p>

<h2>Technology-Culture Alignment</h2>

<p>Characterizing communities is difficult, but I&#8217;ll share with you the impressions and perspectives that I have on various options. Feel free to use the comments to share your own perspective and cover other communities.</p>

<h3>Old School</h3>

<p>Here are some of the &#8220;classics&#8221;: languages that have been used for a
while and have proven their values. They&#8217;re widespread, but don&#8217;t inspire much passion anymore.</p>

<p><em>Note</em>: I omitted Perl because I personally don&#8217;t know any new startups building their core technology in Perl (6?).</p>

<h2>PHP</h2>

<p><strong>Philosophy:</strong></p>

<ul>
<li>Get stuff done, that&#8217;s what matters</li>
<li>It&#8217;s like Basic for the Web</li>
<li>As long as there is a way to do it, it ain&#8217;t broken</li>
<li>It works and it&#8217;s fast, anything else is pointless</li>
<li>Don&#8217;t be too academic, our language is accessible and anyone can be
started in no time. Try to do the same thing with Java!</li>
<li>Object orientation as an afterthought</li>
</ul>


<p><strong>Common use case: (as of mid-2013)</strong></p>

<ul>
<li>Your first web app</li>
<li>Extending Wordpress/Drupal</li>
</ul>


<p><strong>Personal opinion:</strong></p>

<p>PHP had its days of glory. It really made web development easy and
accessible. However, probably due to the really large amount of new programmers who
started with PHP and a not so opinionated community, very few people can
write good PHP.</p>

<p>Good idiomatic code examples are hard to find and I&#8217;m not even sure there is such as as idiomatic PHP. The result is a community known for poor code quality, lack of
tests, security nightmares and an after taste of the early 2000s.</p>

<p>Strong PHP teams with well established conventions, processes and guidelines can accomplish great things,
but such teams are rare.</p>

<h2>Java</h2>

<p><strong>Philosophy:</strong></p>

<ul>
<li>Portability</li>
<li>The power &amp; performance of C/C++ but with automatic memory management</li>
<li>Cares a lot about object-orientation</li>
<li>IDE required</li>
<li>Memory is cheap so we consume it <em>ALL</em></li>
<li>Threading is the way to go!</li>
<li>Don&#8217;t mention Java applets</li>
<li>Look at my pretty JVM!</li>
<li>Open source (but owned by Oracle)</li>
<li>Slower but safer development cycles</li>
</ul>


<p><strong>Personal Opinion:</strong></p>

<p>Java is quite interesting. A few years ago a lot of developers got tired of Java and
explored other lands. They often switched to interpreted languages
such as PHP, Python, Ruby or more esoteric languages like Erlang.</p>

<p>However, Google via Android was able to show that Java in itself isn&#8217;t as terrible
as we remembered (as long as you don&#8217;t have to use J2EE or Swing).
There is also a &#8220;hipsterish&#8221; trend that seems to indicate that Java is
actually cool again. A lot of that has to do with two things:</p>

<ul>
<li>the JVM</li>
<li>the incredible quantity of high quality libraries</li>
</ul>


<p>That said, for a lot of us, writing Java all day long doesn&#8217;t sound
 appealing. If you are going to rely on the Java stack, there is <a href="http://en.wikipedia.org/wiki/List_of_JVM_languages">long list of other JVM languages</a>
which are mature and play well with Java
libs (i.e: Scala, Groovy, JRuby, Clojure).
You can always to mix and match.</p>

<p>Hiring Java developers isn&#8217;t too hard since most students coming out of school learned Java,
but finding great early-stage startup engineers who want to write Java is quite challenging.</p>

<p><em>Side note: If you are targeting Android, keep it simple, stay with the official
stack even if you might fancy another JVM language better.</em></p>

<p>There are still many reasons to use Java&#8217;s technology for your new
startup, but you might also consider using a more &#8220;rapid/flexible&#8221; solution in parallel (Ruby,
Python, Node&#8230;). A multilingual environment brings a lot of value to
both the company and the engineers, which is something the Java
community seems to be slowly but surely discovering.</p>

<p>Java mainly attracts more classically trained engineers looking for
comfortable, repetitive, well known patterns. They will be used to the language, its
tools and its natural rhythm. They might not be the most curious
developers but they are reliable (if you pick the right ones obviously).</p>

<h2>C#/.NET</h2>

<p><strong>Philosophy:</strong></p>

<ul>
<li>A better Java</li>
<li>Originally designed for desktop and embedded apps</li>
<li>We have a better IDE than the Java guys</li>
<li>We are enterprise serious but we can offer you most of Rails&#8217; cool
features</li>
<li>We have a conflicted vision of Open Source</li>
<li>Slower but safer development cycles</li>
</ul>


<p><strong>Personal Opinion:</strong></p>

<p>I went back and looked at C# when C# 5 was released and I have to say
that I was really impressed by some of the new language features. From a
purely language design perspective, C# is quite a bit ahead of Java. I was
also surprised by how pleasant it was to write Javascript in Visual
Studio (I really didn&#8217;t expect that since my experience with VS was
mainly around C++).</p>

<p>Another thing that really impressed me: the quality level of the
available documentation is outstanding!
But the fact that C# isn&#8217;t open source, that Visual Studio + MSDN is so expensive and
the whole environment reeks of licenses and costs, is bit of a turn off.</p>

<p>Microsoft is slowly opening up to open source and more open solutions like Azure. But as a
community, .NET is still quite Microsoft-centered.
As a startup entrepreneur, you should consider how you feel about open source vs enterprise backed cultures.</p>

<p>C# mainly attracts a variant of the Java crowd: engineers seeking stability and a support contract over open source. And they can tolerate IIS!</p>

<h3>Established Alternatives</h3>

<p>Over the years, two dynamic languages became cherished by startups:
Python and Ruby. The two languages are
actually quite similar. Nowadays Python is quite popular for backend apps
(NLP, biotech, APIs, SOA elements) while Ruby is more popular for
consumer-facing apps.
Both of these languages suffer from the same limitations (mainly
performance and concurrency) but their core
values and communities have different focuses.</p>

<h2>Python</h2>

<p><strong>Philosophy:</strong></p>

<ul>
<li>Only one obvious way to do things</li>
<li>Code has to be beautiful, simple and explicit</li>
<li>Documentation is critical</li>
<li>Strong language design leadership</li>
</ul>


<p><strong>Personal Opinion:</strong></p>

<p>As someone who chose Ruby over Python, I often envy the quality of
the documentation you find in Python projects.
I also have a love/hate relationship with the fact that Python is
designed to give you just one right way. This is
often great for teams, but it can also be frustrating.</p>

<p>In some areas, Python has some of the best libraries out there, and
depending on the problems you are tackling, Python might be the right
choice. Python developers know how to communicate about their code. They document what they do
and are process oriented while being pragmatic about their
approaches.</p>

<p>But Python was created way before the internet became
popular and if concurrency and high throughput is a concern for you, a
dynamic, interpreted language with poor concurrency might not be the right choice.</p>

<p>Python mainly attracts more pragmatic, experienced, full-stack developers
wanting a modern but well-proven language.</p>

<h2>Ruby/Ruby on Rails</h2>

<p><strong>Philosphy:</strong></p>

<ul>
<li>Designed for humans, not machines</li>
<li>Extreme flexibility: if you mess up, it&#8217;s on you</li>
<li>Everything has to be easy, elegant and fun</li>
<li>DSL on top of DSLs on top of DSLs</li>
<li>Testing is critical</li>
<li>Things move quickly, learn to keep up</li>
<li>Passionate and vibrant community</li>
</ul>


<p><strong>Personal opinion:</strong></p>

<p>As far as I&#8217;m concerned, Ruby has been my go-to language for years.
You will find an incredible, sometimes overwhelming amount of Ruby open
source code. Rails is really an amazing web framework making most web
projects easy to implement if you know how to use the tool.</p>

<p>But the flexibility and rapid development cycle also have
downsides. Be ready to invest a large chunk of your time keeping your code
base up to date and migrating away from abandoned libraries.
If you can&#8217;t rely on caching, the throughput of a successful app will often be limited
by the lack of good concurrency support.</p>

<p>Ruby developers are mainly Rails developers and a great majority might
have a hard time being able to identify core language features versus
framework features. They are often curious, opportunistic (in a good way),
somewhat pragmatic and care about code quality/structure and
test coverage. Rails developers are typically early adopters due to
the fact that the framework itself uses some new technologies by
default (coffeescript, turbolinks, CSS pre-processors&#8230;).</p>

<p>Ruby and Rails mainly attract developers wanting to get things done
quickly but elegantly. These developers are often
product-oriented and care more about the purpose and customer value  than the lower-level computational details.</p>

<h2>New Players</h2>

<p>These are the languages/technologies that get people excited. They
represent the new wave of programming languages designed to run
in &#8220;the cloud&#8221;.</p>

<h2>Node.js (Javascript)</h2>

<p>Node.js isn&#8217;t a programming language but it&#8217;s the most popular way to
run JS server side. The same way most of my comments about Ruby were
about Rails, I&#8217;ll focus on Node more than JS itself.</p>

<p><strong>Philosophy:</strong></p>

<ul>
<li>Designed for real-time driven apps with high throughput, low latency</li>
<li>DIY</li>
<li>Small core, the rest is up to the community</li>
<li>Coupling is a sin</li>
<li>Learned lessons from Ruby/Python</li>
</ul>


<p><strong>Personal Opinion:</strong></p>

<p>I find Node.js interesting. Technically there isn&#8217;t much new with Node. Python has
Tornado/Twisted, Ruby has EventMachine, and C had libevent.</p>

<p>Event-driven frameworks have
been used for a while but Node has two major advantages:
* most JS libs are non-blocking
* most web developers have to write some JS anyway</p>

<p>The idea of using the same
programming language both in the front end and the back end appeals to many, but the value is still unproven.</p>

<p>Node offers great throughput (as long as you stick to IO operations),
is easy to get started, and is fun to write.</p>

<p>Due to the nature of event-based programming, debugging and testing is challenging. Dealing with callbacks can be maintenance hell. I hope that Node will adopt an official future/promise solution. And documentation is typically spotty making jumping on an existing project difficult.</p>

<p>Node developers are definitely early adopters and comfortable creating a custom structure/pattern rather than following convention.It attracts developers wanting to use a known language (JS)
to handle high levels of concurrency. Node as a framework is lower level than the classical MVCs which is a plus for hackers. Node developers also really like the idea of using the same programming language on both server and client.</p>

<h2>Clojure</h2>

<p><strong>Philosophy:</strong></p>

<ul>
<li>A pragmatic and modern Lisp</li>
<li>Everything is data</li>
<li>Concurrency, concurrency, concurrency</li>
<li>States are evil</li>
<li>Great Java interoperability</li>
<li>A bit on the academic side, but still being pragmatic</li>
</ul>


<p><strong>Personal Opinion:</strong></p>

<p>What I like the most about Clojure is the lisp
spirit.
Once you get past the parenthesis and the operator/argument order,
Clojure challenges you to entirely rethink the way you architect your code.
It&#8217;s really good and efficient at processing data and pushes you to keep
your code short.</p>

<p>My problem with Clojure is that I&#8217;m not smart enough to write a lot of
it. My brain quickly stack overflows trying to follow the data.
Exceptions are often meaningless and trying to debug someone else&#8217;s code is
challenging since the language itself is complex and it can be extended
by macros. Finally, the Clojure community isn&#8217;t really web-oriented,
most of the work done in Clojure seems to be data-centric.</p>

<p>Clojure mainly attracts more fringe, language-curious, data-oriented programmers. If you are looking for data scientists with a programming language fetish,
Clojure is a good way to attract them.</p>

<h2>Scala</h2>

<p><strong>Philosophy:</strong></p>

<ul>
<li>Have the best of both object oriented and functional programming worlds</li>
<li>Let the compiler do some of the work for you</li>
<li>Concurrency matters</li>
<li>Less ceremony than Java, but aiming for same or better performance</li>
<li>Live in harmony with the Java ecosystem</li>
</ul>


<p><strong>Personal Opinion:</strong></p>

<p>Scala is currently my language of choice when targeting the JVM. The learning curve is steep. Knowing
when to use FP vs OOP can be tricky and so is dealing with the
language syntax itself.</p>

<p>That said, getting the benefits of using FP, while
still keeping OOP when needed, is very useful.
Once you &#8220;get&#8221; the language idioms, writing Scala is actually pleasant
and the community is quite nice.</p>

<p>The <a href="http://www.playframework.com/">Play</a>
framework is really good and offers a good alternative to Rails,
especially for API development. Twitter&#8217;s engineering team offers a lot of resources and open source code.</p>

<p>Using Scala is a pretty safe bet at this point. Java developers feel
confortable and get to try a more &#8220;modern&#8221; language. Dynamic
language developers don&#8217;t feel too far from home but get the Java
ecosystem, the performance boost, concurrency and immutability.
The tooling and convetions make using Scala on a
growing team quite nice, if the compilation time doesn&#8217;t get you down.</p>

<p>Like Ruby, though, the Scala community isn&#8217;t big on documentation.
I really hope <a href="http://www.scala-lang.org/api/current/">the API doc</a> will be rewritten to be more intuitive and overall more useful.
But to be fair there are a lot of great resources out there such as
<a href="http://twitter.github.io/scala_school/">Twitter&#8217;s Scala school</a> and
<a href="https://www.coursera.org/course/progfun">Coursera&#8217;s FP in Scala class</a> given
by Martin Odersky (Scala&#8217;s creator).</p>

<p>Scala mainly attracts curious Java developers wanting
something more modern as well as Ruby/Python developers wanting a more scalable version of their language.
Scala is a good way to attract great developers who want to push
the boundaries of their existing dev environment as well as developers being able to leverage the duality of the language.</p>

<h2>Go</h2>

<ul>
<li>A better C</li>
<li>Memory management is handled for you, but don&#8217;t be wreckless</li>
<li>Explicit is better than implicit</li>
<li>Rich built-in functionality</li>
<li>Fast.. everything (from compilation to execution)</li>
<li>Concurrency built-in and made easy</li>
<li>Documentation is critical</li>
</ul>


<p><strong>Personal Opinion:</strong></p>

<p>I really like Go (aka Golang). After playing with it for years, I chose to use it to
develop the APIs of my own startup. Go might sound boring to some, but
its simplicity and efficiency just work.</p>

<p>Go forces you to think a bit more about how you structure your
data/behavior because you can&#8217;t just stick to the usual OO patterns. I&#8217;ve found that my code ends up being easier
to follow and simpler in structure, yet sometimes a bit more repetitive (ex: error handling).</p>

<p>Concurrency can&#8217;t get much easier than Go. While it is compiled, your code compiles and boots in less time than a Rails server starts up. Go supports some form of duck typing making the transition from Ruby (for instance) quite easy. The production performance is quite amazing when coming from
a scripting language and the memory footprint stays small.</p>

<p>Go is designed so a single user or a big team can work on the same codebase and the tooling around the language is really great.</p>

<p>However, it&#8217;s not a perfect language. 3rd party dependency management can be tricky at
times. The code can feel too low-level when you&#8217;re used to high-level programming languages. And some of the language design decisions can cause confusion at times (ex: interacting with interfaces vs structs).</p>

<p>Go seems to become quite popular within the startup scene when
performance and concurrency matters. I&#8217;ve seen a good number of startups migrating from Node to Go and others simply extending their stack by adding small Go apps.</p>

<p>The Go community seems to be a mix of old school hackers coming from C/C++ and a younger crowd enjoying a lower-level language.
The language and the community leaders are opinionated which makes
understanding their vision and approach easy. It also allows you to
quickly evaluate how comfortable you are with their philosophy and see if it matches your expectations.</p>

<p>Go mainly attracts performance/architecture oriented developers.
They want easy concurrency, the execution speed of C with the development speed of
Python/Ruby. They don&#8217;t look for a new fun language, they look for a
solid compromise.</p>

<h2>Technology Drives Culture</h2>

<p>Technical decisions have cultural impact. Think clearly and carefully about <strong>how your technologies align with your company&#8217;s core values</strong>. Make the right choices and you&#8217;ll spend less time fighting about technical details and more time building a great business.</p>

<p>And if you miss those arguments, there&#8217;s always <a href="http://news.ycombinator.com/">hackernews</a>.</p>

<hr />

<br/>


<p><em>Update</em>: Speaking of HN, <a href="https://news.ycombinator.com/item?id=6285129">here is the thread for this post</a></p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Matt Aimonetti]]></title>
  <link href="http://matt.aimonetti.net/atom.xml" rel="self"/>
  <link href="http://matt.aimonetti.net/"/>
  <updated>2015-10-26T21:33:47-07:00</updated>
  <id>http://matt.aimonetti.net/</id>
  <author>
    <name><![CDATA[Matt Aimonetti]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Automate iTunes with JS to wake up in music]]></title>
    <link href="http://matt.aimonetti.net/posts/2015/09/02/automate-itunes-with-js/"/>
    <updated>2015-09-02T20:46:00-07:00</updated>
    <id>http://matt.aimonetti.net/posts/2015/09/02/automate-itunes-with-js</id>
    <content type="html"><![CDATA[<p>Last week, my daughter started Kindergarten. I&#8217;m very happy for her,
especially because she&#8217;s going to an <a href="http://www.edison.smmusd.org/">awesome public school</a>.
As someone who didn&#8217;t grow up in the US, I heard a lot of stories about the American school
system but one thing I didn&#8217;t know is that kids start so early. My
daughter starts at 8:10am! We had to find a way to turn our
sleeping-in family members into morning people.</p>

<p>I found a solution to help us: coding and music!</p>

<p>My goal: to wake up my daughter with a custom music playlist starting a
few minutes before I go see her.</p>

<p>We have an old Mac Mini at home that I recently upgraded it to run Yosemite.
This recent version of OS X added JavaScript as an alternative to <a href="https://en.wikipedia.org/wiki/AppleScript">AppleScript</a>.
My goal is to write a little script that will play a given playlist and
then I want to schedule this script to play every school morning. The
Mac Mini is connected to an Airport Express with usb speakers located in
my daughter&#8217;s bedroom.</p>

<h2>JavaScript for Automation</h2>

<p>Apple has some <a href="https://developer.apple.com/library/mac/releasenotes/InterapplicationCommunication/RN-JavaScriptForAutomation/">documentation</a> about how to use JS to automate different tasks. To be honest the documentation isn&#8217;t really good in comparison to their usual doc.
Also, the technical implementation is pretty hacky/buggy but that won&#8217;t
prevent us to have a bit of fun.</p>

<p>The code to start iTunes and play our playlist if very straight forward:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span> <span class="o">=</span> <span class="nx">Application</span><span class="p">(</span><span class="s1">&#39;iTunes&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">activate</span><span class="p">()</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">stop</span><span class="p">()</span>
</span><span class='line'><span class="nx">playlist</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">sources</span><span class="p">[</span><span class="s2">&quot;Library&quot;</span><span class="p">].</span><span class="nx">userPlaylists</span><span class="p">[</span><span class="s2">&quot;morning&quot;</span><span class="p">]</span>
</span><span class='line'><span class="k">try</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">playlist</span><span class="p">.</span><span class="nx">play</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;The playlist probably doesn&#39;t exist&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you probably guessed, this script loads iTunes and then uses its
scripting API to load the main library and look for a playlist called
&#8220;morning&#8221;.
I&#8217;m not proud of the ugly try/catch, but playlist is an instance of
<code>ObjectSpecifier</code> which isn&#8217;t evaluated until a method is called on it.
You can think of it as a lazy container. The problem is that if we try
to call <code>play()</code> on a playlist we didn&#8217;t find, then an error is thrown.
I didn&#8217;t find a way to check if the underlying value is null so I had to
catch the error.</p>

<p>Once we have the above code, we have two options, put it in a script or
convert it into an app. When developing your automation, it&#8217;s highly
recommended to use <code>Script Editor.app</code> which ships with the OS.
From within the app, you can run your script and test / &#8220;debug&#8221; it.
Script Editor also allows you to export your script as script, script
bundle and app. The easiest way is to export our code as an app:</p>

<p><img src="http://matt.aimonetti.net/images/jxa_app.jpg" alt="Export JS as an app" /></p>

<p>Note that you can also write a script and create a <code>osascript</code> shebang,
or even evalute your automation JS in the terminal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">say</span> <span class="s2">&quot;you are listening to&quot;</span> <span class="err">`</span><span class="nx">osascript</span> <span class="o">-</span><span class="nx">l</span> <span class="nx">JavaScript</span> <span class="o">-</span><span class="nx">e</span> <span class="s1">&#39;Application(&quot;iTunes&quot;).currentTrack.name()&#39;</span><span class="err">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>So we have a script to start iTunes if needed and play our morning
playlist. Now we need to schedule our app to start every school day:</p>

<h2>Launchctl</h2>

<p>OS X has a builtin scheduling system called <a href="http://launchd.info/">launchd</a>. It&#8217;s kind of like a cron scheduler but with more options.
Unfortunately figuring something as simple as scheduling a recurring
script is much harder than it should. So here is my plist file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span>
</span><span class='line'><span class="nt">&lt;plist</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;dict&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>Label<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;string&gt;</span>morning.playlist.itunes<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>ProgramArguments<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;array&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>/usr/bin/open<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>-a<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>wakeup.app<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/array&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>RunAtLoad<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;false/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>StandardErrorPath<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;string&gt;</span>/tmp/morning.playlist.itunes.stderr<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>StandardOutPath<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;string&gt;</span>/tmp/morning.playlist.itunes.stdout<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>StartCalendarInterval<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;array&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dict&gt;</span>
</span><span class='line'>          <span class="nt">&lt;key&gt;</span>Hour<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>          <span class="nt">&lt;integer&gt;</span>6<span class="nt">&lt;/integer&gt;</span>
</span><span class='line'>          <span class="nt">&lt;key&gt;</span>Minute<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>          <span class="nt">&lt;integer&gt;</span>55<span class="nt">&lt;/integer&gt;</span>
</span><span class='line'>          <span class="nt">&lt;key&gt;</span>Weekday<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>          <span class="nt">&lt;integer&gt;</span>1<span class="nt">&lt;/integer&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dict&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dict&gt;</span>
</span><span class='line'>          <span class="nt">&lt;key&gt;</span>Hour<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>          <span class="nt">&lt;integer&gt;</span>6<span class="nt">&lt;/integer&gt;</span>
</span><span class='line'>          <span class="nt">&lt;key&gt;</span>Minute<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>          <span class="nt">&lt;integer&gt;</span>55<span class="nt">&lt;/integer&gt;</span>
</span><span class='line'>          <span class="nt">&lt;key&gt;</span>Weekday<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>          <span class="nt">&lt;integer&gt;</span>2<span class="nt">&lt;/integer&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dict&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dict&gt;</span>
</span><span class='line'>          <span class="nt">&lt;key&gt;</span>Hour<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>          <span class="nt">&lt;integer&gt;</span>6<span class="nt">&lt;/integer&gt;</span>
</span><span class='line'>          <span class="nt">&lt;key&gt;</span>Minute<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>          <span class="nt">&lt;integer&gt;</span>55<span class="nt">&lt;/integer&gt;</span>
</span><span class='line'>          <span class="nt">&lt;key&gt;</span>Weekday<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>          <span class="nt">&lt;integer&gt;</span>3<span class="nt">&lt;/integer&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dict&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dict&gt;</span>
</span><span class='line'>          <span class="nt">&lt;key&gt;</span>Hour<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>          <span class="nt">&lt;integer&gt;</span>6<span class="nt">&lt;/integer&gt;</span>
</span><span class='line'>          <span class="nt">&lt;key&gt;</span>Minute<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>          <span class="nt">&lt;integer&gt;</span>55<span class="nt">&lt;/integer&gt;</span>
</span><span class='line'>          <span class="nt">&lt;key&gt;</span>Weekday<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>          <span class="nt">&lt;integer&gt;</span>4<span class="nt">&lt;/integer&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dict&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dict&gt;</span>
</span><span class='line'>          <span class="nt">&lt;key&gt;</span>Hour<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>          <span class="nt">&lt;integer&gt;</span>6<span class="nt">&lt;/integer&gt;</span>
</span><span class='line'>          <span class="nt">&lt;key&gt;</span>Minute<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>          <span class="nt">&lt;integer&gt;</span>55<span class="nt">&lt;/integer&gt;</span>
</span><span class='line'>          <span class="nt">&lt;key&gt;</span>Weekday<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>          <span class="nt">&lt;integer&gt;</span>5<span class="nt">&lt;/integer&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dict&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/array&gt;</span>
</span><span class='line'><span class="nt">&lt;/dict&gt;</span>
</span><span class='line'><span class="nt">&lt;/plist&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://gist.github.com/mattetti/75fd52c653b9144f303e">Gist</a></p>

<p>Note that I called my app <code>wakeup.app</code> and I put it in my Applications
folder. My launch agent starts the app when it&#8217;s called, but it doesn&#8217;t
do that when the system loads the service (<code>RunAtLoad</code> is set to false).
I&#8217;m also logging out stdout and stderr to tmp files so I can debug if
something goes wrong. Finally the schedule is defined in the <code>StartCalendarInterval</code>
key with a daily entry Monday to Friday at 6:55am.</p>

<p>Save the plist file as <code>wakeup.playlist.itunes.plist</code> and drop it in <code>~/Library/LaunchAgents/</code>
and load it via <code>launchctl</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>$ launchctl load -w ~/Library/LaunchAgents/wakeup.playlist.itunes.plist
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s it, everything should work fine, however if you want to make sure
it will, you might want to unload the plist, edit it so <code>RunAtLoad</code> is
set to true and reload it. At this point, your playlist should play. If
it doesn&#8217;t, then check the log files to see what happened.
When everything is good, unload, go back to the original version and
reload.</p>

<p>There is plenty more you can do with JS Automation for Mac, if like me
you are listening to a lot of music while coding, you might be
interested in knowing that <strong>Spotify</strong> and <strong>VLC</strong> are scriptable (and
so are most browsers).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Go challenge - binary decoding]]></title>
    <link href="http://matt.aimonetti.net/posts/2015/03/03/first-go-challenge-binary-decoding/"/>
    <updated>2015-03-03T23:24:00-08:00</updated>
    <id>http://matt.aimonetti.net/posts/2015/03/03/first-go-challenge-binary-decoding</id>
    <content type="html"><![CDATA[<p>I&#8217;m very glad to have had the chance to be involved with the very first
<a href="http://golang.org">Go</a> challenge. My challenge is related to something we do at <a href="https://splice.com">Splice</a>: binary decoding.</p>

<p>Read more on the <a href="http://golang-challenge.com/go-challenge1/">Go Challenge website</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pattern_1.splice
</span><span class='line'>Saved with HW Version: 0.808-alpha
</span><span class='line'>Tempo: 120
</span><span class='line'>(0) kick     |x---|x---|x---|x---|
</span><span class='line'>(1) snare    |----|x---|----|x---|
</span><span class='line'>(2) clap     |----|x-x-|----|----|
</span><span class='line'>(3) hh-open  |--x-|--x-|x-x-|--x-|
</span><span class='line'>(4) hh-close |x---|x---|----|x--x|
</span><span class='line'>(5) cowbell  |----|----|--x-|----|</span></code></pre></td></tr></table></div></figure>


<p><img src="http://matt.aimonetti.net/images/hex.png" alt="Splice challenge hex" /></p>

<p>The challenge is going on for 2 weeks until March 15, a new challenge
will be posted on April first. Prizes and conditions available on the
website. Comments and discussions available on
<a href="https://news.ycombinator.com/item?id=9125480">HackerNews</a></p>

<p>Note that I also wrote <a href="https://github.com/splicers/sm-808">another challenge</a> that we usually give our
frontend candidates. If you&#8217;re not into Go and prefer JS, you might like
this challenge better.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding &amp; sharing Rails sessions]]></title>
    <link href="http://matt.aimonetti.net/posts/2014/09/13/understanding-and-sharing-rails-sessions/"/>
    <updated>2014-09-13T10:15:00-07:00</updated>
    <id>http://matt.aimonetti.net/posts/2014/09/13/understanding-and-sharing-rails-sessions</id>
    <content type="html"><![CDATA[<p>In September 2014, I gave this talk at <a href="http://www.baruco.org/">Baruco</a>
in Barcelona, Spain. The talk focuses on:</p>

<ul>
<li>how session authentication works in Ruby on Rails,</li>
<li>the crypto used to protect the data,</li>
<li>the security implications and</li>
<li>how to share the session with applications written in other languages than Ruby (with an example in <a href="http://golang.org">Go</a>).</li>
</ul>


<p>To illustrate this pretty dry topic, I told the story of Alice and Bob,
two entrepreneurs building a succesful web application and facing some serious challenges.</p>

<h2>Video</h2>

<iframe width="640" height="480" src="http://matt.aimonetti.net//www.youtube.com/embed/vC5xR5CgThM" frameborder="0" allowfullscreen></iframe>


<h2>Slides</h2>

<script async class="speakerdeck-embed" data-slide="5" data-id="9260300033980132573d121bd1ded631" data-ratio="1.33333333333333" src="http://matt.aimonetti.net//speakerdeck.com/assets/embed.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go at Splice (Google I/O 2014)]]></title>
    <link href="http://matt.aimonetti.net/posts/2014/06/23/go-at-splice-google-i-slash-o-2014/"/>
    <updated>2014-06-23T10:48:00-07:00</updated>
    <id>http://matt.aimonetti.net/posts/2014/06/23/go-at-splice-google-i-slash-o-2014</id>
    <content type="html"><![CDATA[<p>The week of June 23rd was a good week for gophers in San Francisco. Go was a big part of Google I/O on Wednesday and Thursday, and on Monday Google run a Go SummerFest, a special instance of the GoSF meetup.</p>

<p>I gave a talk at Go SummerFest and then later on another one during I/O. For more
information about the events, see <a href="http://blog.golang.org/io2014">this blog post from the Go team</a>.</p>

<h2>Slides</h2>

<script async class="speakerdeck-embed" data-id="fb7887b033aa0132ef480af01cce597a" data-ratio="1.33333333333333" src="http://matt.aimonetti.net//speakerdeck.com/assets/embed.js"></script>


<p><a href="https://docs.google.com/a/golang.org/file/d/0B-nws9GU_6qVZklnNnJITlhSbXc/edit">Full screen slides</a></p>

<h2>Video</h2>

<p>My talk was recorded but it is not yet online.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go, Robots and code refactoring]]></title>
    <link href="http://matt.aimonetti.net/posts/2014/04/28/refactoring-go-code/"/>
    <updated>2014-04-28T10:45:00-07:00</updated>
    <id>http://matt.aimonetti.net/posts/2014/04/28/refactoring-go-code</id>
    <content type="html"><![CDATA[<p><a href="http://golang.org/">Go</a> aka golang is an amazing language but also a language that
is really easy to learn due to its small scope.
If you have some coding experience, you will be able to have fully working code
in a matter of minutes otherwise you might want to read <a href="http://www.golangbootcamp.com/">my free book</a> (WIP).</p>

<div style="text-align:center; padding:2em 0">
  <a href="http://www.golangbootcamp.com/"><img src="http://matt.aimonetti.net/images/matt_aimonetti-go_bootcamp.png" alt="Go Bootcamp free book (golang)"></a>
</div>


<p>Very much like with many other programming languages, a challenging part
of Go is to learn how to write idiomatic code.
The good news is that Go makes refactoring easy (and already has a lot
of conventions).
I strongly recommend <a href="http://peter.bourgon.org/go-in-production/">this post</a> from Peter Bourgon about Go at SoundCloud and
the extra conventions they follow (<a href="https://splice.com">Splice</a> also
follows the same conventions).</p>

<p>One of my favorite Go projects is the <a href="http://gobot.io">gobot</a> project
by <a href="http://hybridgroup.com/">HybridGroup</a>.</p>

<div style="text-align:center; padding:2em 0">
<a href="http://gobot.io/"><img src="http://matt.aimonetti.net/images/gobotio.png" alt="Gobot"></a>
</div>


<p>The Gobot project is pretty young and I noticed a few things that
could be improved so I offered my help to <a href="https://twitter.com/deadprogram">Ron</a>,
<a href="https://twitter.com/adzankich">Adrian</a> and the rest of the team.
Our discussion quickly turned into a fun group refactoring
session (featuring <a href="https://twitter.com/kytrinyx">@kytrinyx</a>,
<a href="https://twitter.com/deadprogram">@deadprogram</a>,
<a href="https://twitter.com/codegangsta">@codegangsta</a>,
<a href="https://twitter.com/jnbeck">@jnbeck</a>,
<a href="https://twitter.com/adzankich">@adzankich</a> )</p>

<div style="text-align:center; padding:2em 0">
  <img src="http://matt.aimonetti.net/images/matt_aimonetti-go_refactoring.jpg" alt="Go refactoring at GopherCon">
</div>


<h2>Packages</h2>

<p>Gobot is split into multiple packages, a core and a few other packages.
The gobot team, out of habit chose to put a package per repo.
After further discussions, we chose to bring all official packages
inside the same repo to keep things easier and to keep the import paths
clean and logical.</p>

<p>So instead of having:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>github.com/hybridgroup/gobot
</span><span class='line'>github.com/hybridgroup/gobot-sphero
</span><span class='line'>github.com/hybridgroup/gobot-...</span></code></pre></td></tr></table></div></figure>


<p>All the none-core packages are moved to subdirectories:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>github.com/hybridgroup/gobot
</span><span class='line'>github.com/hybridgroup/gobot/sphero
</span><span class='line'>github.com/hybridgroup/gobot/...</span></code></pre></td></tr></table></div></figure>


<p>This also allowed us to fix the package names
<code>gobot-sphero</code> is now simply <code>sphero</code></p>

<p>Which also allowed us to simplify the following code:</p>

<p>From:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">type</span> <span class="n">SpheroAdaptor</span> <span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">gobot</span><span class="p">.</span><span class="n">Adaptor</span>
</span><span class='line'>  <span class="n">sp</span> <span class="n">io</span><span class="p">.</span><span class="n">ReadWriteCloser</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">type</span> <span class="n">Adaptor</span> <span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">gobot</span><span class="p">.</span><span class="n">Adaptor</span>
</span><span class='line'>  <span class="n">sp</span> <span class="n">io</span><span class="p">.</span><span class="n">ReadWriteCloser</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We did that with a few other types and methods all over the packages.</p>

<p>We had a discussion about what lead to the multiple repos vs
one repo. There are legitimate cases for both approaches but in this
situation, the decision was based on a misunderstanding. The author
thought that by importing the top package, all sub packages would
also be somewhat included in the build, making the binary bigger than
needed. Since Go only compiles and links packages imported, moving all
packages within the same repo wouldn&#8217;t change the binary output.
Note that this is not because in this specific case we have all packages
in the same repo that this is the right thing to do every single time.</p>

<h2>doc.go</h2>

<p>By conventions, package should contain a <code>doc.go</code> file that contains
an overview of the package and often some information so the developer
trying to use the library can find the right entry points.</p>

<p>As usual, the standard libraries are a good example,
<a href="http://golang.org/src/pkg/net/http/doc.go">here is the net/http <code>doc.go</code> file</a>.</p>

<h2>Using a constructor</h2>

<p>We spent some time refactoring <code>master.go</code> which is the file implementing
the code handling one or multiple robots (which can each have multiple devices).</p>

<p>The original function code looked like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">func</span> <span class="n">GobotMaster</span><span class="p">()</span> <span class="p">*</span><span class="n">Master</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">m</span> <span class="p">:=</span> <span class="nb">new</span><span class="p">(</span><span class="n">Master</span><span class="p">)</span>
</span><span class='line'>  <span class="n">m</span><span class="p">.</span><span class="n">NumCPU</span> <span class="p">=</span> <span class="n">runtime</span><span class="p">.</span><span class="n">NumCPU</span><span class="p">()</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">m</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are a few things that aren&#8217;t really idiomatic in this code.
The first thing is that by convention, constructors are usually called <code>New&lt;Type&gt;</code>.
Secondly, the <a href="http://peter.bourgon.org/go-in-production/">community seems to follow</a> the following stylistic choice:
only use <code>new</code> and <code>make</code> when you need to set the capacity (<code>make([]string,3)</code>)
Finally we don&#8217;t need to allocate a variable. Here is the refactored code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">func</span> <span class="n">NewMaster</span><span class="p">()</span> <span class="p">*</span><span class="n">Master</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">&amp;</span><span class="n">Master</span><span class="p">{</span><span class="n">NumCPU</span><span class="p">:</span> <span class="n">runtime</span><span class="p">.</span><span class="n">NumCPU</span><span class="p">()}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Cleanup package vars</h2>

<p>In the original code, we had a variable called <code>trap</code> which was
a function living at the top level of the package:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">var</span> <span class="n">trap</span> <span class="p">=</span> <span class="k">func</span><span class="p">(</span><span class="n">c</span> <span class="k">chan</span> <span class="n">os</span><span class="p">.</span><span class="n">Signal</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">signal</span><span class="p">.</span><span class="n">Notify</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">os</span><span class="p">.</span><span class="n">Interrupt</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The func was then used to handle signals. The author
chose to use a variable so he could mutate it in the test suite and
avoid sending an interrupt when testing.
We realized we could avoid having this function variable at the top of the package by moving
it as a field on the <code>Master</code> type and setting the default func in the constructor.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">func</span> <span class="n">NewMaster</span><span class="p">()</span> <span class="p">*</span><span class="n">Master</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">&amp;</span><span class="n">Master</span><span class="p">{</span>
</span><span class='line'>      <span class="n">NumCPU</span><span class="p">:</span> <span class="n">runtime</span><span class="p">.</span><span class="n">NumCPU</span><span class="p">(),</span>
</span><span class='line'>      <span class="n">trap</span><span class="p">:</span> <span class="k">func</span><span class="p">(</span><span class="n">c</span> <span class="k">chan</span> <span class="n">os</span><span class="p">.</span><span class="n">Signal</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">signal</span><span class="p">.</span><span class="n">Notify</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">os</span><span class="p">.</span><span class="n">Interrupt</span><span class="p">)</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code still behaves the same and we can still overwrite the trap function in our tests
(since the tests are part of the same packge, the non exported field is available)
but we got rid of a top level var.</p>

<h2>Reading from a channel</h2>

<p>The following code was ranging over a predefined channel (<code>c</code>) of signals.
and when a signal would arrive, all robots belonging to the master
would be halted and disconnected.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">for</span> <span class="n">_</span> <span class="p">=</span> <span class="k">range</span> <span class="n">c</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">r</span> <span class="p">:=</span> <span class="k">range</span> <span class="n">m</span><span class="p">.</span><span class="n">Robots</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">m</span><span class="p">.</span><span class="n">Robots</span><span class="p">[</span><span class="n">r</span><span class="p">].</span><span class="n">haltDevices</span><span class="p">()</span>
</span><span class='line'>      <span class="n">m</span><span class="p">.</span><span class="n">Robots</span><span class="p">[</span><span class="n">r</span><span class="p">].</span><span class="n">finalizeConnections</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">break</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code above works well but could be cleaned up a little:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// waiting on something coming on the channel</span>
</span><span class='line'><span class="p">&lt;-</span> <span class="n">c</span>
</span><span class='line'><span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">r</span> <span class="p">:=</span> <span class="k">range</span> <span class="n">m</span><span class="p">.</span><span class="n">Robots</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">r</span><span class="p">.</span><span class="n">haltDevices</span><span class="p">()</span>
</span><span class='line'>  <span class="n">r</span><span class="p">.</span><span class="n">finalizeConnections</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code does the same thing but simpler.
We are trying to read from the channel which will block
(we don&#8217;t care about the result so we don&#8217;t capture or could have used an underscore).
Then we loop through each robot and stop them.
We managed to remove a for loop on the channel (with an odd break)
and made the code intent clearer.</p>

<h2>Chainable functions and typed nils</h2>

<p>Next, we tackled the following method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">func</span> <span class="p">(</span><span class="n">m</span> <span class="p">*</span><span class="n">Master</span><span class="p">)</span> <span class="n">FindRobotDevice</span><span class="p">(</span><span class="n">name</span> <span class="nb">string</span><span class="p">,</span> <span class="n">device</span> <span class="nb">string</span><span class="p">)</span> <span class="p">*</span><span class="n">device</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">robot</span> <span class="p">:=</span> <span class="n">m</span><span class="p">.</span><span class="n">FindRobot</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">robot</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">robot</span><span class="p">.</span><span class="n">GetDevice</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">nil</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The funny thing about this method is that it&#8217;s not needed.
We could get the same result by calling:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="n">m</span><span class="p">.</span><span class="n">FindRobot</span><span class="p">(</span><span class="s">&quot;bot name&quot;</span><span class="p">).</span><span class="n">GetDevice</span><span class="p">(</span><span class="s">&quot;laser&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>When I said that, someone suggested that it might be a bad idea
since <code>FindRobot()</code> might return <code>nil</code> and now we would be calling
<code>GetDevice()</code> on <code>nil</code> and bad things would happen.
Looking at the code, it was actually easy to fix.</p>

<p>Here is the original code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">func</span> <span class="p">(</span><span class="n">r</span> <span class="p">*</span><span class="n">Robot</span><span class="p">)</span> <span class="n">GetDevice</span><span class="p">(</span><span class="n">name</span> <span class="nb">string</span><span class="p">)</span> <span class="p">*</span><span class="n">device</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">device</span> <span class="p">:=</span> <span class="k">range</span> <span class="n">r</span><span class="p">.</span><span class="n">devices</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">device</span><span class="p">.</span><span class="n">Name</span> <span class="p">==</span> <span class="n">name</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">device</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">nil</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is the refactored version:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">func</span> <span class="p">(</span><span class="n">r</span> <span class="p">*</span><span class="n">Robot</span><span class="p">)</span> <span class="n">GetDevice</span><span class="p">(</span><span class="n">name</span> <span class="nb">string</span><span class="p">)</span> <span class="p">*</span><span class="n">device</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">r</span> <span class="p">==</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">nil</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">device</span> <span class="p">:=</span> <span class="k">range</span> <span class="n">r</span><span class="p">.</span><span class="n">devices</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">device</span><span class="p">.</span><span class="n">Name</span> <span class="p">==</span> <span class="n">name</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">device</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">nil</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Did you spot the difference? We just added a check to see if the pointer (<code>r</code>)
was nil, if it is, we just return <code>nil</code>.
When I added the code above, the person who was worried
about calling <code>GetDevice()</code> on <code>nil</code> was scratching his head.</p>

<p>Golang does something very interesting (and a bit surprising if you come
from a dynamic language),
it returns a nil pointer of the type we defined as return type.
Let&#8217;s walk through the code by rewriting it slightly differently:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">var</span> <span class="n">bot</span> <span class="p">*</span><span class="n">Robot</span>
</span><span class='line'><span class="n">bot</span> <span class="p">=</span> <span class="n">m</span><span class="p">.</span><span class="n">FindRobot</span><span class="p">(</span><span class="s">&quot;unknown name&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point if <code>FindRobot()</code> didn&#8217;t find a robot, <code>bot</code> is still
of type <code>*Robot</code> but the pointer is nil.
Because we defined a method <code>GetDevice()</code> on <code>*Robot</code>, we
can call:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="n">bot</span><span class="p">.</span><span class="n">GetDevice</span><span class="p">(</span><span class="s">&quot;x-ray&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>GetDevice()</code> method will execute and will return <code>nil</code> right
away because we check if the pointer is <code>nil</code>.</p>

<p>The fact that nil pointers have types has 2 important implications,
the first one is that you can nicely chain methods without
checking at the caller site if the returned value is <code>nil</code>.
The second is that your methods should expect to be potentially
called on a nil pointer and should properly handle such cases.</p>

<p><strong>Note</strong>: Go team member <a href="https://twitter.com/enneff">Andrew Gerrand</a>
suggested on <a href="https://news.ycombinator.com/item?id=7667554">Hacker News</a>
to name the method <code>Device</code> instead of <code>GetDevice</code>. The word <code>Get</code> is almost always redundant.
In the same chain of thoughts, maybe we should rename <code>FindRobot</code> just <code>Robot</code>.</p>

<h2>Collection types / type aliasing</h2>

<p>I&#8217;m writing this post on my way back from GopherCon and there
was one more thing I wanted to clean up and share with you.
This is a nice pattern I use often to simplify my code.</p>

<p>Our <code>Robot</code> type has a <code>connections</code> field and a <code>devices</code> field:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">type</span> <span class="n">Robot</span> <span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// .. fields removed to simplify the example</span>
</span><span class='line'>  <span class="n">devices</span>       <span class="p">[]*</span><span class="n">device</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To avoid always having to manually loop through the slice, a method is defined on
pointers to <code>Robot</code>. This method iterates over
the devices and halts them:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">func</span> <span class="p">(</span><span class="n">r</span> <span class="p">*</span><span class="n">Robot</span><span class="p">)</span> <span class="n">haltDevices</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">device</span> <span class="p">:=</span> <span class="k">range</span> <span class="n">r</span><span class="p">.</span><span class="n">devices</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">device</span><span class="p">.</span><span class="n">Halt</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code is totally fine but from an API design perspective, wouldn&#8217;t it be nicer
to use?:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="n">r</span><span class="p">.</span><span class="n">devices</span><span class="p">().</span><span class="n">Halt</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>One of the nice things with this approach is that the concept of halting, which
really belongs to the devices, doesn&#8217;t need to leak into the <code>Robot</code> world.</p>

<p>To implement the suggested API change, we need to define a <a href="http://www.golangbootcamp.com/book/methods_and_interfaces#uid90">type alias</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">type</span> <span class="n">DeviceCollection</span> <span class="p">[]*</span><span class="n">device</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can now define methods on our new type:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">func</span> <span class="p">(</span><span class="n">c</span> <span class="n">DeviceCollection</span><span class="p">)</span> <span class="n">Halt</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">device</span> <span class="p">:=</span> <span class="k">range</span> <span class="n">c</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">device</span><span class="p">.</span><span class="n">Halt</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We then need to update our <code>Robot</code> type:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">type</span> <span class="n">Robot</span> <span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// .. fields removed to simplify the example</span>
</span><span class='line'>  <span class="n">devices</span>       <span class="n">DeviceCollection</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And we are done with our refactoring.</p>

<p>One last note, since we might need to call different methods on our collection
we could create an iterator method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">func</span> <span class="p">(</span><span class="n">c</span> <span class="n">DeviceCollection</span><span class="p">)</span> <span class="n">Each</span><span class="p">(</span><span class="n">f</span> <span class="k">func</span><span class="p">(*</span><span class="n">device</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">d</span> <span class="p">:=</span> <span class="k">range</span> <span class="n">c</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">f</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// which can be called like so</span>
</span><span class='line'><span class="n">r</span><span class="p">.</span><span class="n">devices</span><span class="p">.</span><span class="n">Each</span><span class="p">(</span><span class="k">func</span><span class="p">(</span><span class="n">d</span> <span class="p">*</span><span class="n">device</span><span class="p">){</span>
</span><span class='line'>  <span class="n">d</span><span class="p">.</span><span class="n">Halt</span><span class="p">()</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>Needless to say that we had fun. The refactoring went much further
and we removed the use of reflections, some sleeps and much more.
The code is going through a nice cleanup before reaching 1.0 and
I can only encourage everybody to play with <a href="http://gobot.io">Gobot</a>,
there are very few things as fun as Go and Robots!
(The code is open sourced, look at it, add new drivers, send PRs!)</p>

<p>I&#8217;d like to thank <a href="https://twitter.com/deadprogram">Ron Evans</a> and the <a href="http://hybridgroup.com/">Hybrid Group</a>
for  open sourcing their code and sharing the fun with all of us.
I can&#8217;t wait for the next LA Go + Robot hack night.</p>

<p>Finally, <a href="https://splice.com">Splice</a> is hiring, our stack uses a lot of
different technologies but our backend is all in Go and we are always
looking for talented engineers. Drop me a line if interested.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Books to read in 2014]]></title>
    <link href="http://matt.aimonetti.net/posts/2013/12/31/books-to-read-in-2014/"/>
    <updated>2013-12-31T09:00:00-08:00</updated>
    <id>http://matt.aimonetti.net/posts/2013/12/31/books-to-read-in-2014</id>
    <content type="html"><![CDATA[<p>I like to read and I have a great community on Twitter so I asked them
what they think others and myself should read in 2014.
Here is the compiled list of the recommended books.
The good news is that most of these books are under $10, so why not
picking a couple for the new year?</p>

<p>A big thanks to all the people who recommended these books, I&#8217;m looking
forward to 2014!</p>

<table>
  <thead>
  <tr>
    <th style="width:20%; text-align:center"> Cover  </th>
    <th style="width:30%; text-align:center"> Title </th>
    <th style="width:20%; text-align:center"> Type </th>
    <th style="width:30%; text-align:center"> Recommended by</th>
  </tr>
  </thead>
  <tbody>

  <tr>
    <td><a href="http://www.amazon.com/gp/product/B008U4HH54/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B008U4HH54&linkCode=as2&tag=merbist-20"><img src="https://images-na.ssl-images-amazon.com/images/I/51rwkxlzOQL._SL160_.jpg" alt="The Interestings" border="0" style="padding-top:10px"></a></td>
    <td><a href="http://www.amazon.com/gp/product/B008U4HH54/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B008U4HH54&linkCode=as2&tag=merbist-20" target="_blank">The Interestings</a></td>
    <td>Novel</td>
    <td><a title="@aweissman" href="https://twitter.com/aweissman" target="_blank"> <img src='https://pbs.twimg.com/profile_images/344513261581924513/b3735cda4529be5530c9d29b6f8e148e_bigger.jpeg' ><br /> Andrew Weissman<br />@aweissman</a></a></td>
  </tr>

  <tr>
    <td><a href="http://www.amazon.com/gp/product/B00AEBETMK/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B00AEBETMK&linkCode=as2&tag=merbist-20"><img src="https://images-na.ssl-images-amazon.com/images/I/51mquDqvXDL._SL160_.jpg" alt="Lexicon" border="0" style="padding-top:10px"></a></td>
    <td><a href="http://www.amazon.com/gp/product/B00AEBETMK/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B00AEBETMK&linkCode=as2&tag=merbist-20" target="_blank">Lexicon</a></td>
    <td>Novel</td>
    <td><a title="@Adkron" href="https://twitter.com/Adkron" target="_blank"> <img src='https://pbs.twimg.com/profile_images/3485440049/a0f1a8fd26883c905443be6b17091a43_bigger.jpeg' ><br /> Amos King<br />@Adkron</a></a></td>
  </tr>

  <tr>
    <td><a href="https://www.amazon.com/dp/B004X6PRO6?tag=merbist-20&camp=0&creative=0&linkCode=as4&creativeASIN=B004X6PRO6&adid=040WG8W6HCZ9D7GW6FCZ&"><img src="https://images-na.ssl-images-amazon.com/images/I/416VaBI-AnL._SL160_.jpg" alt="The Orphan Master's Son (Pulitzer Prize for Fiction)" border="0" style="padding-top:10px"></a></td>
    <td><a href="https://www.amazon.com/dp/B004X6PRO6?tag=merbist-20&camp=0&creative=0&linkCode=as4&creativeASIN=B004X6PRO6&adid=040WG8W6HCZ9D7GW6FCZ&" target="_blank">The Orphan Master&#8217;s Son (Pulitzer Prize for Fiction)</a></td>
    <td>Novel</td>
    <td><a title="@bryanwoods" href="https://twitter.com/bryanwoods" target="_blank"> <img src='https://pbs.twimg.com/profile_images/378800000586125380/e28de02be744272035a9b5509d5ab576_bigger.jpeg' ><br /> Bryan Woods<br />@bryanwoods</a></a></td>
  </tr>

  <tr>
    <td><a href="http://www.amazon.com/gp/product/B008J4NBHI/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B008J4NBHI&linkCode=as2&tag=merbist-20"><img src="https://images-na.ssl-images-amazon.com/images/I/510e7pW7-YL._SL160_.jpg" alt="The Flamethrowers" border="0" style="padding-top:10px"></a></td>
    <td><a href="http://www.amazon.com/gp/product/B008J4NBHI/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B008J4NBHI&linkCode=as2&tag=merbist-20" target="_blank">The Flamethrowers</a></td>
    <td>Novel</td>
    <td><a title="@aweissman" href="https://twitter.com/aweissman" target="_blank"> <img src='https://pbs.twimg.com/profile_images/344513261581924513/b3735cda4529be5530c9d29b6f8e148e_bigger.jpeg' ><br /> Andrew Weissman<br />@aweissman</a></a></td>
  </tr>

  <tr>
    <td><a href="http://www.amazon.com/gp/product/B008FPOIT6/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B008FPOIT6&linkCode=as2&tag=merbist-20"><img src="https://images-na.ssl-images-amazon.com/images/I/51uYnHtUXLL._SL160_.jpg" alt="Mr. Penumbra's 24-Hour Bookstore" border="0" style="padding-top:10px"></a></td>
    <td><a href="http://www.amazon.com/gp/product/B008FPOIT6/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B008FPOIT6&linkCode=as2&tag=merbist-20" target="_blank">Mr. Penumbra&#8217;s 24-Hour Bookstore</a></td>
    <td>Novel</td>
    <td><a title="@conrey" href="https://twitter.com/conrey" target="_blank"> <img src='https://pbs.twimg.com/profile_images/378800000197700668/7625b773ea917bcd87aa8c2a0be8588f_bigger.jpeg' ><br /> Chris Conrey<br />@conrey</a></a></td>
  </tr>

  <tr>
    <td><a href="http://www.amazon.com/gp/product/B000FBJF8C/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B000FBJF8C&linkCode=as2&tag=merbist-20"><img src="https://images-na.ssl-images-amazon.com/images/I/41HZER4774L._SL160_.jpg" alt="Lying Awake" border="0" style="padding-top:10px"></a></td>
    <td><a href="http://www.amazon.com/gp/product/B000FBJF8C/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B000FBJF8C&linkCode=as2&tag=merbist-20" target="_blank">Lying Awake</a></td>
    <td>Novel</td>
    <td><a title="@aweissman" href="https://twitter.com/aweissman" target="_blank"> <img src='https://pbs.twimg.com/profile_images/344513261581924513/b3735cda4529be5530c9d29b6f8e148e_bigger.jpeg' ><br /> Andrew Weissman<br />@aweissman</a></a></td>
  </tr>

  <tr>
    <td><a href="http://www.amazon.com/gp/product/B000FBFO8C/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B000FBFO8C&linkCode=as2&tag=merbist-20"><img src="https://images-na.ssl-images-amazon.com/images/I/31kDOO-T2lL._SL160_.jpg" alt="Perdido Street Station" border="0" style="padding-top:10px"></a></td>
    <td><a href="http://www.amazon.com/gp/product/B000FBFO8C/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B000FBFO8C&linkCode=as2&tag=merbist-20" target="_blank">Perdido Street Station</a></td>
    <td>Novel</td>
    <td><a title="@olg" href="https://twitter.com/olg" target="_blank"> <img src='https://pbs.twimg.com/profile_images/204337634/935afae3375820ecc0bfbe5288d9b411-2_bigger.jpeg' ><br /> Olivier Gutknecht<br />@olg</a></a></td>
  </tr>

  <tr>
    <td><a href="http://www.amazon.com/gp/product/B004CFA91Y/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B004CFA91Y&linkCode=as2&tag=merbist-20"><img src="https://images-na.ssl-images-amazon.com/images/I/51MCnQRKCyL._SL160_.jpg" alt="The Sisters Brothers" border="0" style="padding-top:10px"></a></td>
    <td><a href="http://www.amazon.com/gp/product/B004CFA91Y/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B004CFA91Y&linkCode=as2&tag=merbist-20" target="_blank">The Sisters Brothers</a></td>
    <td>Novel</td>
    <td><a title="@aweissman" href="https://twitter.com/aweissman" target="_blank"> <img src='https://pbs.twimg.com/profile_images/344513261581924513/b3735cda4529be5530c9d29b6f8e148e_bigger.jpeg' ><br /> Andrew Weissman<br />@aweissman</a></a></td>
  </tr>

  <tr>
    <td><a href="http://www.amazon.com/gp/product/B000OZ0NXA/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B000OZ0NXA&linkCode=as2&tag=merbist-20"><img src="https://images-na.ssl-images-amazon.com/images/I/51zzGBqKVPL._SL160_.jpg" alt="Killing Floor (Jack Reacher, No. 1)" border="0" style="padding-top:10px"></a></td>
    <td><a href="http://www.amazon.com/gp/product/B000OZ0NXA/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B000OZ0NXA&linkCode=as2&tag=merbist-20" target="_blank">Killing Floor (Jack Reacher, No. 1)</a></td>
    <td>Novel</td>
    <td><a title="@drnic" href="https://twitter.com/drnic" target="_blank"> <img src='https://pbs.twimg.com/profile_images/2243751587/drnic_by_jeff_casimir_at_railsconf2010_-_thumbnail_bigger.png' ><br /> Dr Nic<br />@drnic</a></a></td>
  </tr>

  <tr>
    <td><a href="http://www.amazon.com/gp/product/B003RRXXMA/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B003RRXXMA&linkCode=as2&tag=merbist-20"><img src="https://images-na.ssl-images-amazon.com/images/I/51KOAfltTRL._SL160_.jpg" alt="Jonathan Strange and Mr Norrell" border="0" style="padding-top:10px"></a></td>
    <td><a href="http://www.amazon.com/gp/product/B003RRXXMA/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B003RRXXMA&linkCode=as2&tag=merbist-20" target="_blank">Jonathan Strange and Mr Norrell</a></td>
    <td>Novel</td>
    <td><a title="@olg" href="https://twitter.com/olg" target="_blank"> <img src='https://pbs.twimg.com/profile_images/204337634/935afae3375820ecc0bfbe5288d9b411-2_bigger.jpeg' ><br /> Olivier Gutknecht<br />@olg</a></a></td>
  </tr>

  <tr>
    <td><a href="https://www.amazon.com/dp/B00555X8OA?tag=merbist-20&camp=0&creative=0&linkCode=as4&creativeASIN=B00555X8OA&adid=0PMMZTW1D2GZ2JYSBZ7S&"><img src="https://images-na.ssl-images-amazon.com/images/I/41shZGS-G%2BL._SL160_.jpg" alt="Thinking, Fast and Slow" border="0" style="padding-top:10px"></a></td>
    <td><a href="https://www.amazon.com/dp/B00555X8OA?tag=merbist-20&camp=0&creative=0&linkCode=as4&creativeASIN=B00555X8OA&adid=0PMMZTW1D2GZ2JYSBZ7S&" target="_blank">Thinking, Fast and Slow</a></td>
    <td>Psychology / Business Decision-Making</td>
    <td><a title="@atduskgreg" href="https://twitter.com/atduskgreg" target="_blank"> <img src='https://pbs.twimg.com/profile_images/413083183471538176/pxJfy0v1_bigger.png' ><br /> Greg Borenstein<br />@atduskgreg</a></a></td>
  </tr>

  <tr>
    <td><a href="http://www.amazon.com/gp/product/B007V65R54/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B007V65R54&linkCode=as2&tag=merbist-20"><img src="https://images-na.ssl-images-amazon.com/images/I/51ag2JxaFxL._SL160_.jpg" alt="The Signal and the Noise: Why So Many Predictions Fail-but Some Don't" border="0" style="padding-top:10px"></a></td>
    <td><a href="http://www.amazon.com/gp/product/B007V65R54/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B007V65R54&linkCode=as2&tag=merbist-20" target="_blank">The Signal and the Noise: Why So Many Predictions Fail-but Some Don&#8217;t</a></td>
    <td>Business Planning & Forecasting</td>
    <td><a title="@roidrage" href="https://twitter.com/roidrage" target="_blank"> <img src='https://pbs.twimg.com/profile_images/2938540224/9ffc554b0eabb077a915cfe0d56f3c1f_bigger.jpeg' ><br /> Mathias Meyer<br />@roidrage</a></a></td>
  </tr>

  <tr>
    <td><a href="http://www.amazon.com/gp/product/B001S59CP0/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B001S59CP0&linkCode=as2&tag=merbist-20"><img src="https://images-na.ssl-images-amazon.com/images/I/41ukeeK16zL._SL160_.jpg" alt="The Life You Can Save: Acting Now to End World Poverty" border="0" style="padding-top:10px"></a></td>
    <td><a href="http://www.amazon.com/gp/product/B001S59CP0/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B001S59CP0&linkCode=as2&tag=merbist-20" target="_blank">The Life You Can Save: Acting Now to End World Poverty</a></td>
    <td>Philanthropy & Charity</td>
    <td><a title="@tpdubs2" href="https://twitter.com/tpdubs2" target="_blank"> <img src='https://pbs.twimg.com/profile_images/1875371426/IMG_1963_bigger.jpg' ><br /> Theresa Preston-Werner<br />@tpdubs2</a></a></td>
  </tr>

  <tr>
    <td><a href="http://www.amazon.com/gp/product/B005VSRFEA/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B005VSRFEA&linkCode=as2&tag=merbist-20"><img src="https://images-na.ssl-images-amazon.com/images/I/51LhBKtrCZL._SL160_.jpg" alt="Thinking in Systems: A Primer" border="0" style="padding-top:10px"></a></td>
    <td><a href="http://www.amazon.com/gp/product/B005VSRFEA/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B005VSRFEA&linkCode=as2&tag=merbist-20" target="_blank">Thinking in Systems: A Primer</a></td>
    <td>Problem Solving</td>
    <td><a title="@roidrage" href="https://twitter.com/roidrage" target="_blank"> <img src='https://pbs.twimg.com/profile_images/2938540224/9ffc554b0eabb077a915cfe0d56f3c1f_bigger.jpeg' ><br /> Mathias Meyer<br />@roidrage</a></a></td>
  </tr>

  <tr>
    <td><a href="https://www.amazon.com/dp/B00FM0OC4S?tag=merbist-20&amp;camp=0&amp;creative=0&amp;linkCode=as4&amp;creativeASIN=B00FM0OC4S&amp;adid=01GQ5KB9AGZ9M02BFA7B&amp;"><img src="https://images-na.ssl-images-amazon.com/images/I/51S0zRDsbtL._SL160_.jpg" alt="High Performance Browser Networking" border="0" style="padding-top:10px"></a></td>
    <td><a href="https://www.amazon.com/dp/B00FM0OC4S?tag=merbist-20&amp;camp=0&amp;creative=0&amp;linkCode=as4&amp;creativeASIN=B00FM0OC4S&amp;adid=01GQ5KB9AGZ9M02BFA7B&amp;" target="_blank">High Performance Browser Networking</a></td>
    <td>Technical</td>
    <td><a title="@kstewart" href="https://twitter.com/kstewart" target="_blank"> <img src='https://pbs.twimg.com/profile_images/411994393231372288/fiPif7_Q_bigger.jpeg' ><br /> Kevin Stewart<br />@kstewart</a></a></td>
  </tr>

  <tr>
    <td><a href="http://www.amazon.com/gp/product/B009NF6Z2K/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B009NF6Z2K&linkCode=as2&tag=merbist-20"><img src="https://images-na.ssl-images-amazon.com/images/I/51KxC4wQCsL._SL160_.jpg" alt="NOS4A2" border="0" style="padding-top:10px"></a></td>
    <td><a href="http://www.amazon.com/gp/product/B009NF6Z2K/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B009NF6Z2K&linkCode=as2&tag=merbist-20" target="_blank">NOS4A2</a></td>
    <td>Novel</td>
    <td><a title="@diminish7" href="https://twitter.com/diminish7" target="_blank"> <img src='https://pbs.twimg.com/profile_images/1434299830/jason_on_grays_and_torreys_climb_bigger.jpg' ><br /> Jason Rush<br />@diminish7</a></a></td>
  </tr>

  <tr>
    <td><a href="http://www.amazon.com/gp/product/B0047T86CO/ref=as_li_ss_il?ie=UTF8&camp=1789&creative=390957&creativeASIN=B0047T86CO&linkCode=as2&tag=merbist-20"><img src="https://images-na.ssl-images-amazon.com/images/I/31c63zBdD6L._SL160_.jpg" alt="Basic Economics: A Common Sense Guide to the Economy, 4th Edition" border="0" style="padding-top:10px"></a></td>
    <td><a href="http://www.amazon.com/gp/product/B0047T86CO/ref=as_li_ss_il?ie=UTF8&camp=1789&creative=390957&creativeASIN=B0047T86CO&linkCode=as2&tag=merbist-20" target="_blank">Basic Economics: A Common Sense Guide to the Economy, 4th Edition</a></td>
    <td>Economics</td>
    <td><a title="@rubiety" href="https://twitter.com/rubiety" target="_blank"> <img src='https://pbs.twimg.com/profile_images/2909781099/17f882cfce30ac2a938d072c85251d55_bigger.png' ><br /> Ben Hughes<br />@rubiety</a></a></td>
  </tr>

  </tbody>
</table>


<p>If you want more, you can check the <a href="http://merbist.com/2011/12/30/books-to-read-in-2012-recommended-to-me-by-twitter/">previous book recommendation list</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sharing Rails Sessions with Non-Ruby Apps]]></title>
    <link href="http://matt.aimonetti.net/posts/2013/11/30/sharing-rails-sessions-with-non-ruby-apps/"/>
    <updated>2013-11-30T12:01:00-08:00</updated>
    <id>http://matt.aimonetti.net/posts/2013/11/30/sharing-rails-sessions-with-non-ruby-apps</id>
    <content type="html"><![CDATA[<p>I wanted to share sessions between my Rails and Go applications. I wanted to let an authenticated Rails user make JavaScript API calls to an endpoint written in Go. How hard could it be?</p>

<p>Since I own both apps, I thought it would be as simple as sharing the secret session key and re-implementing Rails crypto process in Go. It turned out to be a lot more interesting.</p>

<p>In a nutshell, here is what I discovered:</p>

<ul>
<li> It&#8217;s totally doable! Here is my <a href="http://godoc.org/github.com/mattetti/goRailsYourself/crypto">Go package</a>.</li>
<li> If you are using a version of Rails older than 4.0, you’d better upgrade ASAP!</li>
<li> Rails has been criticized for security issues, but the current solution has been vetted by many experts.</li>
<li> Rails serializes session data using Ruby Marshal which means that someone with the secret key can <em>inject arbitrary code in the session</em> and it will execute server side. Switch to JSON, MessagePack or other safe serialization formats.</li>
<li> Security is (still) hard.</li>
</ul>


<h2>Rails Cookies are Dangerous</h2>

<p>Because Rails serializes and deserializes the session and any encrypted/signed cookies using Ruby&#8217;s Marshal library, someone with the app secret can wreak havoc. They can embed arbitrary Ruby code into the cookie, submit it with a request, and the server-side deserialization will execute that code without you noticing. Granted, this requires the attacker to have the app secret, but since 99% of the apps out there have the shared secret in their source code, anyone with access to the source code has this data. It’s not data you can easily rotate when employees leave or when you are done working with contractors. Anybody with the shared secret is a potential attacker. Start by moving this data out of the code base and into an environment variable.</p>

<p>Rails doesn’t let you change the default serializer directly. But Rails relies on ActiveSupport for its crypto work and AS supports swapping the serializer. Some people in the community are aware of this issue and monkey patch Rails to serialize their sessions using JSON or another alternative. Here is an <a href="http://nerds.airbnb.com/upgrading-from-ree-187-to-ruby-193/">Airbnb article</a> and
<a href="https://gist.github.com/jeffyip/4091166">Rails 3 patch</a>. <a href="https://gist.github.com/mattetti/7624413">Here is my Rails 4 monkey patch</a> to switch the serialization to JSON. I&#8217;m using it in production with Rails 4, but it&#8217;s untested on Rails 3.</p>

<p>You can modify either solution to use <a href="http://msgpack.org/">MessagePack</a> instead of JSON if you want to fit more data in the 4K cookie size.</p>

<h2>Understanding Rails Session Encryption</h2>

<p>Once I addressed the serialization issue, I had to reimplement the crypto work done by Rails to encode and/or sign the data.</p>

<p>Most of us just rely on our frameworks/libraries to do the right thing, but we rarely look under the hood. I ported the logic to Golang which has an amazing support for crypto (albeit lower level than Ruby). My <a href="http://godoc.org/github.com/mattetti/goRailsYourself/crypto">Go package</a> contains an explanation of the code logic and <a href="http://godoc.org/github.com/mattetti/goRailsYourself/crypto#pkg-examples">the examples</a> needed to decode/verify as well as encode/sign sessions that are compatible with Rails.</p>

<p>Here is a high level summary of what Rails does when it encodes and signs your session data:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">key_generator</span> <span class="o">=</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">CachingKeyGenerator</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">ActiveSupport</span><span class="o">::</span><span class="no">KeyGenerator</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">app_secret_key</span><span class="p">,</span> <span class="n">iterations</span><span class="p">:</span> <span class="mi">1000</span><span class="p">))</span>
</span><span class='line'><span class="n">derived_secret</span> <span class="o">=</span> <span class="n">key_generator</span><span class="o">.</span><span class="n">generate_key</span><span class="p">(</span><span class="s2">&quot;encrypted cookie&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">sign_secret</span> <span class="o">=</span> <span class="n">key_generator</span><span class="o">.</span><span class="n">generate_key</span><span class="p">(</span><span class="s2">&quot;signed encrypted cookie&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">encryptor</span> <span class="o">=</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">MessageEncryptor</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">secret</span><span class="p">,</span> <span class="n">sign_secret</span><span class="p">)</span>
</span><span class='line'><span class="n">session_content</span> <span class="o">=</span> <span class="n">encryptor</span><span class="o">.</span><span class="n">encrypt_and_sign</span><span class="p">({</span><span class="n">hello</span><span class="p">:</span> <span class="s2">&quot;world&quot;</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>session_content</code> string is then set as the session cookie value.
Note that you could do that in any Ruby app using <code>ActiveSupport</code>, making it easy to share sessions between Ruby applications (like Rails &amp; Sinatra).</p>

<p>Technically, there are a lot of things going on. To avoid using the same secret to sign and encode data, Rails relies on derived keys using <a href="http://en.wikipedia.org/wiki/PBKDF2">PBKDF2</a> (password based key derivation function).
It treats the app secret as a password and applies a pseudorandom function 1000 times (Rails default) using a default salt. The result is a derived key so the original password isn’t shared. The derived key can be regenerated identically if the salt and secret are known (because the function is pseudorandom).</p>

<p>The two derived keys are then passed to the <a href="https://github.com/rails/rails/blob/master/activesupport/lib/active_support/message_encryptor.rb"><code>MessageEncryptor</code></a> class which uses <a href="https://github.com/rails/rails/blob/master/activesupport/lib/active_support/message_verifier.rb"><code>MessageVerifier</code></a> to do the signing. The generated keys are 64 bytes long. One key goes to the encryptor while the other goes to the verifier.</p>

<p>The verification is done via <a href="http://en.wikipedia.org/wiki/Hash-based_message_authentication_code">HMAC (SHA1)</a> and it uses the full 64 byte key.
The encoding is done via <a href="http://en.wikipedia.org/wiki/Advanced_Encryption_Standard">AES 256 CBC</a> only using the first 32 bytes of the encryption derived key. Rails will only generate a 32-byte key since that&#8217;s the expected key length.</p>

<p>The session data is serialized (using Marshal by default) then encoded via AES. Both the encoded string and the <a href="http://en.wikipedia.org/wiki/Initialization_vector">IV</a> are encoded using base64 and joined in a string using a predefined format.</p>

<p>At this point, the session is encoded but it could be tampered with. To avoid that, Rails signs the encoded data using the verifier (HMAC) and appends the base 64 encoded signature to the encoded data.</p>

<p>To decode and verify the data, Rails repeats the process in reverse using the serializer to deserialize the data.</p>

<p>Note that you can also rely on the the same crypto process to safely encode/sign <em>any</em> data you want to share. If you&#8217;re ok with the data being user-readable, sign it to make sure it isn&#8217;t tampered with along the way. If you don&#8217;t want it to be user-readable, encrypt it first then sign the encrypted data.</p>

<h2>Sharing the Session with Non-Ruby Apps</h2>

<p>Many apps are moving to an SOA approach. That often means multiple languages living together in production. Sharing a web session can be very useful, especially until you switch to a SSO solution.</p>

<p>The key is to start by having the session data serialized in a format that is available in all your relevent languages. JSON, XML MessagePack, and protobuf are good examples.</p>

<p>The second step is to reimplement the crypto dance I just explained above. The good news is that I’ve already done it for Go. Using that example, you should be able to port it to other languages (Node, Scala/Clojure/Java, Rust, Elixir, Python or whatever you fancy).</p>

<p>https://github.com/mattetti/goRailsYourself/tree/master/crypto</p>

<p>Even though the test suite isn’t perfect (yet), it should greatly help you through the porting process. To be honest the hardest part was understanding the process, not writing the code. Most languages have decent crypto libraries to do the hard parts for you. But for Go I had to implement lower level pieces like the PKCS7 padding for the AES CBC encryption/decryption.</p>

<p>Hopefully this article was helpful and you now better understand how Rails does its session encryption. Once you understand the process Rails uses, you can implement it in any language.</p>

<p><strong> Finally, if you interested in working on interesting and challenging
problems like these ones, consider joining the <a href="https://splice.com">Splice</a> team! </strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bad code doesn't exist]]></title>
    <link href="http://matt.aimonetti.net/posts/2013/10/14/bad-code-doesnt-exist/"/>
    <updated>2013-10-14T09:08:00-07:00</updated>
    <id>http://matt.aimonetti.net/posts/2013/10/14/bad-code-doesnt-exist</id>
    <content type="html"><![CDATA[<p>I just give a talk at <a href="http://wickedgoodruby.com/">Wicked Good Ruby Conf</a> in Boston. I&#8217;m sure the talk will be online soon, but I figured it would be interesting to discuss it a bit further in a blog post.</p>

<p>The format was a bit different than usual, I had a 40 minute slot and
divided in 2, I made my points for 20 minutes and invited two special
guests on stage to discuss the topic. The reason for this format is
because I think we all learn better by looking at things from different
perspectives. I can&#8217;t thank enough <a href="http://www.sandimetz.com/">Sandi Metz</a> and <a href="http://kytrinyx.com/">Katrina Owen</a> for their contributions.</p>

<p>Here are a few points that I think are interesting and
that we discussed during the talk.</p>

<h2>There isn&#8217;t such thing as bad code</h2>

<p>Bad code doesn&#8217;t exist, you have code that can be interpreted/compiled and code that doesn&#8217;t.
&#8220;Good&#8221; and &#8220;bad&#8221; are moralistic designations, not scientific ones.
Let&#8217;s try to stop using these terms to refer to talk. Let&#8217;s be more
precise when arguing about code, &#8220;what do you mean by bad?&#8221; Is it
hard to maintain, hard to understand, slow etc.. ?
Always refer to the context in which the code was written. Don&#8217;t use it
as an excuse to defend anybody&#8217;s potentially hurt ego, but instead to
explain why the code was written caring about certain values instead of
others. Most code turns emo after a little while, being able to
understand the context, helps a lot the devision process when facing
such code.</p>

<p><img src="http://matt.aimonetti.net/images/matt_aimonetti-code_apology.jpg" alt="Bad code" /></p>

<h2>It&#8217;s all about expected outcome and context</h2>

<p>As developers, we aren&#8217;t paid to write code, we are paid to build
products, to convert ideas into something &#8220;concrete&#8221;. When I use my
favorite app, I don&#8217;t care that the code is beautiful, I care that it
works, that it&#8217;s stable and provides me with what I need. If the code is
written in Go, Pascal, Erlang, VB or Ruby doesn&#8217;t matter at all. That the
code has full test coverage and was written in an agile manner using
weekly scrums and TDD is probably as important as knowing the Pantone
color of a company&#8217;s logo: it only matters to the people deeply
involved.</p>

<p>Don&#8217;t focus on how to build, focus on why you build things. Then the how
will come as you learn from others, experiment and discover &#8220;how&#8221; to build
the &#8220;why&#8221;. The &#8220;why&#8221; is often the constant, the &#8220;how&#8221; keeps on changing
as we collect more information.</p>

<h2>We love rules</h2>

<p>When you learn, rules are easier. Katrina made a very good point during
our discussion. When she teaches, she needs to have very strong rules
that she can justify. That said, her rules can change, and as you become
better, you can start challenging the rules. Rules are somewhere between
training wheels and a guard-rail. They are very useful but shouldn&#8217;t be
used to attack other people.</p>

<p>Ruby has a language doesn&#8217;t enforce many rules, as a matter of fact,
Matz designed a language so you can set your own rules, or barely have
any rules.
This fact probably explains why so many people are after solid rules
they can rely on. Rules are easy to follow and are a good reference.
The Ruby language doesn&#8217;t have enough rules to some, so the community is
helping by coming together to define them.
This is by the way, the biggest difference with Python and Go where
these 2 languages explicitly want to only have 1 way of doing one thing.</p>

<h2>Communication and team work</h2>

<p>The key to building a good product (which is what we are paid to do) is
communication. Unfortunately, us developers, are on average, pretty
terrible at that.
We need to do a better job communicating with the rest of the
organization (i.e: anybody who&#8217;s not an engineer). It usually starts by
the designers. The expected outcome of the product should be clear, well
understood by all and easily evaluable.
Within the engineering team, coding values should be set explicitly.
Not everyone will agree but when we write code, we should all care about
the same overall values so our work is consistent. When something
happens and we have a disagreement, it&#8217;s easier to refer to our values
to decide what solution to pick.</p>

<h2>Slides</h2>

<script async class="speakerdeck-embed" data-id="f325aee016620131a63906e09cf22df5" data-ratio="1.33333333333333" src="http://matt.aimonetti.net//speakerdeck.com/assets/embed.js"></script>


<h2>Video</h2>

<iframe width="640" height="480" src="http://matt.aimonetti.net//www.youtube.com/embed/VO-NvnZfMA4" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What technology should my startup use?]]></title>
    <link href="http://matt.aimonetti.net/posts/2013/08/27/what-technology-should-my-startup-use/"/>
    <updated>2013-08-27T22:10:00-07:00</updated>
    <id>http://matt.aimonetti.net/posts/2013/08/27/what-technology-should-my-startup-use</id>
    <content type="html"><![CDATA[<p>Over the years many people have asked me the same question:</p>

<blockquote><p>I&#8217;m starting this new project, what technology do you think I should use?</p></blockquote>

<p>Often these people fit in one of two categories:</p>

<ul>
<li>Technologists who&#8217;ve already made up their mind</li>
<li>Non-technologist entrepreneurs who need to be reassured</li>
</ul>


<p>At the end of the day, I doubt that many of these people actually cared
about my answers. They probably just wanted to know if we were on the same page or wanted to be reassured.</p>

<p>To be honest, as an engineer, I believe <strong>a great idea can be built with almost any
technology</strong>. They all have their pros/cons. No matter what stack you choose, you&#8217;ll pay a
certain price for whatever advantages it offers. But really, the success or failure of your project has more to do with vision, leadership, execution, and market than technological choices.</p>

<p>Now that I&#8217;m an entrepreneur, I make technical decisions daily. When I choose
a specific technology, I need to be able to justify the decision to myself, my
partners/employees and potential investors. I make technical choices based on the project and company&#8217;s vision.</p>

<p>For a project to be successful you must have a strong vision.
If you can convert your <strong>vision</strong> into a set of <strong>values</strong> to benchmark every decision, your path will be clear and it&#8217;ll be easier to find the right people to join you.</p>

<p>Besides the vision, a lot of startups focus on culture.
It is commonly said that the culture is defined by the founders, the first few employees, and
the product itself.
However, what isn&#8217;t often mentioned is that <strong>the technical
decisions will have a direct effect on the company culture</strong>.</p>

<p>Whether your new startup is based on J2EE/Oracle, Perl, PHP, Rails, Node.js or
.NET, the team&#8217;s engineers will have different expectations, different
values, and different concerns. None of these technologies are intrinsically bad. Great things have been built with each. But they do come with a culture.</p>

<p>A couple years ago, I met an entrepreneur who chose to
build his application in Node.js. Curious, I asked why he chose Node.
The response was simple:
* smart engineers are excited about it so I can more easily recruit
* people are willing to contribute for free because it builds their
  experience</p>

<p>This decision clearly set the engineering culture and defined the team of people
who could work or be interested in working on the project.</p>

<h2>Asking a Different Question</h2>

<p>So maybe instead of asking what technology I should use, we should ask ourselves:</p>

<blockquote><p>Does this technology fit my company&#8217;s core values?</p></blockquote>

<p>That&#8217;s a much harder question because you need to actually <em>understand</em> your
core values. That understanding is key to building a successful product.</p>

<p>You can&#8217;t blindly copy a tech stack in the same way you can&#8217;t copy a business plan. It&#8217;s a part of your company&#8217;s identity. Your core values, your objectives, your team and your
expectations are different.</p>

<p>The whole <em>&#8220;it worked for X&#8221;</em> argument is
rarely valid. Look, Facebook uses PHP, it &#8220;worked for them&#8221;. Does that mean we should all use PHP?</p>

<h2>Technology-Culture Alignment</h2>

<p>Characterizing communities is difficult, but I&#8217;ll share with you the impressions and perspectives that I have on various options. Feel free to use the comments to share your own perspective and cover other communities.</p>

<h3>Old School</h3>

<p>Here are some of the &#8220;classics&#8221;: languages that have been used for a
while and have proven their values. They&#8217;re widespread, but don&#8217;t inspire much passion anymore.</p>

<p><em>Note</em>: I omitted Perl because I personally don&#8217;t know any new startups building their core technology in Perl (6?).</p>

<h2>PHP</h2>

<p><strong>Philosophy:</strong></p>

<ul>
<li>Get stuff done, that&#8217;s what matters</li>
<li>It&#8217;s like Basic for the Web</li>
<li>As long as there is a way to do it, it ain&#8217;t broken</li>
<li>It works and it&#8217;s fast, anything else is pointless</li>
<li>Don&#8217;t be too academic, our language is accessible and anyone can be
started in no time. Try to do the same thing with Java!</li>
<li>Object orientation as an afterthought</li>
</ul>


<p><strong>Common use case: (as of mid-2013)</strong></p>

<ul>
<li>Your first web app</li>
<li>Extending Wordpress/Drupal</li>
</ul>


<p><strong>Personal opinion:</strong></p>

<p>PHP had its days of glory. It really made web development easy and
accessible. However, probably due to the really large amount of new programmers who
started with PHP and a not so opinionated community, very few people can
write good PHP.</p>

<p>Good idiomatic code examples are hard to find and I&#8217;m not even sure there is such as as idiomatic PHP. The result is a community known for poor code quality, lack of
tests, security nightmares and an after taste of the early 2000s.</p>

<p>Strong PHP teams with well established conventions, processes and guidelines can accomplish great things,
but such teams are rare.</p>

<h2>Java</h2>

<p><strong>Philosophy:</strong></p>

<ul>
<li>Portability</li>
<li>The power &amp; performance of C/C++ but with automatic memory management</li>
<li>Cares a lot about object-orientation</li>
<li>IDE required</li>
<li>Memory is cheap so we consume it <em>ALL</em></li>
<li>Threading is the way to go!</li>
<li>Don&#8217;t mention Java applets</li>
<li>Look at my pretty JVM!</li>
<li>Open source (but owned by Oracle)</li>
<li>Slower but safer development cycles</li>
</ul>


<p><strong>Personal Opinion:</strong></p>

<p>Java is quite interesting. A few years ago a lot of developers got tired of Java and
explored other lands. They often switched to interpreted languages
such as PHP, Python, Ruby or more esoteric languages like Erlang.</p>

<p>However, Google via Android was able to show that Java in itself isn&#8217;t as terrible
as we remembered (as long as you don&#8217;t have to use J2EE or Swing).
There is also a &#8220;hipsterish&#8221; trend that seems to indicate that Java is
actually cool again. A lot of that has to do with two things:</p>

<ul>
<li>the JVM</li>
<li>the incredible quantity of high quality libraries</li>
</ul>


<p>That said, for a lot of us, writing Java all day long doesn&#8217;t sound
 appealing. If you are going to rely on the Java stack, there is <a href="http://en.wikipedia.org/wiki/List_of_JVM_languages">long list of other JVM languages</a>
which are mature and play well with Java
libs (i.e: Scala, Groovy, JRuby, Clojure).
You can always to mix and match.</p>

<p>Hiring Java developers isn&#8217;t too hard since most students coming out of school learned Java,
but finding great early-stage startup engineers who want to write Java is quite challenging.</p>

<p><em>Side note: If you are targeting Android, keep it simple, stay with the official
stack even if you might fancy another JVM language better.</em></p>

<p>There are still many reasons to use Java&#8217;s technology for your new
startup, but you might also consider using a more &#8220;rapid/flexible&#8221; solution in parallel (Ruby,
Python, Node&#8230;). A multilingual environment brings a lot of value to
both the company and the engineers, which is something the Java
community seems to be slowly but surely discovering.</p>

<p>Java mainly attracts more classically trained engineers looking for
comfortable, repetitive, well known patterns. They will be used to the language, its
tools and its natural rhythm. They might not be the most curious
developers but they are reliable (if you pick the right ones obviously).</p>

<h2>C#/.NET</h2>

<p><strong>Philosophy:</strong></p>

<ul>
<li>A better Java</li>
<li>Originally designed for desktop and embedded apps</li>
<li>We have a better IDE than the Java guys</li>
<li>We are enterprise serious but we can offer you most of Rails&#8217; cool
features</li>
<li>We have a conflicted vision of Open Source</li>
<li>Slower but safer development cycles</li>
</ul>


<p><strong>Personal Opinion:</strong></p>

<p>I went back and looked at C# when C# 5 was released and I have to say
that I was really impressed by some of the new language features. From a
purely language design perspective, C# is quite a bit ahead of Java. I was
also surprised by how pleasant it was to write Javascript in Visual
Studio (I really didn&#8217;t expect that since my experience with VS was
mainly around C++).</p>

<p>Another thing that really impressed me: the quality level of the
available documentation is outstanding!
But the fact that C# isn&#8217;t open source, that Visual Studio + MSDN is so expensive and
the whole environment reeks of licenses and costs, is bit of a turn off.</p>

<p>Microsoft is slowly opening up to open source and more open solutions like Azure. But as a
community, .NET is still quite Microsoft-centered.
As a startup entrepreneur, you should consider how you feel about open source vs enterprise backed cultures.</p>

<p>C# mainly attracts a variant of the Java crowd: engineers seeking stability and a support contract over open source. And they can tolerate IIS!</p>

<h3>Established Alternatives</h3>

<p>Over the years, two dynamic languages became cherished by startups:
Python and Ruby. The two languages are
actually quite similar. Nowadays Python is quite popular for backend apps
(NLP, biotech, APIs, SOA elements) while Ruby is more popular for
consumer-facing apps.
Both of these languages suffer from the same limitations (mainly
performance and concurrency) but their core
values and communities have different focuses.</p>

<h2>Python</h2>

<p><strong>Philosophy:</strong></p>

<ul>
<li>Only one obvious way to do things</li>
<li>Code has to be beautiful, simple and explicit</li>
<li>Documentation is critical</li>
<li>Strong language design leadership</li>
</ul>


<p><strong>Personal Opinion:</strong></p>

<p>As someone who chose Ruby over Python, I often envy the quality of
the documentation you find in Python projects.
I also have a love/hate relationship with the fact that Python is
designed to give you just one right way. This is
often great for teams, but it can also be frustrating.</p>

<p>In some areas, Python has some of the best libraries out there, and
depending on the problems you are tackling, Python might be the right
choice. Python developers know how to communicate about their code. They document what they do
and are process oriented while being pragmatic about their
approaches.</p>

<p>But Python was created way before the internet became
popular and if concurrency and high throughput is a concern for you, a
dynamic, interpreted language with poor concurrency might not be the right choice.</p>

<p>Python mainly attracts more pragmatic, experienced, full-stack developers
wanting a modern but well-proven language.</p>

<h2>Ruby/Ruby on Rails</h2>

<p><strong>Philosphy:</strong></p>

<ul>
<li>Designed for humans, not machines</li>
<li>Extreme flexibility: if you mess up, it&#8217;s on you</li>
<li>Everything has to be easy, elegant and fun</li>
<li>DSL on top of DSLs on top of DSLs</li>
<li>Testing is critical</li>
<li>Things move quickly, learn to keep up</li>
<li>Passionate and vibrant community</li>
</ul>


<p><strong>Personal opinion:</strong></p>

<p>As far as I&#8217;m concerned, Ruby has been my go-to language for years.
You will find an incredible, sometimes overwhelming amount of Ruby open
source code. Rails is really an amazing web framework making most web
projects easy to implement if you know how to use the tool.</p>

<p>But the flexibility and rapid development cycle also have
downsides. Be ready to invest a large chunk of your time keeping your code
base up to date and migrating away from abandoned libraries.
If you can&#8217;t rely on caching, the throughput of a successful app will often be limited
by the lack of good concurrency support.</p>

<p>Ruby developers are mainly Rails developers and a great majority might
have a hard time being able to identify core language features versus
framework features. They are often curious, opportunistic (in a good way),
somewhat pragmatic and care about code quality/structure and
test coverage. Rails developers are typically early adopters due to
the fact that the framework itself uses some new technologies by
default (coffeescript, turbolinks, CSS pre-processors&#8230;).</p>

<p>Ruby and Rails mainly attract developers wanting to get things done
quickly but elegantly. These developers are often
product-oriented and care more about the purpose and customer value  than the lower-level computational details.</p>

<h2>New Players</h2>

<p>These are the languages/technologies that get people excited. They
represent the new wave of programming languages designed to run
in &#8220;the cloud&#8221;.</p>

<h2>Node.js (Javascript)</h2>

<p>Node.js isn&#8217;t a programming language but it&#8217;s the most popular way to
run JS server side. The same way most of my comments about Ruby were
about Rails, I&#8217;ll focus on Node more than JS itself.</p>

<p><strong>Philosophy:</strong></p>

<ul>
<li>Designed for real-time driven apps with high throughput, low latency</li>
<li>DIY</li>
<li>Small core, the rest is up to the community</li>
<li>Coupling is a sin</li>
<li>Learned lessons from Ruby/Python</li>
</ul>


<p><strong>Personal Opinion:</strong></p>

<p>I find Node.js interesting. Technically there isn&#8217;t much new with Node. Python has
Tornado/Twisted, Ruby has EventMachine, and C had libevent.</p>

<p>Event-driven frameworks have
been used for a while but Node has two major advantages:
* most JS libs are non-blocking
* most web developers have to write some JS anyway</p>

<p>The idea of using the same
programming language both in the front end and the back end appeals to many, but the value is still unproven.</p>

<p>Node offers great throughput (as long as you stick to IO operations),
is easy to get started, and is fun to write.</p>

<p>Due to the nature of event-based programming, debugging and testing is challenging. Dealing with callbacks can be maintenance hell. I hope that Node will adopt an official future/promise solution. And documentation is typically spotty making jumping on an existing project difficult.</p>

<p>Node developers are definitely early adopters and comfortable creating a custom structure/pattern rather than following convention.It attracts developers wanting to use a known language (JS)
to handle high levels of concurrency. Node as a framework is lower level than the classical MVCs which is a plus for hackers. Node developers also really like the idea of using the same programming language on both server and client.</p>

<h2>Clojure</h2>

<p><strong>Philosophy:</strong></p>

<ul>
<li>A pragmatic and modern Lisp</li>
<li>Everything is data</li>
<li>Concurrency, concurrency, concurrency</li>
<li>States are evil</li>
<li>Great Java interoperability</li>
<li>A bit on the academic side, but still being pragmatic</li>
</ul>


<p><strong>Personal Opinion:</strong></p>

<p>What I like the most about Clojure is the lisp
spirit.
Once you get past the parenthesis and the operator/argument order,
Clojure challenges you to entirely rethink the way you architect your code.
It&#8217;s really good and efficient at processing data and pushes you to keep
your code short.</p>

<p>My problem with Clojure is that I&#8217;m not smart enough to write a lot of
it. My brain quickly stack overflows trying to follow the data.
Exceptions are often meaningless and trying to debug someone else&#8217;s code is
challenging since the language itself is complex and it can be extended
by macros. Finally, the Clojure community isn&#8217;t really web-oriented,
most of the work done in Clojure seems to be data-centric.</p>

<p>Clojure mainly attracts more fringe, language-curious, data-oriented programmers. If you are looking for data scientists with a programming language fetish,
Clojure is a good way to attract them.</p>

<h2>Scala</h2>

<p><strong>Philosophy:</strong></p>

<ul>
<li>Have the best of both object oriented and functional programming worlds</li>
<li>Let the compiler do some of the work for you</li>
<li>Concurrency matters</li>
<li>Less ceremony than Java, but aiming for same or better performance</li>
<li>Live in harmony with the Java ecosystem</li>
</ul>


<p><strong>Personal Opinion:</strong></p>

<p>Scala is currently my language of choice when targeting the JVM. The learning curve is steep. Knowing
when to use FP vs OOP can be tricky and so is dealing with the
language syntax itself.</p>

<p>That said, getting the benefits of using FP, while
still keeping OOP when needed, is very useful.
Once you &#8220;get&#8221; the language idioms, writing Scala is actually pleasant
and the community is quite nice.</p>

<p>The <a href="http://www.playframework.com/">Play</a>
framework is really good and offers a good alternative to Rails,
especially for API development. Twitter&#8217;s engineering team offers a lot of resources and open source code.</p>

<p>Using Scala is a pretty safe bet at this point. Java developers feel
confortable and get to try a more &#8220;modern&#8221; language. Dynamic
language developers don&#8217;t feel too far from home but get the Java
ecosystem, the performance boost, concurrency and immutability.
The tooling and convetions make using Scala on a
growing team quite nice, if the compilation time doesn&#8217;t get you down.</p>

<p>Like Ruby, though, the Scala community isn&#8217;t big on documentation.
I really hope <a href="http://www.scala-lang.org/api/current/">the API doc</a> will be rewritten to be more intuitive and overall more useful.
But to be fair there are a lot of great resources out there such as
<a href="http://twitter.github.io/scala_school/">Twitter&#8217;s Scala school</a> and
<a href="https://www.coursera.org/course/progfun">Coursera&#8217;s FP in Scala class</a> given
by Martin Odersky (Scala&#8217;s creator).</p>

<p>Scala mainly attracts curious Java developers wanting
something more modern as well as Ruby/Python developers wanting a more scalable version of their language.
Scala is a good way to attract great developers who want to push
the boundaries of their existing dev environment as well as developers being able to leverage the duality of the language.</p>

<h2>Go</h2>

<ul>
<li>A better C</li>
<li>Memory management is handled for you, but don&#8217;t be wreckless</li>
<li>Explicit is better than implicit</li>
<li>Rich built-in functionality</li>
<li>Fast.. everything (from compilation to execution)</li>
<li>Concurrency built-in and made easy</li>
<li>Documentation is critical</li>
</ul>


<p><strong>Personal Opinion:</strong></p>

<p>I really like Go (aka Golang). After playing with it for years, I chose to use it to
develop the APIs of my own startup. Go might sound boring to some, but
its simplicity and efficiency just work.</p>

<p>Go forces you to think a bit more about how you structure your
data/behavior because you can&#8217;t just stick to the usual OO patterns. I&#8217;ve found that my code ends up being easier
to follow and simpler in structure, yet sometimes a bit more repetitive (ex: error handling).</p>

<p>Concurrency can&#8217;t get much easier than Go. While it is compiled, your code compiles and boots in less time than a Rails server starts up. Go supports some form of duck typing making the transition from Ruby (for instance) quite easy. The production performance is quite amazing when coming from
a scripting language and the memory footprint stays small.</p>

<p>Go is designed so a single user or a big team can work on the same codebase and the tooling around the language is really great.</p>

<p>However, it&#8217;s not a perfect language. 3rd party dependency management can be tricky at
times. The code can feel too low-level when you&#8217;re used to high-level programming languages. And some of the language design decisions can cause confusion at times (ex: interacting with interfaces vs structs).</p>

<p>Go seems to become quite popular within the startup scene when
performance and concurrency matters. I&#8217;ve seen a good number of startups migrating from Node to Go and others simply extending their stack by adding small Go apps.</p>

<p>The Go community seems to be a mix of old school hackers coming from C/C++ and a younger crowd enjoying a lower-level language.
The language and the community leaders are opinionated which makes
understanding their vision and approach easy. It also allows you to
quickly evaluate how comfortable you are with their philosophy and see if it matches your expectations.</p>

<p>Go mainly attracts performance/architecture oriented developers.
They want easy concurrency, the execution speed of C with the development speed of
Python/Ruby. They don&#8217;t look for a new fun language, they look for a
solid compromise.</p>

<h2>Technology Drives Culture</h2>

<p>Technical decisions have cultural impact. Think clearly and carefully about <strong>how your technologies align with your company&#8217;s core values</strong>. Make the right choices and you&#8217;ll spend less time fighting about technical details and more time building a great business.</p>

<p>And if you miss those arguments, there&#8217;s always <a href="http://news.ycombinator.com/">hackernews</a>.</p>

<hr />

<br/>


<p><em>Update</em>: Speaking of HN, <a href="https://news.ycombinator.com/item?id=6285129">here is the thread for this post</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Golang multipart file upload example]]></title>
    <link href="http://matt.aimonetti.net/posts/2013/07/01/golang-multipart-file-upload-example/"/>
    <updated>2013-07-01T22:28:00-07:00</updated>
    <id>http://matt.aimonetti.net/posts/2013/07/01/golang-multipart-file-upload-example</id>
    <content type="html"><![CDATA[<p>The Go language is one of my favorite programming languages. However,
sometimes doing simple things can seem a bit harder than it should.
However, most of the time, the problem is just to find out how to
do things the easy way. While Go&#8217;s documention isn&#8217;t bad, the real key
to finding out how to do things is often to look at the <a href="http://golang.org/src/pkg/mime/multipart/">source code</a> and
the <a href="http://golang.org/src/pkg/mime/multipart/multipart_test.go">test suite</a>.</p>

<p>I&#8217;m not yet super familiar with all the std lib packages, so when I
wanted to test my Go web services, I wrote a few lines of code to create
a multipart file upload function that was building the body from scratch.
Once I was done messing with the various headers, boundary protocol etc..
I started testing some edge cases, I found some bugs in my code.
Looking at Go&#8217;s packages, I realized that all the tools were already
available for me to use. I was just lacking a good example. Walking
through the test suite I finally figured out how to write a simple
multipart file upload example with some extra query params.</p>

<p>Hopefully this example will be helpful to some of you.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">package</span> <span class="n">main</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;bytes&quot;</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;io&quot;</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;mime/multipart&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>  <span class="s">&quot;os&quot;</span>
</span><span class='line'>  <span class="s">&quot;path/filepath&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Creates a new file upload http request with optional extra params</span>
</span><span class='line'><span class="k">func</span> <span class="n">newfileUploadRequest</span><span class="p">(</span><span class="n">uri</span> <span class="nb">string</span><span class="p">,</span> <span class="n">params</span> <span class="k">map</span><span class="p">[</span><span class="nb">string</span><span class="p">]</span><span class="nb">string</span><span class="p">,</span> <span class="n">paramName</span><span class="p">,</span> <span class="n">path</span> <span class="nb">string</span><span class="p">)</span> <span class="p">(*</span><span class="n">http</span><span class="p">.</span><span class="n">Request</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">file</span><span class="p">,</span> <span class="n">err</span> <span class="p">:=</span> <span class="n">os</span><span class="p">.</span><span class="n">Open</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">nil</span><span class="p">,</span> <span class="n">err</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">defer</span> <span class="n">file</span><span class="p">.</span><span class="n">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">body</span> <span class="p">:=</span> <span class="p">&amp;</span><span class="n">bytes</span><span class="p">.</span><span class="n">Buffer</span><span class="p">{}</span>
</span><span class='line'>  <span class="n">writer</span> <span class="p">:=</span> <span class="n">multipart</span><span class="p">.</span><span class="n">NewWriter</span><span class="p">(</span><span class="n">body</span><span class="p">)</span>
</span><span class='line'>  <span class="n">part</span><span class="p">,</span> <span class="n">err</span> <span class="p">:=</span> <span class="n">writer</span><span class="p">.</span><span class="n">CreateFormFile</span><span class="p">(</span><span class="n">paramName</span><span class="p">,</span> <span class="n">filepath</span><span class="p">.</span><span class="n">Base</span><span class="p">(</span><span class="n">path</span><span class="p">))</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">nil</span><span class="p">,</span> <span class="n">err</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">_</span><span class="p">,</span> <span class="n">err</span> <span class="p">=</span> <span class="n">io</span><span class="p">.</span><span class="n">Copy</span><span class="p">(</span><span class="n">part</span><span class="p">,</span> <span class="n">file</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">val</span> <span class="p">:=</span> <span class="k">range</span> <span class="n">params</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">_</span> <span class="p">=</span> <span class="n">writer</span><span class="p">.</span><span class="n">WriteField</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">err</span> <span class="p">=</span> <span class="n">writer</span><span class="p">.</span><span class="n">Close</span><span class="p">()</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">nil</span><span class="p">,</span> <span class="n">err</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">http</span><span class="p">.</span><span class="n">NewRequest</span><span class="p">(</span><span class="s">&quot;POST&quot;</span><span class="p">,</span> <span class="n">uri</span><span class="p">,</span> <span class="n">body</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">path</span><span class="p">,</span> <span class="n">_</span> <span class="p">:=</span> <span class="n">os</span><span class="p">.</span><span class="n">Getwd</span><span class="p">()</span>
</span><span class='line'>  <span class="n">path</span> <span class="p">+=</span> <span class="s">&quot;/test.pdf&quot;</span>
</span><span class='line'>  <span class="n">extraParams</span> <span class="p">:=</span> <span class="k">map</span><span class="p">[</span><span class="nb">string</span><span class="p">]</span><span class="nb">string</span><span class="p">{</span>
</span><span class='line'>      <span class="s">&quot;title&quot;</span><span class="p">:</span>       <span class="s">&quot;My Document&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;author&quot;</span><span class="p">:</span>      <span class="s">&quot;Matt Aimonetti&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;description&quot;</span><span class="p">:</span> <span class="s">&quot;A document with all the Go programming language secrets&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">request</span><span class="p">,</span> <span class="n">err</span> <span class="p">:=</span> <span class="n">newfileUploadRequest</span><span class="p">(</span><span class="s">&quot;https://google.com/upload&quot;</span><span class="p">,</span> <span class="n">extraParams</span><span class="p">,</span> <span class="s">&quot;file&quot;</span><span class="p">,</span> <span class="s">&quot;/tmp/doc.pdf&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">log</span><span class="p">.</span><span class="n">Fatal</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">client</span> <span class="p">:=</span> <span class="p">&amp;</span><span class="n">http</span><span class="p">.</span><span class="n">Client</span><span class="p">{}</span>
</span><span class='line'>  <span class="n">resp</span><span class="p">,</span> <span class="n">err</span> <span class="p">:=</span> <span class="n">client</span><span class="p">.</span><span class="n">Do</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">log</span><span class="p">.</span><span class="n">Fatal</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">body</span> <span class="p">:=</span> <span class="p">&amp;</span><span class="n">bytes</span><span class="p">.</span><span class="n">Buffer</span><span class="p">{}</span>
</span><span class='line'>      <span class="n">_</span><span class="p">,</span> <span class="n">err</span> <span class="p">:=</span> <span class="n">body</span><span class="p">.</span><span class="n">ReadFrom</span><span class="p">(</span><span class="n">resp</span><span class="p">.</span><span class="n">Body</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">log</span><span class="p">.</span><span class="n">Fatal</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="n">resp</span><span class="p">.</span><span class="n">Body</span><span class="p">.</span><span class="n">Close</span><span class="p">()</span>
</span><span class='line'>      <span class="n">fmt</span><span class="p">.</span><span class="n">Println</span><span class="p">(</span><span class="n">resp</span><span class="p">.</span><span class="n">StatusCode</span><span class="p">)</span>
</span><span class='line'>      <span class="n">fmt</span><span class="p">.</span><span class="n">Println</span><span class="p">(</span><span class="n">resp</span><span class="p">.</span><span class="n">Header</span><span class="p">)</span>
</span><span class='line'>      <span class="n">fmt</span><span class="p">.</span><span class="n">Println</span><span class="p">(</span><span class="n">body</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://gist.github.com/mattetti/5914158">Example&#8217;s source code on GitHub</a></p>

<p>All the work is done in the <code>newfileUploadRequest</code> function and
really, the <code>mime/multipart</code> package hides all the complexity of
creating a multipart request.</p>

<p>The key is to set a new <code>multipart.Writer</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="n">writer</span> <span class="p">:=</span> <span class="n">multipart</span><span class="p">.</span><span class="n">NewWriter</span><span class="p">(</span><span class="n">body</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The writer will do all the work and will write directly to our body (which itself is a buffer of bytes).</p>

<p>We then create a part for the file form entry with the name of the file
param and the name of the file (that we extracted using the <code>path/filepath</code>
package).
We need to add the content of the file to the file part, we use the
<code>io.Copy()</code> to do so. In the first version of this article, I had used
<code>io/ioutil</code> <code>Readall</code> to read the content of the file (see code <a href="https://gist.github.com/mattetti/5914158/f4d1393d83ebedc682a3c8e7bdc6b49670083b84">here</a>).
However a few readers rightfully mentioned that I should instead copy
content from the file to the part instead of temporarily loading the content of
the file in memory. <a href="http://play.golang.org/p/eEFBMGMNTW">Here</a> is an
even more optimized version using goroutine to stream the data, and
<a href="https://github.com/gebi/go-fileupload-example/blob/master/main.go">here</a> is the full example using a pipe.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="n">part</span><span class="p">,</span> <span class="n">_</span> <span class="p">:=</span> <span class="n">writer</span><span class="p">.</span><span class="n">CreateFormFile</span><span class="p">(</span><span class="n">paramName</span><span class="p">,</span> <span class="n">filepath</span><span class="p">.</span><span class="n">Base</span><span class="p">(</span><span class="n">path</span><span class="p">))</span>
</span><span class='line'><span class="n">_</span><span class="p">,</span> <span class="n">err</span> <span class="p">=</span> <span class="n">io</span><span class="p">.</span><span class="n">Copy</span><span class="p">(</span><span class="n">part</span><span class="p">,</span> <span class="n">file</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>multipart.Writer</code> takes care of setting the boundary and formating
the form data for us, nice isn&#8217;t it?!</p>

<p>Then for any extra params passed as a map of string keys to string
value, we use another function of the <code>multipart.Writer</code> type:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="n">writer</span><span class="p">.</span><span class="n">WriteField</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once again, the writer takes care of creating the right headers, and to
add the passed value.</p>

<p>At this point, we just need to close our writer and use our body to
create a new request.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="n">writer</span><span class="p">.</span><span class="n">Close</span><span class="p">()</span>
</span><span class='line'><span class="n">req</span><span class="p">,</span> <span class="n">_</span> <span class="p">:=</span> <span class="n">http</span><span class="p">.</span><span class="n">NewRequest</span><span class="p">(</span><span class="s">&quot;POST&quot;</span><span class="p">,</span> <span class="n">uri</span><span class="p">,</span> <span class="n">body</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>One last thing before triggering our request, we need to set the header
that contains the content type including the boundary being used.
Once again, the Go lib has us covered:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="n">req</span><span class="p">.</span><span class="n">Header</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;Content-Type&quot;</span><span class="p">,</span> <span class="n">writer</span><span class="p">.</span><span class="n">FormDataContentType</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<p>As a reference, here is the generated body:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="p">--</span><span class="mi">0</span><span class="n">d940a1e725445cd9192c14c5a3f3d30ea9c90f1f5fb9c08813b3fc2adee</span>
</span><span class='line'><span class="n">Content</span><span class="p">-</span><span class="n">Disposition</span><span class="p">:</span> <span class="n">form</span><span class="p">-</span><span class="n">data</span><span class="p">;</span> <span class="n">name</span><span class="p">=</span><span class="s">&quot;file&quot;</span><span class="p">;</span> <span class="n">filename</span><span class="p">=</span><span class="s">&quot;doc.pdf&quot;</span>
</span><span class='line'><span class="n">Content</span><span class="p">-</span><span class="n">Type</span><span class="p">:</span> <span class="n">application</span><span class="p">/</span><span class="n">octet</span><span class="p">-</span><span class="n">stream</span>
</span><span class='line'>
</span><span class='line'><span class="p">%</span><span class="n">PDF</span><span class="p">-</span><span class="mf">1.4</span>
</span><span class='line'><span class="p">%</span><span class="err">????</span>
</span><span class='line'><span class="mi">4</span> <span class="mi">0</span> <span class="n">obj</span>
</span><span class='line'><span class="p">&lt;&lt;/</span><span class="n">Type</span> <span class="p">/</span><span class="n">Catalog</span>
</span><span class='line'><span class="c1">// removed for example</span>
</span><span class='line'><span class="n">trailer</span>
</span><span class='line'><span class="p">&lt;&lt;/</span><span class="n">Size</span> <span class="mi">18</span>
</span><span class='line'><span class="p">/</span><span class="n">Root</span> <span class="mi">4</span> <span class="mi">0</span> <span class="n">R</span>
</span><span class='line'><span class="p">&gt;&gt;</span>
</span><span class='line'><span class="n">startxref</span>
</span><span class='line'><span class="mi">45054</span>
</span><span class='line'><span class="p">%%</span><span class="n">EOF</span>
</span><span class='line'><span class="p">--</span><span class="mi">0</span><span class="n">d940a1e725445cd9192c14c5a3f3d30ea9c90f1f5fb9c08813b3fc2adee</span>
</span><span class='line'><span class="n">Content</span><span class="p">-</span><span class="n">Disposition</span><span class="p">:</span> <span class="n">form</span><span class="p">-</span><span class="n">data</span><span class="p">;</span> <span class="n">name</span><span class="p">=</span><span class="s">&quot;title&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">My</span> <span class="n">Document</span>
</span><span class='line'><span class="p">--</span><span class="mi">0</span><span class="n">d940a1e725445cd9192c14c5a3f3d30ea9c90f1f5fb9c08813b3fc2adee</span>
</span><span class='line'><span class="n">Content</span><span class="p">-</span><span class="n">Disposition</span><span class="p">:</span> <span class="n">form</span><span class="p">-</span><span class="n">data</span><span class="p">;</span> <span class="n">name</span><span class="p">=</span><span class="s">&quot;author&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">Matt</span> <span class="n">Aimonetti</span>
</span><span class='line'><span class="p">--</span><span class="mi">0</span><span class="n">d940a1e725445cd9192c14c5a3f3d30ea9c90f1f5fb9c08813b3fc2adee</span>
</span><span class='line'><span class="n">Content</span><span class="p">-</span><span class="n">Disposition</span><span class="p">:</span> <span class="n">form</span><span class="p">-</span><span class="n">data</span><span class="p">;</span> <span class="n">name</span><span class="p">=</span><span class="s">&quot;description&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">A</span> <span class="n">document</span> <span class="n">with</span> <span class="n">all</span> <span class="n">the</span> <span class="n">Go</span> <span class="n">programming</span> <span class="n">language</span> <span class="n">secrets</span>
</span><span class='line'><span class="p">--</span><span class="mi">0</span><span class="n">d940a1e725445cd9192c14c5a3f3d30ea9c90f1f5fb9c08813b3fc2adee</span><span class="p">--</span>
</span></code></pre></td></tr></table></div></figure>


<p>Golang might not be as high level as Ruby or Python, but it&#8217;s not too
far off and it certainly comes with some great std libs.
I know I recently caught myself writing a lot of small scripts in Go,
something I used to do in Ruby. I think this is mainly due to the
fact that Go is compiled, designed for concurrency, has great std libs and
is quite easy to write.</p>

<p><em>Hopefully this code sample illustrates how easy Go can be and can also
serve as a reference point if you are looking for a way to do multipart
upload.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Practical guide to StatsD/Graphite monitoring]]></title>
    <link href="http://matt.aimonetti.net/posts/2013/06/26/practical-guide-to-graphite-monitoring/"/>
    <updated>2013-06-26T10:26:00-07:00</updated>
    <id>http://matt.aimonetti.net/posts/2013/06/26/practical-guide-to-graphite-monitoring</id>
    <content type="html"><![CDATA[<p>Engineers love to improve things. Refactoring and optimizations
drive us. There is just a slight problem: we often do that in a vacuum.</p>

<p>Before optimizing, we need to <strong>measure</strong>.</p>

<p>Without a solid baseline, how can you say that the time you invested in making things better wasn&#8217;t a total waste?</p>

<p>True refactoring is done with a solid test suite in place. Developers know that their code behavior didn&#8217;t change while they cleaned things up. Performance optimization is the same thing: we need a good set of metrics before changing anything.</p>

<p>There are plenty of monitoring tools out there, each with its own pros
and cons. The point of this article isn&#8217;t to argue about which one <strong>you</strong> should use,
but instead to give you the some practical knowledge about <a href="http://graphite.readthedocs.org/en/latest/overview.html">Graphite</a>.</p>

<p><img src="http://matt.aimonetti.net/images/graphite_fullscreen_800.png" alt="Screenshot of the Graphite UI" /></p>

<p>Graphite is used to store and render time-series data. In other words,
you collect metrics and Graphite allows you to create pretty graphs easily.</p>

<p>During my time at LivingSocial, I relied on Graphite to
understand trends, issues and optimize performance. As my coworkers
and I were discussing my recently announced departure, I asked them how I
could help them during the transition period. Someone mentioned creating a
Graphite cheatsheet. The cheatsheet turned into something much bigger than I expected
and LivingSocial was nice enough to let me publicly publish this
short guide.</p>

<p><em>For a more in depth dive into the statsd/graphite features, look at
<a href="http://blog.pkhamre.com/2012/07/24/understanding-statsd-and-graphite/">this blog post</a></em></p>

<h2>Organizing metrics</h2>

<p>There are <a href="http://graphite.readthedocs.org/en/latest/tools.html">many ways</a> to feed Graphite,
I personally used <a href="https://github.com/etsy/statsd/">Etsy&#8217;s statsd</a> (node.js daemon) which was being fed
via the <a href="https://github.com/reinh/statsd">statsd RubyGem</a>.
The gem allows developers to push recorded metrics to a statsd server
via UDP. Using UDP instead of TCP makes the metrics collection operation
non blocking which means that while you might theoretically lose a few samples, your
instrumented code performance shouldn&#8217;t be affected. (Read <a href="http://codeascraft.com/2011/02/15/measure-anything-measure-everything/">Etsy&#8217;s
blog post</a> to know more about
why they chose UDP).</p>

<p><strong> Tip </strong>: Doing DNS resolution on each call can be a bit expensive (a
few ms), target your statsd server using its ip or use Ruby&#8217;s <a href="http://www.ruby-doc.org/stdlib-2.0/libdoc/resolv/rdoc/Resolv/DNS.html#method-i-getaddress">resolv</a>
standard library to only do the lookup once at initialization.</p>

<p><strong>Note</strong>: <em>I&#8217;m skipping the config settings about storage retention, resolution etc.. see the
<a href="http://graphite.readthedocs.org/en/latest/overview.html">manual</a> for more info.</em></p>

<h3>Namespacing</h3>

<p>Always namespace your collected data, even if you only have one app for
now. If your app does two things at the same time like serving HTML and
providing an API, you might want to create two clients which you would namespace
differently.</p>

<h3>Naming metrics</h3>

<p>Properly naming your metrics is critical to avoid conflicts,
confusing data and potentially wrong interpretation later on.
I like to organize metrics using the following schema:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> &lt;namespace&gt;.&lt;instrumented section&gt;.&lt;target (noun)&gt;.&lt;action (past tense verb)&gt;</span></code></pre></td></tr></table></div></figure>


<p>Example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>accounts.authentication.password.attempted
</span><span class='line'>accounts.authentication.password.succeeded
</span><span class='line'>accounts.authentication.password.failed</span></code></pre></td></tr></table></div></figure>


<p>I use nouns to define the target and past tense verbs to define
the action. This becomes a useful convention when you need to nest
metrics. In the above example, let&#8217;s say I want to monitor the reasons for
the failed password authentications. Here is how I would organize the
extra stats:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>accounts.authentication.password.failure.no_email_found
</span><span class='line'>accounts.authentication.password.failure.password_check_failed
</span><span class='line'>accounts.authentication.password.failure.password_reset_required</span></code></pre></td></tr></table></div></figure>


<p>As you can see, I used <code>failure</code> instead of <code>failed</code> in the stat name.
The main reason is to avoid conflicting data. <code>failed</code> is an action and
already has a data series allocated, if I were to add nested data using
<code>failed</code>, the data would be collected but the result would be confusing.
The other reason is because when we will graph the data, we will often
want to use a wildcard <code>*</code> to collect all nested data in a series.</p>

<p>Graphite wild card usage example on counters:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>accounts.authentication.password.failure.*</span></code></pre></td></tr></table></div></figure>


<p>This should give us the same value as <code>accounts.authentication.password.failed</code>,
 so really, we should just collect the more detailed version and get rid
of <code>accounts.authentication.password.failed</code>.</p>

<p>Following this naming convention should really help your data stay clean and
easy to manage.</p>

<h2>Counters and metrics</h2>

<p>StatsD lets you record different types of metrics <a href="https://github.com/etsy/statsd/blob/master/docs/metric_types.md">as illustrated here</a>.</p>

<p>This article will focus on the 2 main types:</p>

<ul>
<li>counters</li>
<li>timers</li>
</ul>


<p>Use counters for metrics when you don&#8217;t care about how long the code
your are instrumenting takes to run. Usually counters are used for data
that have more of a direct business value. Examples include sales,
authentication, signups, etc.</p>

<p>Timers are more powerful because they can be used to analyze the time
spent in a piece of code but also be used as a counters. Most of my work
involves timers because I want to detect system anomalies including performance
changes and trends in the way code is being used.</p>

<p>I usually use timers in a nested manner, starting when a request
comes into the system, through each of the various
datastores, and ending with the response.</p>

<h2>Monitoring response time</h2>

<p>It&#8217;s a well known fact that the response time of your application will
both affect the user&#8217;s emotional experience and their likelihood of completing a transactin.
However understanding where time is being spent within a request is
hard, especially when the problems aren&#8217;t obvious. Tools like
<a href="http://newrelic.com/">NewRelic</a> will often get you a good overview of
how your system behave but they also lack the granularity you might
need. For instance NewRelic aggregates and averageses the data client side
before sending it to their servers. While this is fine in a lot of cases,
if you care about more than averages and want more detailed metrics, you probably need
to run your own solution such as statsd + graphite.</p>

<p>I build most of my web-based APIs on <a href="https://github.com/mattetti/wd-sinatra">wd_sinatra</a> which
has a <code>pre_dispatch_hook</code> method which method is executed before a
request is dispatched.</p>

<p>I use this hook to both set the &#8220;Stats context&#8221; in the current thread and extract the client name based on HTTP headers.
If you don&#8217;t use WD, I&#8217;ll show how to do the same thing in a
Rack middleware.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">pre_dispatch_hook</span>
</span><span class='line'>  <span class="n">api_client</span> <span class="o">=</span> <span class="n">extract_api_client_name</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>  <span class="no">Thread</span><span class="o">.</span><span class="n">current</span><span class="o">[</span><span class="ss">:stats_context</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">api_client</span><span class="si">}</span><span class="s2">.http.</span><span class="si">#{</span><span class="n">env</span><span class="o">[</span><span class="s1">&#39;wd.service&#39;</span><span class="o">].</span><span class="n">verb</span><span class="si">}</span><span class="s2">.</span><span class="si">#{</span><span class="n">env</span><span class="o">[</span><span class="s1">&#39;wd.service&#39;</span><span class="o">].</span><span class="n">url</span><span class="si">}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="s1">&#39;.&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># [...]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then using Sinatra&#8217;s global before/after filters, we set a unique
request id and start a timer that we stop and report in the after filter. If we were using Rails we&#8217;d get the unique identifier generated automatically.</p>

<p>Before filter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;securerandom&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">before</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">Thread</span><span class="o">.</span><span class="n">current</span><span class="o">[</span><span class="ss">:request_id</span><span class="o">]</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">env</span><span class="o">[</span><span class="s1">&#39;HTTP_X_REQUEST_ID&#39;</span><span class="o">]</span> <span class="o">||</span> <span class="no">SecureRandom</span><span class="o">.</span><span class="n">hex</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span>
</span><span class='line'>  <span class="n">response</span><span class="o">[</span><span class="s1">&#39;X-Request-Id&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="no">Thread</span><span class="o">.</span><span class="n">current</span><span class="o">[</span><span class="ss">:request_id</span><span class="o">]</span>
</span><span class='line'>  <span class="vi">@instrumentation_start</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>After filter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">after</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">stat</span> <span class="o">=</span> <span class="p">(</span><span class="no">Thread</span><span class="o">.</span><span class="n">current</span><span class="o">[</span><span class="ss">:stats_context</span><span class="o">]</span> <span class="o">||</span> <span class="s2">&quot;http.skipped.</span><span class="si">#{</span><span class="n">env</span><span class="o">[</span><span class="s2">&quot;REQUEST_METHOD&quot;</span><span class="o">]</span><span class="si">}</span><span class="s2">.</span><span class="si">#{</span><span class="n">request</span><span class="o">.</span><span class="n">path_info</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;.response_time&quot;</span>
</span><span class='line'>  <span class="vg">$statsd</span><span class="o">.</span><span class="n">timing</span><span class="p">(</span><span class="n">stat</span><span class="p">,</span> <span class="p">((</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span> <span class="o">-</span> <span class="vi">@instrumentation_start</span><span class="p">)</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">)</span><span class="o">.</span><span class="n">round</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="k">if</span> <span class="vi">@instrumentation_start</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that this could, and probably <strong>should</strong>, be done in a Rack middleware like this (untested, YMMV):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># require whatever is needed and set statsd</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Stats</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Middleware</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@app</span> <span class="o">=</span> <span class="n">app</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>      <span class="n">request</span> <span class="o">=</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Request</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>      <span class="no">Thread</span><span class="o">.</span><span class="n">current</span><span class="o">[</span><span class="ss">:request_id</span><span class="o">]</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">env</span><span class="o">[</span><span class="s1">&#39;HTTP_X_REQUEST_ID&#39;</span><span class="o">]</span> <span class="o">||</span> <span class="no">SecureRandom</span><span class="o">.</span><span class="n">hex</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span>
</span><span class='line'>      <span class="n">response</span><span class="o">[</span><span class="s1">&#39;X-Request-Id&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="no">Thread</span><span class="o">.</span><span class="n">current</span><span class="o">[</span><span class="ss">:request_id</span><span class="o">]</span>
</span><span class='line'>      <span class="n">api_client</span> <span class="o">=</span> <span class="n">extract_api_client_name</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>      <span class="no">Thread</span><span class="o">.</span><span class="n">current</span><span class="o">[</span><span class="ss">:stats_context</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">api_client</span><span class="si">}</span><span class="s2">.http.</span><span class="si">#{</span><span class="n">request</span><span class="o">.</span><span class="n">request_method</span><span class="si">}</span><span class="s2">.</span><span class="si">#{</span><span class="n">request</span><span class="o">.</span><span class="n">path_info</span><span class="si">}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="s1">&#39;.&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@instrumentation_start</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">response</span> <span class="o">=</span> <span class="vi">@app</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">stat</span> <span class="o">=</span> <span class="p">(</span><span class="no">Thread</span><span class="o">.</span><span class="n">current</span><span class="o">[</span><span class="ss">:stats_context</span><span class="o">]</span> <span class="o">||</span> <span class="s2">&quot;http.skipped.</span><span class="si">#{</span><span class="n">env</span><span class="o">[</span><span class="s2">&quot;REQUEST_METHOD&quot;</span><span class="o">]</span><span class="si">}</span><span class="s2">.</span><span class="si">#{</span><span class="n">request</span><span class="o">.</span><span class="n">path_info</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;.response_time&quot;</span>
</span><span class='line'>      <span class="vg">$statsd</span><span class="o">.</span><span class="n">timing</span><span class="p">(</span><span class="n">stat</span><span class="p">,</span> <span class="p">((</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span> <span class="o">-</span> <span class="vi">@instrumentation_start</span><span class="p">)</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">)</span><span class="o">.</span><span class="n">round</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="k">if</span> <span class="vi">@instrumentation_start</span>
</span><span class='line'>      <span class="n">response</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that the stats are organized slightly differently and will read
like that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">namespace</span><span class="o">&gt;.</span><span class="n">&lt;client</span> <span class="nb">name</span><span class="o">&gt;.</span><span class="n">http</span><span class="o">.</span><span class="n">&lt;http</span> <span class="n">verb</span><span class="o">&gt;.</span><span class="n">&lt;path</span><span class="o">&gt;.</span><span class="n">&lt;segments</span><span class="o">&gt;.</span><span class="n">response_time</span>
</span></code></pre></td></tr></table></div></figure>


<p>The dots in the stats name will be used to create subfolders in graphite.
By using such a segmented stats name, we will be able to use <code>*</code>
wildcards to analyze how an old version of an API compares against a
newer one, which clients still talk to the old APIs, compare response
times, etc.</p>

<h2>Monitor time spent within a response</h2>

<p>We&#8217;re collecting stats on every request so
we can see request counts and median average response times.
But wouldn&#8217;t be better if we could measure the time spent in specific
parts of our code base and compare that to the overall time spent in the
request?</p>

<p>We could, for instance, compare the time spent in the DB vs Redis
vs Memcached vs the framework. And what&#8217;s nice is that we could do that
per API endpoint and per API client. In a simpler case, you might decide to monitor mobile vs desktop. The principle is the same.</p>

<p>Let&#8217;s hook into ActiveRecord&#8217;s query generation to track the time spent
in AR within each request:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">MysqlStats</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Instrumentation</span>
</span><span class='line'>    <span class="no">SQL_INSERT_DELETE_PARSER_REGEXP</span> <span class="o">=</span> <span class="sr">/^(\w+)\s(\w+)\s\W*(\w+)/</span>
</span><span class='line'>    <span class="no">SQL_SELECT_REGEXP</span> <span class="o">=</span> <span class="sr">/select .*? FROM \W*(\w+)/i</span>
</span><span class='line'>    <span class="no">SQL_UPDATE_REGEXP</span> <span class="o">=</span> <span class="sr">/update \W*(\w+)/i</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Returns the table and query type</span>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">extract_from_sql_inserts_deletes</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
</span><span class='line'>      <span class="n">query</span> <span class="o">=~</span> <span class="no">SQL_INSERT_DELETE_PARSER_REGEXP</span>
</span><span class='line'>      <span class="o">[</span><span class="vg">$3</span><span class="p">,</span> <span class="vg">$1</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">extract_sql_selects</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
</span><span class='line'>      <span class="n">query</span> <span class="o">=~</span> <span class="no">SQL_SELECT_REGEXP</span>
</span><span class='line'>      <span class="o">[</span><span class="vg">$1</span><span class="p">,</span> <span class="s1">&#39;SELECT&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">guess_sql_content</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">query</span> <span class="o">=~</span> <span class="no">SQL_UPDATE_REGEXP</span>
</span><span class='line'>        <span class="o">[</span><span class="vg">$1</span><span class="p">,</span> <span class="s1">&#39;UPDATE&#39;</span><span class="o">]</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="n">query</span> <span class="o">=~</span> <span class="no">SQL_SELECT_REGEXP</span>
</span><span class='line'>        <span class="n">extract_sql_selects</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Notifications</span><span class="o">.</span><span class="n">subscribe</span> <span class="s2">&quot;sql.active_record&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">finish</span><span class="p">,</span> <span class="nb">id</span><span class="p">,</span> <span class="n">payload</span><span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">payload</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;SQL&quot;</span>
</span><span class='line'>    <span class="n">table</span><span class="p">,</span> <span class="n">action</span> <span class="o">=</span> <span class="no">MysqlStats</span><span class="o">::</span><span class="no">Instrumentation</span><span class="o">.</span><span class="n">extract_from_sql_inserts_deletes</span><span class="p">(</span><span class="n">payload</span><span class="o">[</span><span class="ss">:sql</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="n">payload</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span> <span class="o">=~</span> <span class="sr">/.* Load$/</span>
</span><span class='line'>    <span class="n">table</span><span class="p">,</span> <span class="n">action</span> <span class="o">=</span> <span class="no">MysqlStats</span><span class="o">::</span><span class="no">Instrumentation</span><span class="o">.</span><span class="n">extract_sql_selects</span><span class="p">(</span><span class="n">payload</span><span class="o">[</span><span class="ss">:sql</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="o">!</span><span class="n">payload</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span>
</span><span class='line'>    <span class="n">table</span><span class="p">,</span> <span class="n">action</span> <span class="o">=</span> <span class="no">MysqlStats</span><span class="o">::</span><span class="no">Instrumentation</span><span class="o">.</span><span class="n">guess_sql_content</span><span class="p">(</span><span class="n">payload</span><span class="o">[</span><span class="ss">:sql</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">table</span>
</span><span class='line'>    <span class="vg">$statsd</span><span class="o">.</span><span class="n">timing</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="no">Thread</span><span class="o">.</span><span class="n">current</span><span class="o">[</span><span class="ss">:stats_context</span><span class="o">]</span> <span class="o">||</span> <span class="s1">&#39;wild&#39;</span><span class="si">}</span><span class="s2">.sql.</span><span class="si">#{</span><span class="n">table</span><span class="si">}</span><span class="s2">.</span><span class="si">#{</span><span class="n">action</span><span class="si">}</span><span class="s2">.query_time&quot;</span><span class="p">,</span>
</span><span class='line'>                        <span class="p">(</span><span class="n">finish</span> <span class="o">-</span> <span class="n">start</span><span class="p">)</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code might not be pretty but it works (<em>or should work</em>).
We subscribe to <code>ActiveSupport::Notifications</code> for <code>sql.active_record</code>
and we extract the info we need. Then we use the stats context set in
the thread and report the stats by appending
<code>.sql.#{table}.#{action}.query_time</code></p>

<p>The final stats entry could look like this:
<code>auth_api.ios.http.post.v1.accounts.sql.users.SELECT.query_time</code></p>

<ul>
<li><strong>auth_api</strong>: the name of the monitored app</li>
<li><strong>ios</strong>: the client name</li>
<li><strong>http</strong>: the protocol used (you might want to monitor thrift, spdy etc..</li>
<li><strong>post</strong>: HTTP verb</li>
<li><strong>v1.accounts</strong>: the converted uri: /v1/accounts</li>
<li><strong>sql</strong>: the key for the SQL metrics</li>
<li><strong>users</strong>: the table being queried</li>
<li><strong>SELECT</strong>: the SQL query type</li>
<li><strong>query_time</strong>: the kind of data being collected.</li>
</ul>


<p>As you can see, we are getting granular data. Depending on how you setup
statsd/graphite, you could have access to the following timer data for
each stat (and more):</p>

<ul>
<li>count</li>
<li>lower</li>
<li>mean</li>
<li>mean_5</li>
<li>mean_10</li>
<li>mean_90</li>
<li>mean_95</li>
<li>median</li>
<li>sum</li>
<li>upper</li>
<li>upper_5</li>
<li>upper_10</li>
<li>upper_90</li>
<li>upper_95</li>
</ul>


<p>Instrumenting Redis is easy too:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">::</span><span class="no">Redis</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">class_eval</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Support older versions of Redis::Client that used the method</span>
</span><span class='line'>  <span class="c1"># +raw_call_command+.</span>
</span><span class='line'>  <span class="n">call_method</span> <span class="o">=</span> <span class="o">::</span><span class="no">Redis</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="ss">:call</span><span class="p">)</span> <span class="p">?</span> <span class="ss">:call</span> <span class="p">:</span> <span class="ss">:raw_call_command</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">call_with_stats_trace</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">blk</span><span class="p">)</span>
</span><span class='line'>    <span class="n">method_name</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Array</span><span class="p">)</span> <span class="p">?</span> <span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="p">:</span> <span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>    <span class="n">start</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>      <span class="n">call_without_stats_trace</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">blk</span><span class="p">)</span>
</span><span class='line'>    <span class="k">ensure</span>
</span><span class='line'>      <span class="k">if</span> <span class="no">Thread</span><span class="o">.</span><span class="n">current</span><span class="o">[</span><span class="ss">:stats_context</span><span class="o">]</span>
</span><span class='line'>        <span class="vg">$statsd</span><span class="o">.</span><span class="n">timing</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="no">Thread</span><span class="o">.</span><span class="n">current</span><span class="o">[</span><span class="ss">:stats_context</span><span class="o">]</span><span class="si">}</span><span class="s2">.redis.</span><span class="si">#{</span><span class="n">method_name</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">upcase</span><span class="si">}</span><span class="s2">.query_time&quot;</span><span class="p">,</span>
</span><span class='line'>                         <span class="p">((</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span> <span class="o">-</span> <span class="n">start</span><span class="p">)</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">)</span><span class="o">.</span><span class="n">round</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="k">rescue</span> <span class="kp">nil</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">alias_method</span> <span class="ss">:call_without_stats_trace</span><span class="p">,</span> <span class="n">call_method</span>
</span><span class='line'>  <span class="n">alias_method</span> <span class="n">call_method</span><span class="p">,</span> <span class="ss">:call_with_stats_trace</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span> <span class="k">if</span> <span class="n">defined?</span><span class="p">(</span><span class="o">::</span><span class="no">Redis</span><span class="o">::</span><span class="no">Client</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using Ruby&#8217;s alias method chain, we inject
our instrumentation into the Redis client so we can track the time spent
there.</p>

<p>Applying the same approach, we can instrument the Ruby <strong>memcached</strong> gem:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">::</span><span class="no">Memcached</span><span class="o">.</span><span class="n">class_eval</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">get_with_stats_trace</span><span class="p">(</span><span class="n">keys</span><span class="p">,</span> <span class="n">marshal</span><span class="o">=</span><span class="kp">true</span><span class="p">)</span>
</span><span class='line'>    <span class="n">start</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>      <span class="n">get_without_stats_trace</span><span class="p">(</span><span class="n">keys</span><span class="p">,</span> <span class="n">marshal</span><span class="p">)</span>
</span><span class='line'>    <span class="k">ensure</span>
</span><span class='line'>      <span class="k">if</span> <span class="no">Thread</span><span class="o">.</span><span class="n">current</span><span class="o">[</span><span class="ss">:stats_context</span><span class="o">]</span>
</span><span class='line'>        <span class="n">type</span> <span class="o">=</span> <span class="n">keys</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Array</span><span class="p">)</span> <span class="p">?</span> <span class="s2">&quot;multi_get&quot;</span> <span class="p">:</span> <span class="s2">&quot;get&quot;</span>
</span><span class='line'>        <span class="vg">$statsd</span><span class="o">.</span><span class="n">timing</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="no">Thread</span><span class="o">.</span><span class="n">current</span><span class="o">[</span><span class="ss">:stats_context</span><span class="o">]</span><span class="si">}</span><span class="s2">.memcached.</span><span class="si">#{</span><span class="n">type</span><span class="si">}</span><span class="s2">.query_time&quot;</span><span class="p">,</span>
</span><span class='line'>                         <span class="p">((</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span> <span class="o">-</span> <span class="n">start</span><span class="p">)</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">)</span><span class="o">.</span><span class="n">round</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="k">rescue</span> <span class="kp">nil</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">alias_method</span> <span class="ss">:get_without_stats_trace</span><span class="p">,</span> <span class="ss">:get</span>
</span><span class='line'>  <span class="n">alias_method</span> <span class="ss">:get</span><span class="p">,</span> <span class="ss">:get_with_stats_trace</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span> <span class="k">if</span> <span class="n">defined?</span><span class="p">(</span><span class="o">::</span><span class="no">Memcached</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Dashboards</h2>

<p>We now have collected and organized our stats. Let&#8217;s talk about how to
use Graphite to display all this data in a valuable way.</p>

<p>When looking at timer data series, the first thing we want to do is create an overall represention. Your first inclination is probably an <em>average</em>.</p>

<p>The problem with the mean is that it&#8217;s the sum of all data
points divided by the number of data points. It can thus be significantly affected by a small number of outliers.</p>

<p>The median value is the number found in the center of the sorted list of
collected data points. The problem in this case is that based on your
data set, the median value might not well represent the real overall
experience.</p>

<p>Neither <strong>median</strong> nor <strong>mean</strong> can summarize the whole story of your system&#8217;s behavior.
Instead I prefer to use a <strong>5-95 span</strong> (thanks <a href="http://steveakers.com/">Steve
Akers</a> for showing me this metric and most of what I
know about Graphite).
A 5-95 span means that we cut off the extreme outliers above 95% and below 5%.</p>

<h3>Span</h3>

<p>Here is a comparison showing how the graphs can be different for the same
data based on what metric you use:</p>

<p><img src="http://matt.aimonetti.net/images/graphite/graphite-median_vs_mean_vs_span.png" alt="Graphite comparing median vs mean vs span" /></p>

<p>Of course the span graph looks much worse than the other two, but it&#8217;s
also more representative of the real user experience and thus more
valuable. Here is how you would write the graphite function to get this data.</p>

<p>Given that we are tracking the following data-series:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">stats</span><span class="o">.</span><span class="n">timers</span><span class="o">.</span><span class="n">accounts</span><span class="o">.</span><span class="n">ios</span><span class="o">.</span><span class="n">http</span><span class="o">.</span><span class="n">post</span><span class="o">.</span><span class="n">authenticate</span><span class="o">.</span><span class="n">response_time</span>
</span></code></pre></td></tr></table></div></figure>


<p>The function would be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">diffSeries</span><span class="p">(</span><span class="n">stats</span><span class="o">.</span><span class="n">timers</span><span class="o">.</span><span class="n">accounts</span><span class="o">.</span><span class="n">ios</span><span class="o">.</span><span class="n">http</span><span class="o">.</span><span class="n">post</span><span class="o">.</span><span class="n">authenticate</span><span class="o">.</span><span class="n">response_time</span><span class="o">.</span><span class="n">upper_95</span><span class="p">,</span>
</span><span class='line'>           <span class="n">stats</span><span class="o">.</span><span class="n">timers</span><span class="o">.</span><span class="n">accounts</span><span class="o">.</span><span class="n">ios</span><span class="o">.</span><span class="n">http</span><span class="o">.</span><span class="n">post</span><span class="o">.</span><span class="n">authenticate</span><span class="o">.</span><span class="n">response_time</span><span class="o">.</span><span class="n">upper_5</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Alias</h3>

<p>If you try that function, the graph legend will show the entire
function, which really doesn&#8217;t look great. To simplify things, you can use an
alias like I did in the graph above:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">alias</span><span class="p">(</span><span class="n">diffSeries</span><span class="p">(</span><span class="n">stats</span><span class="o">.</span><span class="n">timers</span><span class="o">.</span><span class="n">accounts</span><span class="o">.</span><span class="n">ios</span><span class="o">.</span><span class="n">http</span><span class="o">.</span><span class="n">post</span><span class="o">.</span><span class="n">authenticate</span><span class="o">.</span><span class="n">response_time</span><span class="o">.</span><span class="n">upper_95</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">stats</span><span class="o">.</span><span class="n">timers</span><span class="o">.</span><span class="n">accounts</span><span class="o">.</span><span class="n">ios</span><span class="o">.</span><span class="n">http</span><span class="o">.</span><span class="n">post</span><span class="o">.</span><span class="n">authenticate</span><span class="o">.</span><span class="n">response_time</span><span class="o">.</span><span class="n">upper_5</span><span class="p">),</span>
</span><span class='line'>      <span class="s2">&quot;iOS authentication response time (span)&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Aliases are very useful, especially when you share your dashboards with
others.</p>

<h3>Threshold</h3>

<p>Another neat feature you might add to your graph is a <strong>threshold</strong>.
A threshold is a visual representation of expectations. Say, for example, that your web service shouldn&#8217;t be slower than 60ms server side. Let&#8217;s add a threshold for that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">alias</span><span class="p">(</span><span class="n">threshold</span><span class="p">(</span><span class="mi">60</span><span class="p">),</span> <span class="s2">&quot;60ms threshold&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>and here&#8217;s how it would look in a graph:</p>

<p><img src="http://matt.aimonetti.net/images/graphite/graphite-median_vs_mean_vs_span-with-threshold.png" alt="Graphite with a threshold" /></p>

<h3>Draw Null as Zero</h3>

<p>Another useful trick is to change the render options of a
graph to draw null values as zero.
Open the graph panel, click on <code>Render Options</code>, then <code>Line Mode</code> and check
the <code>Draw Null as Zero</code> box.</p>

<p>Here is a graph tracking a webservice that isn&#8217;t getting a lot of
traffic:</p>

<p><img src="http://matt.aimonetti.net/images/graphite/nulls_not_drawn_as_zero.png" alt="graphite example" /></p>

<p>You can see that the line is discontinued, that&#8217;s because the API
doesn&#8217;t constantly receive traffic. If your data series gets only very
few entries, you might not even see a line. This is why you want to
enable the <code>Draw Null as Zero</code>.</p>

<h3>SumSeries &amp; Summarize or how to get RPMs</h3>

<p>By default graphite shows data at a 10 second interval. But often
you want to see less granular data, like the quantity of requests
per second.</p>

<p>Let&#8217;s say we didn&#8217;t use a counter for the amount of requests, but
because we used the middleware I described earlier, we are timing all
responses. Graphite keeps a count of the timers we used, so we can use
this count value with a wildcard:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">stats</span><span class="o">.</span><span class="n">timers</span><span class="o">.</span><span class="n">accounts</span><span class="o">.</span><span class="n">*</span><span class="o">.</span><span class="n">http</span><span class="o">.</span><span class="n">post</span><span class="o">.</span><span class="n">authenticate</span><span class="o">.</span><span class="n">response_time</span><span class="o">.</span><span class="n">count</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we were to render a graph for this stat we would see a graph per
client. Right now we only care about showing the total amount of requests.
To do that, we&#8217;ll use the <code>sumSeries</code> function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sumSeries</span><span class="p">(</span><span class="n">stats</span><span class="o">.</span><span class="n">timers</span><span class="o">.</span><span class="n">accounts</span><span class="o">.</span><span class="n">*</span><span class="o">.</span><span class="n">http</span><span class="o">.</span><span class="n">post</span><span class="o">.</span><span class="n">authenticate</span><span class="o">.</span><span class="n">response_time</span><span class="o">.</span><span class="n">count</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://matt.aimonetti.net/images/graphite/graphite-not-summarized.png" alt="RPMs not summarized" /></p>

<p>The graph looks pretty but it&#8217;s hard to understand what kind of request
volume we are getting. We can summarize this data to show 1 min
summaries instead:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">summarize</span><span class="p">(</span><span class="n">sumSeries</span><span class="p">(</span><span class="n">stats</span><span class="o">.</span><span class="n">timers</span><span class="o">.</span><span class="n">accounts</span><span class="o">.</span><span class="n">*</span><span class="o">.</span><span class="n">http</span><span class="o">.</span><span class="n">post</span><span class="o">.</span><span class="n">authenticate</span><span class="o">.</span><span class="n">response_time</span><span class="o">.</span><span class="n">count</span><span class="p">),</span> <span class="s2">&quot;1min&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://matt.aimonetti.net/images/graphite/graphite-summarize.png" alt="RPMs summarize" /></p>

<p>We can now see the quantity of requests per minute. You could do the same to resolve by hour, day, etc.</p>

<h3>Timeshift</h3>

<p>Graphite has the ability to compare a given metric across two different time spans. For instance, let&#8217;s compare
today&#8217;s quantity of logins vs those from last weeks.</p>

<p>To generate today&#8217;s graph:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">alias</span><span class="p">(</span><span class="n">summarize</span><span class="p">(</span><span class="n">sumSeries</span><span class="p">(</span><span class="n">stats</span><span class="o">.</span><span class="n">timers</span><span class="o">.</span><span class="n">accounts</span><span class="o">.</span><span class="n">*</span><span class="o">.</span><span class="n">http</span><span class="o">.</span><span class="n">post</span><span class="o">.</span><span class="n">authenticate</span><span class="o">.</span><span class="n">response_time</span><span class="o">.</span><span class="n">count</span><span class="p">),</span><span class="s2">&quot;1min&quot;</span><span class="p">),</span> <span class="s2">&quot;today&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we use the <code>timeShift</code> function to get last week&#8217;s data:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">alias</span><span class="p">(</span><span class="n">timeShift</span><span class="p">(</span><span class="n">summarize</span><span class="p">(</span><span class="n">sumSeries</span><span class="p">(</span><span class="n">stats</span><span class="o">.</span><span class="n">timers</span><span class="o">.</span><span class="n">accounts</span><span class="o">.</span><span class="n">*</span><span class="o">.</span><span class="n">http</span><span class="o">.</span><span class="n">post</span><span class="o">.</span><span class="n">authenticate</span><span class="o">.</span><span class="n">response_time</span><span class="o">.</span><span class="n">count</span><span class="p">),</span> <span class="s2">&quot;1min&quot;</span><span class="p">),</span><span class="s2">&quot;1w&quot;</span><span class="p">),</span> <span class="s2">&quot;last week&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Graphing both series in the same graph will give us that:</p>

<p><img src="http://matt.aimonetti.net/images/graphite/graphite-timeshift.png" alt="graphite timeshift example" /></p>

<p>Wow, it looks like last week we had an authentication peek for a few
hours. Why? It would be interesting to graph our promos and sales in the same
graph to see if we can find any correlations.</p>

<p>Depending on your domain, you might want to compare against different
time slices. Just change the second <code>timeShift</code> argument.</p>

<h3>As percent</h3>

<p>Another technique is to compare the percentage growth since last week.
Let&#8217;s imagine we are looking at sales or signup numbers.
We could graph today&#8217;s sales per minute vs those from last week.</p>

<p>To do that, Graphite has the <code>asPercent</code> function. This function
takes a series representing <em>100%</em> and second to compare against.
The function call looks a bit scary so let me try to break it down over
multiple lines:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">asPercent</span><span class="p">(</span>
</span><span class='line'>  <span class="n">summarize</span><span class="p">(</span><span class="n">sumSeries</span><span class="p">(</span><span class="n">stats</span><span class="o">.</span><span class="n">timers</span><span class="o">.</span><span class="n">accounts</span><span class="o">.</span><span class="n">*</span><span class="o">.</span><span class="n">http</span><span class="o">.</span><span class="n">post</span><span class="o">.</span><span class="n">accounts</span><span class="o">.</span><span class="n">response_time</span><span class="o">.</span><span class="n">count</span><span class="p">),</span><span class="s2">&quot;1min&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,</span><span class="n">timeShift</span><span class="p">(</span><span class="n">summarize</span><span class="p">(</span><span class="n">sumSeries</span><span class="p">(</span><span class="n">stats</span><span class="o">.</span><span class="n">timers</span><span class="o">.</span><span class="n">accounts</span><span class="o">.</span><span class="n">*</span><span class="o">.</span><span class="n">http</span><span class="o">.</span><span class="n">post</span><span class="o">.</span><span class="n">accounts</span><span class="o">.</span><span class="n">response_time</span><span class="o">.</span><span class="n">count</span><span class="p">),</span> <span class="s2">&quot;1min&quot;</span><span class="p">),</span><span class="s2">&quot;1w&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first argument is the summarized RPMs (requests per minute) and the
second is last week&#8217;s summarized RPMs.</p>

<p>Here is how the graph looks:</p>

<p><img src="http://matt.aimonetti.net/images/graphite/graphite-compare-as-percent.png" alt="graphite as percent" /></p>

<p>Based on all the data we collect, we can now graph something like that:</p>

<p><img src="http://matt.aimonetti.net/images/graphite/graphite-as-percent.png" alt="graphite as percent with multiple series" /></p>

<p>This graph is basically the same as the one above, but we used the
overall response time as the 100% value and we graphed all the different
monitored sections of our code base.</p>

<p>You can now build some really advanced tools that look at trends,
check pre- and post-deployment measurements, trigger alerts, and help you refactor your
code.</p>

<p>Maybe you suspect that your app has a chokepoint at the database level.
You can track the query types and the targeted tables per API
endpoint. You can see where you spend most of the time and which code path
is responsible for it. You can quickly see if adding indicies or other database-level techniques actually make a difference.</p>

<h2>Other tips</h2>

<h3>Share a url into campfire/irc and see a preview</h3>

<p>Campfire and many other chat tools offer image preview as long as they
detect that the url has an image extension. Unfortunately, Graphite&#8217;s
graph urls look more like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">http</span><span class="ss">:/</span><span class="o">/</span><span class="n">graphite</span><span class="o">.</span><span class="n">awesome</span><span class="o">.</span><span class="n">graphs</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">render?width</span><span class="o">=</span><span class="mi">400</span><span class="o">&amp;</span><span class="n">from</span><span class="o">=-</span><span class="mi">4</span><span class="n">hours</span><span class="o">&amp;</span><span class="k">until</span><span class="o">=-&amp;</span><span class="n">height</span><span class="o">=</span><span class="mi">400</span><span class="o">&amp;</span><span class="n">target</span><span class="o">=</span><span class="n">summarize</span><span class="p">(</span><span class="n">sumSeries</span><span class="p">(</span><span class="n">stats</span><span class="o">.</span><span class="n">timers</span><span class="o">.</span><span class="n">accounts</span><span class="o">.</span><span class="n">*</span><span class="o">.</span><span class="n">http</span><span class="o">.</span><span class="n">post</span><span class="o">.</span><span class="n">accounts</span><span class="o">.</span><span class="n">response_time</span><span class="o">.</span><span class="n">count</span><span class="p">))</span><span class="o">&amp;</span><span class="n">drawNullAsZero</span><span class="o">=</span><span class="kp">true</span><span class="o">&amp;</span><span class="n">title</span><span class="o">=</span><span class="no">Example</span><span class="o">&amp;</span><span class="n">_uniq</span><span class="o">=</span><span class="mi">0</span><span class="o">.</span><span class="mi">11944825737737119</span>
</span></code></pre></td></tr></table></div></figure>


<p>To get a preview, just append the with: <code>&amp;.jpg</code></p>

<h3>Get the graph data in JSON format</h3>

<p>You might want to do something fancy with the data like
create alerts. For that you can ask Graphite for a json representation
of the data by adding <code>&amp;format=json</code> to the URL.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'> <span class="p">{</span><span class="nt">&quot;target&quot;</span><span class="p">:</span>
</span><span class='line'>  <span class="s2">&quot;summarize(sumSeries(stats.timers.accounts.*.http.post.accounts.response_time.count))&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;datapoints&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">[</span><span class="mi">20260</span><span class="err">.</span><span class="mi">0</span><span class="p">,</span> <span class="mi">137256960</span><span class="p">],[</span><span class="mi">19513</span><span class="p">,</span> <span class="mi">1372357020</span><span class="p">]</span> <span class="err">//</span><span class="p">[</span><span class="err">...</span><span class="p">]</span>
</span><span class='line'>   <span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The data points are the timestamped value of each graphed point.
Note that you can also ask for the CSV version of the data then pass it on to some poor bastard using Excel.</p>

<h3>Only show top graphs</h3>

<p>Let say that you are graphing the response time of all your APIs. The
amount of displayed graphs can be overwhelming.</p>

<p>To limit the displayed graphs, use one of the filters. For instance the <code>currentAbove</code> or
<code>averageAbove</code> filters that can help you only display web services with
more than X RPMs for instance. Using filters can be very useful to find
outliers.</p>

<h2>Get going with Graphite!</h2>

<p>Hopefully this guide will help and inspire you to start using Graphite to easily collect and analyze your metrics.
I&#8217;m sure there are great tricks I forgot to mention, please add your favorites in the comments.</p>

<p><em>Thanks to <a href="https://twitter.com/j3">Jeff Casimir</a> for reviewing this post
before its publication!</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Go vs Ruby for web APIs]]></title>
    <link href="http://matt.aimonetti.net/posts/2013/06/23/using-go-vs-ruby-for-web-apis/"/>
    <updated>2013-06-23T09:50:00-07:00</updated>
    <id>http://matt.aimonetti.net/posts/2013/06/23/using-go-vs-ruby-for-web-apis</id>
    <content type="html"><![CDATA[<p>A few days ago, I was wondering if using <a href="http://golang.org/">Go</a> would be worth it when developing new web APIs.
I obviously knew that Go would be faster than Ruby, but I wasn&#8217;t sure
how much faster. I also wondering about the amount of work required to
write get a full API implemented.</p>

<p>I therefore wrote the same web API in Ruby (using Rails) and in Go (at
first using Revel and then rewriting it without a framework since Go&#8217;s
std lib have everything one might need).
The API spec was simple:
* extract an authorization token contained in the request header
* use the token to query a MySQL database
* respond by sending back the MySQL row in json format
* return 401 if the token isn&#8217;t value</p>

<p>I didn&#8217;t try to optimize the Ruby code, nor the Go code. The idea wasn&#8217;t
to get precise benchmark results, the goal was to get an idea of how
much faster Go was in a real life situation. The other goal was to
evaluate the amount of work needed to write web APIs in Go for someone
who already knows the language.</p>

<p>At the end of the day the API implemented in Go is more than 50x faster than
the Ruby version. Interesting enough, writing the code and tests for the
Go API was pretty close to the Ruby experience (more on that later).
50X performance gain, including high concurrency support might be a very
good argument to start using some Go when it makes sense.</p>

<p>I documented my experiment on <a href="https://plus.google.com/101114877505962271216/posts/PeZk8FY3PWY">Google+</a>, click the following screenshot to read more.</p>

<p><a href="https://plus.google.com/101114877505962271216/posts/PeZk8FY3PWY"><img src="http://matt.aimonetti.net/images/matt_aimonetti-golang_vs_ruby_api_exp.png" alt="Matt Aimonetti's Go vs Ruby post on Google+" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Inspecting Rails 4 using Ruby 2.0]]></title>
    <link href="http://matt.aimonetti.net/posts/2013/03/05/inspecting-rails-4-request-dispatch-using-ruby-2-dot-0/"/>
    <updated>2013-03-05T22:18:00-08:00</updated>
    <id>http://matt.aimonetti.net/posts/2013/03/05/inspecting-rails-4-request-dispatch-using-ruby-2-dot-0</id>
    <content type="html"><![CDATA[<p>Ruby 2.0 has a cool new feature that many people talk about:
<a href="http://ruby-doc.org/core-2.0/TracePoint.html">TracePoint</a>.</p>

<p><code>TracePoint</code> essentially allows you to hook into Ruby&#8217;s events and
listen for events.</p>

<p>Being curious and since I just started a brand new Rails 4/Ruby 2 app, I
decided to write a little middleware and see what Rails is up to when
handling incoming requests.</p>

<p>Here is my <a href="https://gist.github.com/mattetti/5097206">TracePoint Rack Middleware</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">TracePoint</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Middleware</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@app</span> <span class="o">=</span> <span class="n">app</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>      <span class="n">stats</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>      <span class="n">trace</span> <span class="o">=</span> <span class="no">TracePoint</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:call</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">tp</span><span class="o">|</span>
</span><span class='line'>        <span class="n">stats</span><span class="o">[</span><span class="n">tp</span><span class="o">.</span><span class="n">defined_class</span><span class="o">]</span> <span class="o">||=</span> <span class="p">{}</span>
</span><span class='line'>        <span class="n">stats</span><span class="o">[</span><span class="n">tp</span><span class="o">.</span><span class="n">defined_class</span><span class="o">][</span><span class="n">tp</span><span class="o">.</span><span class="n">method_id</span><span class="o">]</span> <span class="o">||=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="n">stats</span><span class="o">[</span><span class="n">tp</span><span class="o">.</span><span class="n">defined_class</span><span class="o">][</span><span class="n">tp</span><span class="o">.</span><span class="n">method_id</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">trace</span><span class="o">.</span><span class="n">enable</span>
</span><span class='line'>      <span class="n">response</span> <span class="o">=</span> <span class="vi">@app</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>      <span class="n">trace</span><span class="o">.</span><span class="n">disable</span>
</span><span class='line'>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">stats</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">size</span><span class="si">}</span><span class="s2"> classes used&quot;</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">stats</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="o">|</span> <span class="n">v</span><span class="o">.</span><span class="n">keys</span><span class="si">}</span><span class="s2">.flatten.size} methods used&quot;</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">stats</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="o">|</span> <span class="n">v</span><span class="o">.</span><span class="n">values</span><span class="si">}</span><span class="s2">.flatten.sum} methods dispatched&quot;</span>
</span><span class='line'>      <span class="n">response</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>(the gist shows a modified version so I could dump to disk the json
representation of the calls)</p>

<p>I then inserted the middleware in Rails:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># in application.rb</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">middleware</span><span class="o">.</span><span class="n">insert_before</span><span class="p">(</span><span class="no">ActionDispatch</span><span class="o">::</span><span class="no">Static</span><span class="p">,</span> <span class="no">TracePoint</span><span class="o">::</span><span class="no">Middleware</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I saved the output in json format for the curious: <a href="https://gist.github.com/mattetti/5097178">click here</a></p>

<p>On average, in production mode, using Ruby 2.0 and Puma on my laptop, my hello world index page takes 5ms.</p>

<p>To render my page, Rails uses (more or less):</p>

<ul>
<li>250 classes</li>
<li>750 methods (not including C functions)</li>
<li>and dispatches 2704 methods (not including calls to C functions)</li>
</ul>


<p>Here is a small selection of some of the methods dispatched:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;String&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;underscore&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;blank?&quot;</span><span class="p">:</span> <span class="mi">14</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;html_safe&quot;</span><span class="p">:</span> <span class="mi">78</span>
</span><span class='line'>  <span class="p">}</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ActiveSupport::Inflector&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;underscore&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;inflections&quot;</span><span class="p">:</span> <span class="mi">2</span>
</span><span class='line'><span class="p">}</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;Hash&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;with_indifferent_access&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;except&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;except!&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;stringify_keys&quot;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;transform_keys&quot;</span><span class="p">:</span> <span class="mi">13</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;stringify_keys!&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;transform_keys!&quot;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;extractable_options?&quot;</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;extract!&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;symbolize_keys&quot;</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;reverse_merge&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;slice&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;symbolize_keys!&quot;</span><span class="p">:</span> <span class="mi">2</span>
</span><span class='line'><span class="p">}</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ActionView::CompiledTemplates&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;_app_views_welcome_index_html_erb__4177595130715791755_70209827438920&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;_app_views_layouts_application_html_erb___652124533295419796_70209827456500&quot;</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'><span class="p">}</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ActiveSupport::Notifications::Fanout&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;start&quot;</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;listeners_for&quot;</span><span class="p">:</span> <span class="mi">12</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;listening?&quot;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;finish&quot;</span><span class="p">:</span> <span class="mi">3</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>TracePoint</code> is a great new addition and I hope to see some new crazy
tools being developed (production dead-code analyzer, deprecation code path
finder anyone?)</p>

<p>To end, this short post, here is an interesting quote from <a href="http://chadfowler.com/">Chad
Fowler</a> Berliner by adoption:</p>

<blockquote><p>Abstractions are expensive. The cost increases exponentially as you add them to a codebase.
<a href="https://twitter.com/chadfowler/status/308959527217270786">Chad Fowler</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OmniAuth and Google Apps]]></title>
    <link href="http://matt.aimonetti.net/posts/2013/01/30/omniauth-and-google-apps/"/>
    <updated>2013-01-30T19:11:00-08:00</updated>
    <id>http://matt.aimonetti.net/posts/2013/01/30/omniauth-and-google-apps</id>
    <content type="html"><![CDATA[<p>Today I struggled to get <a href="https://github.com/intridea/omniauth">OmniAuth</a> and <a href="https://developers.google.com/accounts/docs/OpenID">Google apps</a> to work properly together.
I just wanted to add authentication to my application and restrict access to only my Google Apps domain users.
I was hoping it would be straight forward since I could use Google&#8217;s OpenID service.</p>

<p>Turns out it wasn&#8217;t that hard, but the lack of documentation made me
lost a couple hours.
I therefore updated <a href="https://github.com/intridea/omniauth/wiki">OmniAuth&#8217;s wiki</a> and wrote this quick post so hopefully you won&#8217;t waste time looking for simple details.</p>

<h2>Requirements</h2>

<p>You actually only need to add 2 gems to your Gemfile:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;omniauth-openid&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;ruby-openid-apps-discovery&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, the second gem is the one I didn&#8217;t know about.
The gem is actually provided by <a href="https://github.com/google/ruby-openid-apps-discovery">Google itself</a>. It turns out, Google Apps use a custom discovery protocol.
They monkey patched the popular OpenID Ruby libraries so you can just drop in
their gem and their discovery system will magically work.</p>

<h2>Setup</h2>

<p>You need to require 4 files to get everything setup properly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;omniauth-openid&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;openid&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;openid/store/filesystem&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;gapps_openid&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first one is the omniauth extension for OpenID, the second one is
the main Ruby OpenID library (needed so we can set our SSL cert).
The third one allows us to store temporary data on disk instead of
keeping it in memory (optional).
And finally, the last one is Google&#8217;s magical gem to get their discovery
system working.</p>

<p>Because we are going to communicate via SSL, we want to make sure that
the OpenID library uses our certs to verify the SSL communications:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">OpenID</span><span class="o">.</span><span class="n">fetcher</span><span class="o">.</span><span class="n">ca_file</span> <span class="o">=</span> <span class="s2">&quot;/absolute/path/to/ssl_cacert.pem&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>(Obviously, you need to change the path to your own cert)</p>

<p>We are almost done with the setup, we just need two more things:</p>

<ul>
<li>make sure you are using a session.</li>
<li>setup OmniAuth</li>
</ul>


<p>I&#8217;m using Sinatra, so I&#8217;ll load the <code>Rack::Session</code> middleware before I
set Omniauth:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">use</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Session</span><span class="o">::</span><span class="no">Cookie</span><span class="p">,</span> <span class="ss">:secret</span> <span class="o">=&gt;</span> <span class="s1">&#39;supers3cr3t&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>(Rails turns that option by default, so you don&#8217;t need to worry about
it)</p>

<p>Then I can finally setup OmniAuth:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">use</span> <span class="no">OmniAuth</span><span class="o">::</span><span class="no">Builder</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">provider</span> <span class="ss">:open_id</span><span class="p">,</span>  <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s1">&#39;admin&#39;</span><span class="p">,</span>
</span><span class='line'>                      <span class="ss">:identifier</span> <span class="o">=&gt;</span> <span class="s1">&#39;https://www.google.com/accounts/o8/site-xrds?hd=aimonetti.net&#39;</span><span class="p">,</span>
</span><span class='line'>                      <span class="ss">:store</span> <span class="o">=&gt;</span> <span class="no">OpenID</span><span class="o">::</span><span class="no">Store</span><span class="o">::</span><span class="no">Filesystem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;/tmp&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are two important things to notice. First, because I set the
provider&#8217;s name to be &#8216;admin&#8217;, the magical paths provided by OmiAuth
will use that name (<code>/auth/admin</code>). Secondly, and more importantly, notice how I added
the name of my Google Apps domain at the end of the identifier:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s1">&#39;https://www.google.com/accounts/o8/site-xrds?hd=&#39;</span> <span class="o">+</span> <span class="n">your_domain_name</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Sinatra</h2>

<p>In Sinatra, your just need to define the routes OmniAuth would use (same
goes for Rails, just use the router for that).</p>

<p>By default, omniauth now offers you a <code>/auth/admin</code> endpoint that will
push the user through Google Apps authentication.
Once the authentication is over, the user will be redirected to the
following endpoint:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Callback URL used when the authentication is done</span>
</span><span class='line'><span class="n">post</span> <span class="s1">&#39;/auth/admin/callback&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">auth_details</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">env</span><span class="o">[</span><span class="s1">&#39;omniauth.auth&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">session</span><span class="o">[</span><span class="ss">:email</span><span class="o">]</span> <span class="o">=</span> <span class="n">auth_details</span><span class="o">.</span><span class="n">info</span><span class="o">[</span><span class="s1">&#39;email&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">redirect</span> <span class="s1">&#39;/auth/admin/welcome&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can access the authentication details from <code>request.env['omniauth.auth']</code>
and redirect the user to another page, like the admin landing page for
instance.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="s1">&#39;/auth/admin/welcome&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">session</span><span class="o">[</span><span class="ss">:email</span><span class="o">]</span>
</span><span class='line'>    <span class="n">erb</span> <span class="ss">:welcome_boss</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">redirect</span> <span class="s1">&#39;/auth/admin&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>On the landing page, you need to verify that the user is logged in, in
this case, during the previous step, we added the email of the user to
her session. We can therefore verify the presence of that information to
confirm the authentication status. If the user is authenticated, then we&#8217;ll render an ERB
template otherwise we&#8217;ll redirect her back to the login page.</p>

<p>We should also provide an endpoint in case the authentication failed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="s1">&#39;/auth/failure&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">params</span><span class="o">[</span><span class="ss">:message</span><span class="o">]</span>
</span><span class='line'>  <span class="c1"># do whatever you want here.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that by default, in dev mode, Omniauth won&#8217;t redirect the user
there. To enable this behavior, use the following snippet (works with any rack app,
Rails, Sinatra or whatever):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">OmniAuth</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">on_failure</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="o">|</span><span class="n">env</span><span class="o">|</span>
</span><span class='line'>  <span class="no">OmniAuth</span><span class="o">::</span><span class="no">FailureEndpoint</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">env</span><span class="p">)</span><span class="o">.</span><span class="n">redirect_to_failure</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>Using Google Apps for authentication with OmniAuth is trivial as long
you know two things:</p>

<ul>
<li>the identifier url: <code>'https://www.google.com/accounts/o8/site-xrds?hd=' + your_domain_name</code></li>
<li>Google&#8217;s discovery service gem</li>
</ul>


<p>This blog post was written using <code>omniauth 1.1.1</code>, <code>omniauth-openid 1.0.1</code>, <code>rack-openid 1.3.1</code> and <code>ruby-openid-apps-discovery 1.2.0</code>. This might not apply to you if you come from the future :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Real life concurrency in Go]]></title>
    <link href="http://matt.aimonetti.net/posts/2012/11/27/real-life-concurrency-in-go/"/>
    <updated>2012-11-27T10:08:00-08:00</updated>
    <id>http://matt.aimonetti.net/posts/2012/11/27/real-life-concurrency-in-go</id>
    <content type="html"><![CDATA[<p>The structure of a programming language reflects the challenges and solutions the
designers decided to address. Each designer coming with his/her own background
decides to tackle some specific issues in a novel way and/or often
decides to borrow existing paradigms from other languages.
We can&#8217;t, then, fairly judge a language without understanding
what problem the language designer was trying to address.</p>

<p>Today we are going to look at <a href="http://golang.org/">Google&#8217;s Go language</a>.
Go approaches concurrency from an interesting view point. But instead of digging
into the history and reasoning which led to this approach, I&#8217;d like to
show you the language constructs by actually writing real life code.</p>

<h2>Fetching web resources concurrently</h2>

<p>The following example is taken from my recent presentation <a href="http://matt.aimonetti.net/posts/2012/11/02/rubyconf-2012-ruby-vs-the-world/">Ruby vs. the World</a>. I explored a few programming languages and
showed how they changed my Ruby.</p>

<p>To show how <a href="http://golang.org/">Go</a> addresses concurrency, I decided to build a
program which would concurrently fetch various web resources, wait for all of
them to be fetched, then process them all at once. In other
programming languages, we could have used <a href="http://en.wikipedia.org/wiki/Thread_(computing">threads</a>) and a <a href="http://en.wikipedia.org/wiki/Semaphore_(programming">semaphore</a>), <a href="http://en.wikipedia.org/wiki/Actor_model">actors</a> or
<a href="http://en.wikipedia.org/wiki/Callbacks">callbacks</a>. Go&#8217;s approach is <a href="http://en.wikipedia.org/wiki/Communicating_sequential_processes">slightly different</a>, let&#8217;s walk through the
code together.</p>

<p>The first part of our code gets us setup:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">package</span> <span class="n">main</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>  <span class="s">&quot;time&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">var</span> <span class="n">urls</span> <span class="p">=</span> <span class="p">[]</span><span class="nb">string</span><span class="p">{</span>
</span><span class='line'>  <span class="s">&quot;http://www.rubyconf.org/&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;http://golang.org/&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;http://matt.aimonetti.net/&quot;</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code above names our package then imports a few standard libraries that we are going to need. It then defines an array/slice of strings representing the urls we are going to fetch.</p>

<p>Next we define a type we will use a bit later:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">type</span> <span class="n">HttpResponse</span> <span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">url</span>      <span class="nb">string</span>
</span><span class='line'>  <span class="n">response</span> <span class="p">*</span><span class="n">http</span><span class="p">.</span><span class="n">Response</span>
</span><span class='line'>  <span class="n">err</span>      <span class="n">error</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can think of a struct type as a simple representation of a class. Technically, we are defining a structure with some typed attributes. We will later on, create instances of this defined type.</p>

<p>Go implements OOP <a href="http://golang.org/doc/go_faq.html#Is_Go_an_object-oriented_language">slightly differently</a> than other languages.</p>

<blockquote><p>Methods in Go are more general than in C++, Java: they can be defined for any sort of data, even built-in types such as plain, “unboxed” integers. They are not restricted to structs (classes).</p></blockquote>

<p>We can therefore define methods/functions for any type of data,
including &#8220;any/all&#8221; types.
This approach to types is called <a href="http://en.wikipedia.org/wiki/Structural_type_system">structural typing</a>.</p>

<p>Here is the code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">func</span> <span class="n">asyncHttpGets</span><span class="p">(</span><span class="n">urls</span> <span class="p">[]</span><span class="nb">string</span><span class="p">)</span> <span class="p">[]*</span><span class="n">HttpResponse</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">ch</span> <span class="p">:=</span> <span class="nb">make</span><span class="p">(</span><span class="k">chan</span> <span class="p">*</span><span class="n">HttpResponse</span><span class="p">)</span>
</span><span class='line'>  <span class="n">responses</span> <span class="p">:=</span> <span class="p">[]*</span><span class="n">HttpResponse</span><span class="p">{}</span>
</span><span class='line'>  <span class="n">client</span> <span class="p">:=</span> <span class="n">http</span><span class="p">.</span><span class="n">Client</span><span class="p">{}</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">url</span> <span class="p">:=</span> <span class="k">range</span> <span class="n">urls</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">go</span> <span class="k">func</span><span class="p">(</span><span class="n">url</span> <span class="nb">string</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">fmt</span><span class="p">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">&quot;Fetching %s \n&quot;</span><span class="p">,</span> <span class="n">url</span><span class="p">)</span>
</span><span class='line'>          <span class="n">resp</span><span class="p">,</span> <span class="n">err</span> <span class="p">:=</span> <span class="n">client</span><span class="p">.</span><span class="n">Get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</span><span class='line'>          <span class="n">ch</span> <span class="p">&lt;-</span> <span class="p">&amp;</span><span class="n">HttpResponse</span><span class="p">{</span><span class="n">url</span><span class="p">,</span> <span class="n">resp</span><span class="p">,</span> <span class="n">err</span><span class="p">}</span>
</span><span class='line'>          <span class="k">if</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">&amp;&amp;</span> <span class="n">resp</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">&amp;&amp;</span> <span class="n">resp</span><span class="p">.</span><span class="n">StatusCode</span> <span class="p">==</span> <span class="n">http</span><span class="p">.</span><span class="n">StatusOK</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">resp</span><span class="p">.</span><span class="n">Body</span><span class="p">.</span><span class="n">Close</span><span class="p">()</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}(</span><span class="n">url</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">select</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">r</span> <span class="p">:=</span> <span class="p">&lt;-</span><span class="n">ch</span><span class="p">:</span>
</span><span class='line'>          <span class="n">fmt</span><span class="p">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">&quot;%s was fetched\n&quot;</span><span class="p">,</span> <span class="n">r</span><span class="p">.</span><span class="n">url</span><span class="p">)</span>
</span><span class='line'>          <span class="k">if</span> <span class="n">r</span><span class="p">.</span><span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">fmt</span><span class="p">.</span><span class="n">Println</span><span class="p">(</span><span class="s">&quot;with an error&quot;</span><span class="p">,</span> <span class="n">r</span><span class="p">.</span><span class="n">err</span><span class="p">)</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="n">responses</span> <span class="p">=</span> <span class="n">append</span><span class="p">(</span><span class="n">responses</span><span class="p">,</span> <span class="n">r</span><span class="p">)</span>
</span><span class='line'>          <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">responses</span><span class="p">)</span> <span class="p">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">urls</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">return</span> <span class="n">responses</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="k">case</span> <span class="p">&lt;-</span><span class="n">time</span><span class="p">.</span><span class="n">After</span><span class="p">(</span><span class="mi">50</span> <span class="p">*</span> <span class="n">time</span><span class="p">.</span><span class="n">Millisecond</span><span class="p">):</span>
</span><span class='line'>          <span class="n">fmt</span><span class="p">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">&quot;.&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">responses</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the meat of our application. And there is quite a lot of going
on in just a few lines. Assuming you aren&#8217;t familiar
with Go, I&#8217;ll walk though the code.</p>

<p>Let&#8217;s start with the signature:</p>

<ul>
<li>the function is named <code>asyncHttpGets</code></li>
<li>it takes an argument named<code>urls</code> which is an &#8220;array&#8221; of strings (I used quotes around the word
array because it&#8217;s technically what Go calls a slice)</li>
<li>it returns an &#8220;array&#8221; of <code>HttpResponse</code> pointers</li>
</ul>


<p>Then in the function body:</p>

<p>We start by creating an instance of a <code>channel</code> and assigning it to the
<code>ch</code> variable name. Think of a channel as a pipe like in unix.  We can write to and read from that channel.</p>

<p>In the next line we create an empty instance of a slice containing pointers to
<code>HttpResponse</code> objects.</p>

<p>Then, using the <code>for range</code> language construct, we iterate through our <code>urls</code>, storing the current value being used into the scoped variable <code>url</code>. The <code>url</code> is then available within the block/lambda/closure marked by the curly braces.</p>

<p>Now this is where the async construct comes in. Using the <code>go</code>
keyword, we define an anonymous function that takes a string argument representing a
url.</p>

<p>The function prints this string, then uses the <code>net/http</code>
library to fetch the web resource. We use the returned data to create an
instance of our <code>HttpResponse</code> type and send it to the channel.</p>

<p>This part gets a bit confusing because I reused the name <code>url</code>. We call this
anonymous function right away passing it the <code>url</code> variable set
by the loop.</p>

<p>You might wonder why we bother to create an anonymous function and
call it right away instead of just executing the code directly.
The <code>go</code> keyword executes the code that is passed in as a <em>goroutine</em> which is well explained <a href="http://golang.org/doc/effective_go.html#goroutines">here</a></p>

<blockquote><p>A goroutine is a function executing concurrently with other goroutines in the same address space. It is lightweight, costing little more than the allocation of stack space. And the stacks start small, so they are cheap, and grow by allocating (and freeing) heap storage as required.</p></blockquote>

<p>In other words, you start a <em>goroutine</em> and you let the &#8220;system&#8221; handle
how it wants to deal with the low level details. Technically, goroutines
might run in one or multiple threads, but you don&#8217;t need to know.
We trigger each http fetch in a separate goroutine
and then each response is pushed down the channel.</p>

<p>The second block of code begins with another <code>for</code> loop containing a switch/case statement.
The case statement checks if something is
in the channel. If there is something, we&#8230;</p>

<ul>
<li>allocate the data to the <code>r</code> variable</li>
<li>print the resource&#8217;s url</li>
<li>append the resource to the slice we created at the beginning of the function.</li>
</ul>


<p>If the length of the array is the same as the length of all urls we want to fetch, we are done
fetching all our resources and can return.
While still waiting for responses, we print a dot every 50ms.</p>

<p><strong>Update:</strong>
In the first version of this blog post I had used a &#8216;default&#8217; case
statement to print the dot and sleep for 50ms so the loop wouldn&#8217;t be
too tight and the concurrency effect was more obvious. But some
<a href="http://news.ycombinator.com/item?id=4837919">HN comments</a> pointed out that it wasn&#8217;t needed and I shouldn&#8217;t block.
For reference here is what I had before (don&#8217;t use this code):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">for</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">select</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">r</span> <span class="p">:=</span> <span class="p">&lt;-</span><span class="n">ch</span><span class="p">:</span>
</span><span class='line'>      <span class="n">fmt</span><span class="p">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">&quot;%s was fetched\n&quot;</span><span class="p">,</span> <span class="n">r</span><span class="p">.</span><span class="n">url</span><span class="p">)</span>
</span><span class='line'>      <span class="n">responses</span> <span class="p">=</span> <span class="n">append</span><span class="p">(</span><span class="n">responses</span><span class="p">,</span> <span class="n">r</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">responses</span><span class="p">)</span> <span class="p">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">urls</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">responses</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="k">default</span><span class="p">:</span>
</span><span class='line'>      <span class="n">fmt</span><span class="p">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">&quot;.&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">time</span><span class="p">.</span><span class="n">Sleep</span><span class="p">(</span><span class="mi">50</span> <span class="p">*</span> <span class="n">time</span><span class="p">.</span><span class="n">Millisecond</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Thank you HackerNews.</p>

<p>With that code constructed, our <code>main</code> can make use of it like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">results</span> <span class="p">:=</span> <span class="n">asyncHttpGets</span><span class="p">(</span><span class="n">urls</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">result</span> <span class="p">:=</span> <span class="k">range</span> <span class="n">results</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">result</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">&amp;&amp;</span> <span class="n">result</span><span class="p">.</span><span class="n">response</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">fmt</span><span class="p">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">&quot;%s status: %s\n&quot;</span><span class="p">,</span> <span class="n">result</span><span class="p">.</span><span class="n">url</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">result</span><span class="p">.</span><span class="n">response</span><span class="p">.</span><span class="n">Status</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running the code looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>go run concurrency_example.go
</span><span class='line'>.Fetching http://www.rubyconf.org/
</span><span class='line'>Fetching http://golang.org/
</span><span class='line'>Fetching http://matt.aimonetti.net/
</span><span class='line'>.....http://golang.org/ was fetched
</span><span class='line'>.......http://www.rubyconf.org/ was fetched
</span><span class='line'>.http://matt.aimonetti.net/ was fetched
</span><span class='line'>http://golang.org/ status: 200 OK
</span><span class='line'>http://www.rubyconf.org/ status: 200 OK
</span><span class='line'>http://matt.aimonetti.net/ status: 200 OK
</span></code></pre></td></tr></table></div></figure>


<p>As you can see from the print statements, the 3 urls are triggered in a
sequential way, but the responses come back in different orders due to different server latencies and response transfer time.</p>

<h2>Conclusion</h2>

<p>Go was designed to make concurrency easy for developers.
It is a very well documented language and you will find <a href="http://golang.org/doc/effective_go.html#concurrency">on this page
a lot of information about its concurrency philosophy</a> and details about each available constructs works.</p>

<p>I like that the language is very simple and the constructs
explicit. If you want to write concurrent code, Go pushes you to do it
in a specific style. That style is clear and comfortable for me. My code stays simple, I don&#8217;t go crazy with callbacks, and the
conventions make it simple for everyone else to understand my code.</p>

<p>Whether or not Go appeals to you stylistically, clearly the designers
stayed close to the goal of developing to a 21st century C
with a special focus on concurrency with a unix approach.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Engineers suck at finding the right jobs]]></title>
    <link href="http://matt.aimonetti.net/posts/2012/11/14/engineers-suck-at-finding-right-jobs/"/>
    <updated>2012-11-14T18:53:00-08:00</updated>
    <id>http://matt.aimonetti.net/posts/2012/11/14/engineers-suck-at-finding-right-jobs</id>
    <content type="html"><![CDATA[<p>If you are currently a software engineer you need to realize two things:</p>

<ul>
<li><strong>Now is an awesome time to be a software engineer</strong> (probably the best time ever).</li>
<li><strong>Your job might not be well suited for you</strong>.</li>
</ul>


<p>I&#8217;ll show you why we are lucky bastards, why we aren&#8217;t so good at
picking the right jobs and some hints on how to solve this issue.</p>

<br>


<p>I remember a family friend telling me when I was a kid that computers
are going to be the future and that there will be a lot of jobs in this
field. I also remember that the idea of sitting all day, alone, in front of a
<a href="http://en.wikipedia.org/wiki/Minitel">minitel</a>-like computer scared the hell out of me.
But he was right and I now work from home, spending 12+ hours
in front of a monitor. I get emails and phone calls from many people
reaching out to me to help them find software engineers.</p>

<p>At least three things make &#8220;now&#8221; the best time to be a software
engineer:</p>

<ul>
<li><strong>demand</strong></li>
<li><strong>projects</strong></li>
<li><strong>prestige</strong></li>
</ul>


<h2>Good time</h2>

<p>There is a huge demand for engineers. There are many more job openings
than candidates. But this is much better than in late 90s/early 2000
when anyone who could write a line of HTML would get a job.
Now the projects people are building
are way more interesting and have a real potential to change lives.
Before, you had to work for a giant company to
have a chance to do that. But now, with internet and smart mobile
devices everywhere, almost any startup (fancy name for small company) can
have a huge impact &#8211; look at Twitter for instance.</p>

<p>Lastly, being a geek is cool. Movies, cartoons, TV Shows now have
geek heroes (granted they usually don&#8217;t represent real geeks, but hey
it&#8217;s better than nothing).</p>

<h2>The problem</h2>

<p><strong>Most software engineers</strong> I know, are really bad
at choosing the right job for themselves. They <strong>don&#8217;t design a career</strong>.
Engineers are good at solving technical problems in an objective way, but <strong>when it comes
to our jobs and future, we seem to struggle.</strong></p>

<h2>Why?</h2>

<p>I&#8217;m not an expert but I have a few guesses I&#8217;d like to share with you:</p>

<ul>
<li>We don&#8217;t know our real worth.</li>
<li>We don&#8217;t make long term plans.</li>
<li>We get paid well, so why bother changing?</li>
<li>Changing job feels like betrayal.</li>
<li>The system is broken.</li>
</ul>


<h2>Self worth</h2>

<p>Most modern companies need solid engineers to be relevant in the
short/medium term and they know it. <strong>Most engineers have no idea how
their talent and dedication converts into real business value</strong>.
Without that appreciation, they
can&#8217;t easily estimate how much they are worth. The
salary scale for software engineers is dramatically different from other jobs/industries.
To your business, you might be worth twice or three times the salary of someone like a teacher.
This is probably not fair because of the social value a teacher offers, but that&#8217;s the way the <a href="http://en.wikipedia.org/wiki/Law_of_demand">law of
demand</a> works in our society.
Knowing how much you are worth to a company and how much to ask is
critical to properly negotiate or renegotiate a contract.</p>

<p>I remember when I moved to America and was thankful to have a job.
I had no idea that at $45k/year with basically no health coverage and no
vacation, I was grossly underpaid and could have been paid twice that amount
down the street. (Note: the average software engineer salary in the US
is at <a href="http://www.indeed.com/salary/Software-Engineer.html">$89,000 according to indeed.com</a>).
The average salary for a high school teacher is <a href="http://www.indeed.com/salary?q1=high+school+teacher&amp;l1=">$47k/year</a>
so I wasn&#8217;t complaining. As a matter of fact, I didn&#8217;t leave this job because of the salary.
I truly believe that <strong>&#8220;Money doesn&#8217;t buy happiness&#8221;</strong> and <strong>it shouldn&#8217;t be
your primary reason to accept or leave a job</strong>. Money is nice and
often makes life easier. But the point is that you have to understand
how much you&#8217;re worth, so you can get paid and
focus on your work.</p>

<h2>Defining a vector</h2>

<p><a href="http://www.kitchensoap.com/about-me/">John Allspaw</a> wrote a great blog
post about <a href="http://www.kitchensoap.com/2012/10/25/on-being-a-senior-engineer/">what it means to be a senior engineer</a>.
I strongly recommend you read it. I often look back at it
and pick up a couple points I need to focus on myself.
John wrote a book which is a collection of essays and interviews
regarding tech/web ops.</p>

<p><a href="http://www.amazon.com/gp/product/1449377440/ref=as_li_ss_il?ie=UTF8&camp=1789&creative=390957&creativeASIN=1449377440&linkCode=as2&tag=merbist-20" style="text-align:center; display:block;"><img border="0" src="http://ws.assoc-amazon.com/widgets/q?_encoding=UTF8&ASIN=1449377440&Format=_SL110_&ID=AsinImage&MarketPlace=US&ServiceVersion=20070822&WS=1&tag=merbist-20" ></a><img src="http://www.assoc-amazon.com/e/ir?t=merbist-20&l=as2&o=1&a=1449377440" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p>Here is a very interesting quote:</p>

<blockquote><p>Not everyone can be senior. If, after five years, you are senior, are you at the peak of your game? After five more years will you not have accrued more invaluable experience? What then? “Super engineer”? Five more years? “Super-duper engineer.” I blame the youth of our discipline for this affliction. [&#8230;] Given the dynamics of our industry many elected to move on to managerial positions or risk an entrepreneurial run at things.”</p></blockquote>

<p>There are two very strong points in this quote:</p>

<ul>
<li>we don&#8217;t quite know what it means to be a senior engineer (and John&#8217;s post does a great
job explaining his take on that).</li>
<li>many of us end up in managerial positions or leading startups.</li>
</ul>


<p>I might be a bit radical &#8211; but the day I stop learning/improving
will be the day that I will quit, change jobs or careers. John&#8217;s post has great pointers
to help us improve our skills. But the question I&#8217;m trying to raise is:</p>

<p><strong>what do we want from our career?</strong></p>

<p>&#8220;Career&#8221; sounds like a dirty word to many of us. It has a corporate,
sleazy, back stabbing connotation. When I hear it, I picture a
cliché stock photography of a bunch of smiling people wearing 80&#8217;s suits.
In the context on this post, let&#8217;s take the Oxford English Dictionary
definition: &#8220;course or progress through life (or a distinct portion of life)&#8221;.
The word comes from from French via the Old Occitan word: &#8220;carriera&#8221; which means &#8220;street&#8221;.</p>

<p><strong>A better word for career might be &#8220;path&#8221;.</strong></p>

<p>I think we have a hard time knowing what kind of path we want to be on.
When faced with the question, a lot of us answer:
&#8220;solving problems&#8221;, &#8220;having fun&#8221;, &#8220;changing the world&#8221;.
All these answers sound good, but they aren&#8217;t paths, they are just attributes.</p>

<p>I have to admit that I&#8217;m still struggling with this question and
probably will for a while. I&#8217;m pretty good at defining short term goals but I
have a hard time seeing the long term path.
As a matter of fact, a little while back I was seated in front of <a href="http://www.chadfowler.com/">Chad
Fowler</a> in his office in Washington, DC.
Chad wrote a great book called <a href="http://www.amazon.com/gp/product/1934356344/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1934356344&amp;linkCode=as2&amp;tag=merbist-20">&#8220;The Passionate Programmer: Creating a Remarkable Career in Software Development&#8221;</a>.</p>

<p><a href="http://www.amazon.com/gp/product/1934356344/ref=as_li_ss_il?ie=UTF8&camp=1789&creative=390957&creativeASIN=1934356344&linkCode=as2&tag=merbist-20" style="text-align:center; display:block;"><img border="0" src="http://ws.assoc-amazon.com/widgets/q?_encoding=UTF8&ASIN=1934356344&Format=_SL110_&ID=AsinImage&MarketPlace=US&ServiceVersion=20070822&WS=1&tag=merbist-20" ></a><img src="http://www.assoc-amazon.com/e/ir?t=merbist-20&l=as2&o=1&a=1934356344" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p>I&#8217;ve read Chad&#8217;s book (which inspired me in many ways) and have known Chad
for years. The point of our meeting was to decide what I was going
to work on next. <strong>Unconsciously, I expected Chad to just tell me what I
should be doing. I trusted him to pick the right &#8220;path&#8221; for me.</strong>
But I was surprised when Chad told me: <em>&#8220;you&#8217;re the
kind of engineer who can do anything. You&#8217;re a generalist who can pick
a topic and become a specialist. So what do you want to do?&#8221;</em></p>

<p>I wasn&#8217;t sure how to take it, it sounded like a compliment but, at the
same time, <strong>the fact that Chad didn&#8217;t have a solution to my problem bothered me.</strong>
I remember thinking, wait, he&#8217;s the expert and he&#8217;s deflecting the
situation by asking me the question I came to ask him. Sure, the
compliment was nice but that wouldn&#8217;t solve anything. What does that
mean about me? If an expert can&#8217;t figure out what I should do, I might
be screwed.</p>

<p>Then on my way back home, I realized that <strong>it didn&#8217;t matter how well Chad knew me,
he couldn&#8217;t guess what I even didn&#8217;t know about myself.</strong></p>

<p><strong>My long term happiness depends on me finding a direction I want my
professional life to take.</strong>
In Chad&#8217;s book, there is a strong focus on finding a market,
understanding it, developing skills and marketing yourself.
However there was something I had missed.</p>

<blockquote><p>The goal-oriented, destination-focused thinking that you usually do
leads only from one goal to the next. It has no logical end. What most
of us fail to realize is that <em>the path</em> is the end.</p></blockquote>

<p>I&#8217;ve always known that the journey is more important than the destination in itself,
but what I had missed is that you still need to define a destination or
maybe more precisely a direction, a vector.
My problem is that my path was just a bunch of scattered dots. Hopping from one
to the other, I was hoping it was going to make a pretty drawing. The challenge is
when I got to a spot, I was stuck not knowing what to do next. I ended up picking another
short term goal/destination based on the opportunities available at that
time.</p>

<p>What I should do instead was to <strong>define a general direction and then
learn through the process.</strong> I believe this will help me enjoy my job more
than running after goals. It will allow me to see the world differently
and will help me make the right career choices when the time is right.
To be honest, I think that&#8217;s the only way I can build endurance and not
burn out in 5 years. That said, I&#8217;ll still have goals,
deadlines and the usual &#8211; but they won&#8217;t define my own personal progress.</p>

<h2>Why bother?</h2>

<p>Changing jobs is a pain. As an engineer I weigh the pros and cons and try
to logically pick the right choice &#8211; at least in theory. In practice I
avoid dealing with questions that might result in challenging
consequences.</p>

<p>Quiting a job is tough. You have to tell your current employer and your
colleagues that you are leaving them for something you think is better
for you. <strong>The nicer the people you work with, the harder it is. The better
you are paid, the harder it is.</strong> If you work with nice people and
you&#8217;re well paid, leaving is <em>really</em> hard (take note if you run a team).</p>

<p>In our profession, changing jobs isn&#8217;t usually seen as something
bad. Recruiters might pressure you to take a new, better job.
Beware impulsive changes though. Recruiters want their commissions so
they&#8217;ll do anything they can do make you switch. They&#8217;ll try to convince
you that the grass is greener on the other side. Maybe that&#8217;s only &#8220;bad&#8221; recruiters.</p>

<p>There are some recruiters who care about people and companies. Recruiters
who will help you find the right job for you. However, they
won&#8217;t be able to help you if you don&#8217;t know what direction you want to
go to.</p>

<p>I remember being stuck in a pretty terrible work environment, being
underpaid and the projects I was working on weren&#8217;t going anywhere.
A friend gave me a Seth Godin&#8217;s book called <a href="http://www.amazon.com/gp/product/1591841666/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1591841666&amp;linkCode=as2&amp;tag=merbist-20">&#8220;The Dip: A Little Book That Teaches You When to Quit (and When to Stick)&#8221;</a>.</p>

<p><a href="http://www.amazon.com/gp/product/1591841666/ref=as_li_ss_il?ie=UTF8&camp=1789&creative=390957&creativeASIN=1591841666&linkCode=as2&tag=merbist-20" style="text-align:center; display:block;"><img border="0" src="http://ws.assoc-amazon.com/widgets/q?_encoding=UTF8&ASIN=1591841666&Format=_SL110_&ID=AsinImage&MarketPlace=US&ServiceVersion=20070822&WS=1&tag=merbist-20" ></a><img src="http://www.assoc-amazon.com/e/ir?t=merbist-20&l=as2&o=1&a=1591841666" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p>I&#8217;m not a big fan of self-help/business books, but this book raised a very good and simple question:
how do the efforts compare to the returns?
Which situation are you in:</p>

<p><img src="http://matt.aimonetti.net/images/dip.jpg" alt="" /></p>

<p><img src="http://matt.aimonetti.net/images/cliff-dip.jpg" alt="" /></p>

<p>Think about it. <strong>Will the effort you put into your work pay off?</strong>
If you don&#8217;t think it will, then you should quit right away.</p>

<p>The logic is pretty simple but requires you to forecast. For that you need
some sort of metrics helping you to see if you are getting closer or
further from the direction you set for yourself.</p>

<h2>Trust</h2>

<p>Trust is the key element of any relationship.
In <a href="http://www.amazon.com/gp/product/B000UCUX0K/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B000UCUX0K&amp;linkCode=as2&amp;tag=merbist-20">The Five Dysfunctions of a Team</a>, Patrick Lencioni explains that the base of management dysfunctions is absence of trust:</p>

<p><img src="http://matt.aimonetti.net/images/fivedysfunctions.gif" alt="" /></p>

<p>Turns out it&#8217;s the same thing for our careers. We need a team of people
to help us define a vision/direction and keep us honest and accountable.</p>

<p>Find people who you can trust to talk to about your professional goals,
your progress, failures and doubts. People who will be honest with you
and tell you things you might not want to hear. Find mentors and honest
people. These people don&#8217;t have to be working in the industry. They just
have to be able to listen and care.</p>

<p>People like that are extremely hard to find, but so are good executives.
<strong>I believe that having trustworthy friends (partners/family members..) who care is a big part of what
makes someone successful.</strong></p>

<h2>My small contribution</h2>

<p>As I explained earlier, I&#8217;m no expert and I also struggle with the issues I described.
However, I&#8217;d be glad to provide a bit of my free time to help you think
through these issues.</p>

<p><strong>A lot of you are doing a great job without the rest
of us noticing.</strong> If you don&#8217;t have a popular twitter account, blog, open
source projects, published books or given talks at conferences, it might
be hard to get yourself noticed or even know how much you&#8217;re worth.
Trust is a big deal and if you are considering moving on, you probably
don&#8217;t want your boss and your colleagues to know. You probably also
don&#8217;t know good recruiters you can trust. You might not even be sure
it&#8217;s worth investing too much time.</p>

<p>Most of you probably won&#8217;t consider it, but <strong>I&#8217;d like to offer my
help</strong>
if you&#8217;d like it. <strong>I promise full anonymity and no strings
attached</strong>. Just</p>

<ul>
<li><del>email me</del></li>
<li><del>tell me about yourself and what you do</del></li>
<li><del>what direction you&#8217;d like your career to take</del></li>
<li><del>ask any questions you might have </del></li>
</ul>


<p>After exchanging a few emails , <strong>I&#8217;ll try to make good use of my network</strong>
to find you a way to move in your desired direction.
Or, if you work for an interesting company with current openings, feel free to contact
me too.</p>

<p><strong> Update: My inbox is overflowing with emails and I already spent
literally days replying to as many people as possible. I&#8217;m sorry but at
this time I can&#8217;t reply to any new enquiries. I&#8217;ll write a follow up
blog post that covers what I learned from my interactions with so many
readers.
</strong></p>

<p>I have no idea how this will turn out. Maybe I&#8217;ll get a couple of emails,
zero, or way too many to handle &#8211; but it&#8217;s worth a try. I do have a full time job,
so please don&#8217;t expect me to reply to your emails within the hour.</p>

<p>I finally took the time to enable the comments in this blog. Feel free
to leave advice or feedback.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyConf 2012 - Ruby vs. The World]]></title>
    <link href="http://matt.aimonetti.net/posts/2012/11/02/rubyconf-2012-ruby-vs-the-world/"/>
    <updated>2012-11-02T20:47:00-07:00</updated>
    <id>http://matt.aimonetti.net/posts/2012/11/02/rubyconf-2012-ruby-vs-the-world</id>
    <content type="html"><![CDATA[<p>During <a href="http://rubyconf.com/">RubyConf 2012</a> in Denver, Colorado Matt
Aimonetti gave a talk entitled <strong>Ruby Vs. The World</strong>.</p>

<h2>Description of the talk:</h2>

<p>Ruby is an awesome programming language, it&#8217;s so pleasing you probably haven&#8217;t seriously looked at other languages since you switched. The programming world is evolving fast, new languages are created daily, new trends are emerging. Let&#8217;s take some time to look at a few languages from a Ruby developer perspective.</p>

<p><img src="https://speakerd.s3.amazonaws.com/presentations/50941f6aeb710400020019ac/slide_19.jpg" alt="Matt Aimonetti talks Scala, Clojure, Go and Ruby" /></p>

<h2>Slides</h2>

<script async class="speakerdeck-embed" data-id="50941f6aeb710400020019ac" data-ratio="1.2994923857868" src="http://matt.aimonetti.net//speakerdeck.com/assets/embed.js"></script>


<p>The slides are available on [Matt&#8217;s SpeakerDeck page]https://speakerdeck.com/matt_aimonetti/ruby-vs-the-world) and can be <a href="https://speakerd.s3.amazonaws.com/presentations/50941f6aeb710400020019ac/aimonetti-ruby_vs_the_world_rubyconf_2012.pdf">downloaded here</a>.</p>

<h2>Video</h2>

<iframe width="640" height="360" src="http://www.youtube.com/embed/V_k3q37Tieg" frameborder="0" allowfullscreen></iframe>


<h2>Presentation website</h2>

<p>Matt&#8217;s presentation was filmed by <a href="http://confreaks.com">Confreaks</a> and posted <a href="http://confreaks.com/videos/1288-rubyconf2012-ruby-vs-the-world">here</a>.</p>

<p>For more RubyConf 2012 talks, go <a href="http://confreaks.com/events/rubyconf2012">there</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Aloha RubyConf - mmm..mruby or why yet another Ruby implementation]]></title>
    <link href="http://matt.aimonetti.net/posts/2012/10/09/mmm-dot-mruby-or-why-yet-another-ruby-implementation/"/>
    <updated>2012-10-09T20:14:00-07:00</updated>
    <id>http://matt.aimonetti.net/posts/2012/10/09/mmm-dot-mruby-or-why-yet-another-ruby-implementation</id>
    <content type="html"><![CDATA[<p>During <a href="http://aloharubyconf.com/">Aloha RubyConf 2012</a> in Honolulu, Hawaii Matt
Aimonetti gave a talk entitled <strong>mmm..mruby or why yet another Ruby implementation</strong>.</p>

<h2>Description of the talk:</h2>

<p>mruby is Matz’ new Ruby implementation, it’s not cooler than node.js, it doesn’t natively support Hypstermedia,
 it looks just like the good old Ruby. So why should we, as a community care?</p>

<p>Matt&#8217;s talk is divided in two parts, an introduction of mruby (embedded
Ruby) and and revisiting Ruby.</p>

<p><img src="https://speakerd.s3.amazonaws.com/presentations/50752712f8a4020002043005/slide_10.jpg?1350068026" alt="Matt Aimonetti talks about mruby" /></p>

<h2>Slides</h2>

<script async class="speakerdeck-embed" data-id="50752712f8a4020002043005" data-ratio="1.2994923857868" src="http://matt.aimonetti.net//speakerdeck.com/assets/embed.js"></script>


<p>The slides are available on [Matt&#8217;s SpeakerDeck page]https://speakerdeck.com/matt_aimonetti/mmmm-dot-mruby-everywhere-and-revisiting-ruby) and can be <a href="https://speakerd.s3.amazonaws.com/presentations/50752712f8a4020002043005/mmmmruby_aloha_rubyconf.pdf">downloaded here</a>.</p>

<h2>Video</h2>

<iframe width="640" height="360" src="http://www.youtube.com/embed/eZYRd86OTbk" frameborder="0" allowfullscreen></iframe>


<h2>Presentation website</h2>

<p>Matt&#8217;s presentation was filmed by <a href="http://confreaks.com">Confreaks</a> and posted <a href="http://confreaks.com/videos/1252-aloharuby2012-mmm-mruby-or-why-yet-another-ruby-implementation">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PulsoConf 2012 - Tour of programming languages]]></title>
    <link href="http://matt.aimonetti.net/posts/2012/10/05/pulsoconf-tour-of-programming-languages/"/>
    <updated>2012-10-05T15:09:00-07:00</updated>
    <id>http://matt.aimonetti.net/posts/2012/10/05/pulsoconf-tour-of-programming-languages</id>
    <content type="html"><![CDATA[<p>During <a href="http://pulsoconf.co/">PulsoConf 2012</a> in Bogotá, Colombia Matt
Aimonetti gave a talk entitled <em>Tower of
Babel: a tour of programming languages</em>.</p>

<h2>Description of the talk:</h2>

<p>Programming languages affect the way one looks and solves problems. But
comparing programming languages isn&#8217;t as simple as drawing a table
comparing features.</p>

<p><img src="http://matt.aimonetti.net/images/matt_aimonetti_languages_table.jpg" alt="Matt Aimonetti compares programming languages" /></p>

<p>In his talk, Matt shows what he likes, dislikes, the philosophy and concrete example of how to use 7 programming
languages:</p>

<ul>
<li>Ruby</li>
<li>JavaScript</li>
<li>CoffeeScript</li>
<li>Objective-C</li>
<li>Clojure</li>
<li>Scala</li>
<li>Go</li>
</ul>


<h2>Slides</h2>

<script async class="speakerdeck-embed" data-id="50662c32244a9d000202ba53" data-ratio="1.299492385786802" src="http://matt.aimonetti.net//speakerdeck.com/assets/embed.js"></script>


<p>The slides are available on <a href="https://speakerdeck.com/u/matt_aimonetti/p/tower-of-babel-a-tour-of-programming-languages">Matt&#8217;s SpeakerDeck</a> and can be <a href="https://speakerd.s3.amazonaws.com/presentations/50662c32244a9d000202ba53/aimonetti_pulsoconf_2012.pdf">downloaded here</a>.</p>

<h2>Video</h2>

<p>TBD</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What is Scala's pattern matching]]></title>
    <link href="http://matt.aimonetti.net/posts/2012/09/20/what-is-scala-pattern-matching/"/>
    <updated>2012-09-20T21:18:00-07:00</updated>
    <id>http://matt.aimonetti.net/posts/2012/09/20/what-is-scala-pattern-matching</id>
    <content type="html"><![CDATA[<p><a href="http://www.scala-lang.org/">Scala</a> is a very interesting programming
language. It has for goal to provide
both <a href="http://en.wikipedia.org/wiki/Object-oriented_programming">Object Oriented</a> and <a href="http://en.wikipedia.org/wiki/Functional_programming">Functional Programming</a> paradigms.
Now <a href="http://www.scala-lang.org/">Scala</a> isn&#8217;t the only recent programming language out there mixing the two paradigms.
<a href="http://www.ruby-lang.org/">Ruby</a>, <a href="http://en.wikipedia.org/wiki/JavaScript">JavaScript</a> and <a href="http://clojure.org/">Clojure</a> are other examples of popular
languages implementing both functional and OO programming patterns. Of
course, they each have a different take on the problem and that is what
is interesting.</p>

<p>Instead of arguing the pros and cons of OOP vs FP and how each of the
previously mentioned languages handle being OOP and FP, I&#8217;d like to introduce
a very powerful <a href="http://www.scala-lang.org/">Scala</a> idiom: <a href="http://en.wikipedia.org/wiki/Pattern_matching">pattern
matching</a>. Note that
pattern matching isn&#8217;t something Scala invented nor that it only exists in
Scala. Pattern matching can be achieved many different ways. However,
the majority of the popular languages don&#8217;t put this concept at the
center of their language. A few languages way before Scala rested
heavily on pattern matching such as <a href="http://www.erlang.org/doc/reference_manual/patterns.html">Erlang</a>,
<a href="http://www.haskell.org/haskellwiki/Haskell">Haskell</a> but that&#8217;s a different story.
How does Scala offers Pattern Matching, what is it and finally why is it
valuable?</p>

<h2>Scala pattern matching by examples</h2>

<p>As its name indicates, pattern matching is used to detect patterns.
Here is an example that covers a few interesting cases:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">listAnalysis</span><span class="o">(</span><span class="n">list</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Any</span><span class="o">])</span> <span class="k">=</span> <span class="n">list</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">case</span> <span class="nc">Nil</span> <span class="k">=&gt;</span> <span class="s">&quot;empty&quot;</span>
</span><span class='line'>   <span class="k">case</span> <span class="-Symbol">&#39;a</span><span class="err">&#39;</span> <span class="o">::</span> <span class="n">tail</span> <span class="k">=&gt;</span> <span class="s">&quot;starting by &#39;a&#39;&quot;</span>
</span><span class='line'>   <span class="k">case</span> <span class="o">(</span><span class="n">head</span><span class="k">:</span><span class="kt">Int</span><span class="o">)</span> <span class="o">::</span> <span class="k">_</span> <span class="k">if</span> <span class="n">head</span> <span class="o">&gt;</span> <span class="mi">3</span> <span class="k">=&gt;</span> <span class="s">&quot;starting by an int greater than 3&quot;</span>
</span><span class='line'>   <span class="k">case</span> <span class="o">(</span><span class="n">head</span><span class="k">:</span><span class="kt">Int</span><span class="o">)</span> <span class="o">::</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="s">&quot;starting by an int&quot;</span>
</span><span class='line'>   <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="s">&quot;whatever&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you&#8217;ve never seen any Scala that probably looks like gibberish to
you. Let me break it down:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">listAnalysis</span><span class="o">(</span><span class="n">list</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Any</span><span class="o">])</span> <span class="k">=</span> <span class="n">list</span> <span class="k">match</span> <span class="o">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I define a new function called <code>listAnalysis</code> which takes an argument
named <code>list</code> which is of type <code>List</code> (this list could contain any kind
of elements).
The implementation of this function is a pattern match on the list
argument.
The body of this &#8216;pattern match&#8217; looks like a classical switch statement.
But it&#8217;s actually much more than a simple switch statement. Surely it
could be used like one, but as we will see, it can do much more.</p>

<p>Note that you can apply a pattern match against more than one object at
once as shown a bit later.</p>

<p>Let&#8217;s look at the statements inside the function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="nc">Nil</span> <span class="k">=&gt;</span> <span class="s">&quot;empty&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case we are checking that the list is empty or nil. If that&#8217;s
the case, the statement on the other side of the &#8220;fat arrow&#8221; is
executed. In this case, we return a string but we could have called
another function or so whatever.</p>

<p>Now the second statement is much more complex and much more powerful:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="-Symbol">&#39;a</span><span class="err">&#39;</span> <span class="o">::</span> <span class="n">tail</span> <span class="k">=&gt;</span> <span class="s">&quot;starting by &#39;a&#39;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Remember that we are doing pattern matching against our list object.
What we are doing here is use the <code>::</code> operator (aka cons operator) to
extract the head and the rest of the list and then we match the head
against the <code>'a'</code> character.</p>

<p>This statement could have been written different ways:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="-Symbol">&#39;a</span><span class="err">&#39;</span> <span class="o">::</span> <span class="n">rest</span> <span class="k">=&gt;</span> <span class="s">&quot;starting by &#39;a&#39;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In that case we named the <code>tail</code> of the list <code>rest</code>, but really we don&#8217;t
care how it&#8217;s called or its value, so the sensitive thing to do is to
rewrite that statement like that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="-Symbol">&#39;a</span><span class="err">&#39;</span> <span class="o">::</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="s">&quot;starting by &#39;a&#39;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This basically says we are looking for a list that starts by <code>'a'</code> (and we
don&#8217;t care about the rest).</p>

<p>Another statement:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="o">(</span><span class="n">head</span><span class="k">:</span><span class="kt">Int</span><span class="o">)</span> <span class="o">::</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="s">&quot;starting by an int&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case we type match the first element of the list and check that
we have an integer. Note that using the cons operator in the match cases
doesn&#8217;t seem to affect performance. It would seem that at compilation,
the statement are rewritten to avoid creating uneeded objects (List also implements structural sharing of the tail list).
I&#8217;m not a Scala expert so someone with more experience might be able to
confirm/clarify.</p>

<p>Now let&#8217;s look at a variant of this statement:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="o">(</span><span class="n">head</span><span class="k">:</span><span class="kt">Int</span><span class="o">)</span> <span class="o">::</span> <span class="k">_</span> <span class="k">if</span> <span class="n">head</span> <span class="o">&gt;</span> <span class="mi">3</span> <span class="k">=&gt;</span> <span class="s">&quot;starting by an int greater than 3&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the same statement as above, but we are adding an extra
condition after the match. This is quite useful when simple matching
doesn&#8217;t cut it.</p>

<p>Finally we have a fallback statement:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="s">&quot;whatever&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>For more information about the cons operator, <a href="http://www.scala-lang.org/node/112">read about the extractor objects</a> and what they can do.</p>

<p>Here is the result of calling our function with different lists:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">listAnalysis</span><span class="o">(</span><span class="nc">List</span><span class="o">())</span>                             <span class="c1">//&gt; java.lang.String = empty</span>
</span><span class='line'><span class="n">listAnalysis</span><span class="o">(</span><span class="s">&quot;This is a test&quot;</span><span class="o">.</span><span class="n">toList</span><span class="o">)</span>            <span class="c1">//&gt; java.lang.String = whatever</span>
</span><span class='line'><span class="n">listAnalysis</span><span class="o">(</span><span class="s">&quot;abcde&quot;</span><span class="o">.</span><span class="n">toList</span><span class="o">)</span>                     <span class="c1">//&gt; java.lang.String = starting by &#39;a&#39;</span>
</span><span class='line'><span class="n">listAnalysis</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">))</span>                        <span class="c1">//&gt; java.lang.String = starting by an int</span>
</span><span class='line'><span class="n">listAnalysis</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="mi">42</span><span class="o">,</span><span class="mi">24</span><span class="o">,</span><span class="mi">36</span><span class="o">))</span>                     <span class="c1">//&gt; java.lang.String = starting by an int greater than 3</span>
</span><span class='line'><span class="n">listAnalysis</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">.</span><span class="n">toList</span><span class="o">)</span>                         <span class="c1">//&gt; java.lang.String = starting by &#39;a&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is another example using 2 items for the match:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">doubleMatch</span><span class="o">(</span><span class="n">foo</span><span class="k">:</span> <span class="kt">Any</span><span class="o">,</span> <span class="n">bar</span><span class="k">:</span> <span class="kt">Any</span><span class="o">)</span> <span class="k">=</span> <span class="o">(</span><span class="n">foo</span><span class="o">,</span> <span class="n">bar</span><span class="o">)</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="o">(</span><span class="-Symbol">&#39;a</span><span class="err">&#39;</span><span class="o">,</span> <span class="-Symbol">&#39;b</span><span class="err">&#39;</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="s">&quot;a and b&quot;</span>
</span><span class='line'>  <span class="k">case</span> <span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="-Symbol">&#39;b</span><span class="err">&#39;</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="s">&quot;1 and b&quot;</span>
</span><span class='line'>  <span class="k">case</span> <span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="k">_</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="s">&quot;1 and &quot;</span><span class="o">+</span> <span class="n">bar</span>
</span><span class='line'>  <span class="k">case</span> <span class="o">(</span><span class="n">a</span><span class="k">:</span><span class="kt">Float</span><span class="o">,</span> <span class="k">_</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="s">&quot;foo float&quot;</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="s">&quot;unknown case&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">doubleMatch</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="s">&quot;test&quot;</span><span class="o">)</span>                           <span class="c1">//&gt; java.lang.String = 1 and test</span>
</span><span class='line'><span class="n">doubleMatch</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="-Symbol">&#39;b</span><span class="err">&#39;</span><span class="o">)</span>                              <span class="c1">//&gt; java.lang.String = 1 and b</span>
</span><span class='line'><span class="n">doubleMatch</span><span class="o">(</span><span class="mi">42</span><span class="o">,</span> <span class="nc">Nil</span><span class="o">)</span>                             <span class="c1">//&gt; java.lang.String = unknown case</span>
</span><span class='line'><span class="n">doubleMatch</span><span class="o">(</span><span class="-Symbol">&#39;a</span><span class="err">&#39;</span><span class="o">,</span> <span class="-Symbol">&#39;b</span><span class="err">&#39;</span><span class="o">)</span>                            <span class="c1">//&gt; java.lang.String = a and b</span>
</span><span class='line'><span class="n">doubleMatch</span><span class="o">(</span><span class="mf">4.2f</span><span class="o">,</span> <span class="mi">42</span><span class="o">)</span>                            <span class="c1">//&gt; java.lang.String = foo float</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Why is pattern matching valuable?</h1>

<p>In short, pattern matching allows the developer to deconstruct a structure to find specific
elements, in other words the pattern, needed to then constuct an
object/structure or trigger a function.</p>

<p>It&#8217;s the opposite process of calling a method on an object. Here we
start from a structure (instead of the instance of an object), this structure is just a basic struct and
based on a found pattern, we then trigger a function (with access to the data if we need it).
When you have a stable and known data structure, it&#8217;s often very interesting to
use the pattern matching approach because you can easily expand the
operations you can execute. However, if your operations are stable but the data changes,
then the Object Oriented approach seems more adequate.</p>

<p>Besides that, pattern matching will often make your code clearer than
using if/else statements. Especially in a language like Scala where you
can define pattern matching function within a function and you can also
pass pattern matching functions around. Like eveything else, it needs to be used with caution so the intend of
the code is still understandable. That said it&#8217;s a great tool to have handy and I&#8217;ve
had a lot of fun rewriting my newbie Scala code using a more idiomatic
approach based on pattern matching.</p>

<p>I hope you enjoyed this quick introduction. You can read more about pattern matching in Scala in the following articles:
 <em>(note: <a href="http://ikaisays.com">Ikai</a>&#8217;s post on how he uses regexps with pattern matching is a fun read.)</em></p>

<ul>
<li><a href="http://www.scala-lang.org/node/120">http://www.scala-lang.org/node/120</a></li>
<li><a href="http://pragprog.com/magazines/2012-03/scala-for-the-intrigued">http://pragprog.com/magazines/2012-03/scala-for-the-intrigued</a></li>
<li><a href="http://kerflyn.wordpress.com/2011/02/14/playing-with-scalas-pattern-matching/">http://kerflyn.wordpress.com/2011/02/14/playing-with-scalas-pattern-matching/</a></li>
<li><a href="http://ikaisays.com/2009/04/04/using-pattern-matching-with-regular-expressions-in-scala/">http://ikaisays.com/2009/04/04/using-pattern-matching-with-regular-expressions-in-scala/</a></li>
<li><a href="http://www.artima.com/scalazine/articles/pattern_matching.html">http://www.artima.com/scalazine/articles/pattern_matching.html</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
